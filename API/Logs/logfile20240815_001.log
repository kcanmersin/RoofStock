2024-08-15 22:36:36.654 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:36:36.743 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:36:36.757 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:36:36.757 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:36:36.758 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:36:36.758 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:36:36.758 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:36:36.758 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:36:36.885 +03:00 [INF] Server desktop-ihebt3k:4028:87ffb79b successfully announced in 103,3607 ms
2024-08-15 22:36:36.889 +03:00 [INF] Server desktop-ihebt3k:4028:87ffb79b is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.497 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:39:22.588 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:39:22.602 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:39:22.602 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:39:22.602 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:39:22.603 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:39:22.603 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:39:22.603 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:39:22.678 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da successfully announced in 64,7459 ms
2024-08-15 22:39:22.680 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.685 +03:00 [INF] 2 servers were removed due to timeout
2024-08-15 22:39:22.791 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da all the dispatchers started
2024-08-15 22:39:22.854 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:39:22.888 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:39:22.888 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:39:22.888 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:39:22.889 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:39:22.889 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:39:22.889 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:39:22.889 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:39:22.897 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:39:22.899 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:39:22.967 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:39:22.967 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:39:22.967 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:39:22.967 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:39:22.967 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:39:22.967 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:39:22.968 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:39:22.968 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:39:22.968 +03:00 [INF] Hosting environment: Development
2024-08-15 22:39:22.968 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:39:22.970 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:39:22.971 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 successfully announced in 3,2974 ms
2024-08-15 22:39:22.972 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.987 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 all the dispatchers started
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.271 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.272 +03:00 [INF] Executed DbCommand (135ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.273 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.298 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:39:24.353 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:39:24.356 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 44.9416 ms
2024-08-15 22:39:24.356 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 0.7453 ms
2024-08-15 22:39:24.357 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 59.1515ms
2024-08-15 22:39:24.357 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 3.3873ms
2024-08-15 22:39:24.365 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:39:24.369 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.0748 ms
2024-08-15 22:39:24.370 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 4.7617ms
2024-08-15 22:39:24.376 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:39:24.378 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 1.9258ms
2024-08-15 22:39:24.381 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:39:24.381 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:39:24.381 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 0.7089ms
2024-08-15 22:39:24.382 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 0.5212 ms
2024-08-15 22:39:24.382 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 1.0277ms
2024-08-15 22:39:24.569 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:39:24.663 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 93.3488 ms
2024-08-15 22:39:24.663 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 93.7669ms
2024-08-15 22:39:24.665 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:39:24.669 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 4.5185 ms
2024-08-15 22:39:24.670 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 4.8643ms
2024-08-15 22:39:24.725 +03:00 [INF] Received HTTP response headers after 449.7963ms - 200
2024-08-15 22:39:24.726 +03:00 [INF] End processing HTTP request after 459.3711ms - 200
2024-08-15 22:39:24.737 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.737 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.136 +03:00 [INF] Received HTTP response headers after 398.3565ms - 200
2024-08-15 22:39:25.136 +03:00 [INF] End processing HTTP request after 399.5303ms - 200
2024-08-15 22:39:25.137 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.137 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.466 +03:00 [INF] Received HTTP response headers after 328.573ms - 200
2024-08-15 22:39:25.466 +03:00 [INF] End processing HTTP request after 329.1049ms - 200
2024-08-15 22:39:25.466 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.466 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.798 +03:00 [INF] Received HTTP response headers after 331.7724ms - 200
2024-08-15 22:39:25.798 +03:00 [INF] End processing HTTP request after 332.3767ms - 200
2024-08-15 22:39:25.801 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.801 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.114 +03:00 [INF] Received HTTP response headers after 312.986ms - 200
2024-08-15 22:39:26.115 +03:00 [INF] End processing HTTP request after 313.4099ms - 200
2024-08-15 22:39:26.115 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.115 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.425 +03:00 [INF] Received HTTP response headers after 309.6089ms - 200
2024-08-15 22:39:26.425 +03:00 [INF] End processing HTTP request after 310.2938ms - 200
2024-08-15 22:39:26.425 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.426 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.769 +03:00 [INF] Received HTTP response headers after 343.3093ms - 200
2024-08-15 22:39:26.769 +03:00 [INF] End processing HTTP request after 343.7948ms - 200
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.588 +03:00 [INF] Received HTTP response headers after 326.2228ms - 200
2024-08-15 22:39:29.588 +03:00 [INF] End processing HTTP request after 327.1562ms - 200
2024-08-15 22:39:29.635 +03:00 [INF] Received HTTP response headers after 373.2188ms - 200
2024-08-15 22:39:29.635 +03:00 [INF] End processing HTTP request after 374.0205ms - 200
2024-08-15 22:39:29.648 +03:00 [INF] Received HTTP response headers after 385.4741ms - 200
2024-08-15 22:39:29.648 +03:00 [INF] End processing HTTP request after 387.3584ms - 200
2024-08-15 22:39:29.649 +03:00 [INF] Received HTTP response headers after 386.7689ms - 200
2024-08-15 22:39:29.649 +03:00 [INF] End processing HTTP request after 388.3315ms - 200
2024-08-15 22:39:29.650 +03:00 [INF] Received HTTP response headers after 387.8541ms - 200
2024-08-15 22:39:29.650 +03:00 [INF] End processing HTTP request after 389.6331ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] Received HTTP response headers after 391.6862ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] End processing HTTP request after 393.1155ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] Received HTTP response headers after 392.502ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] End processing HTTP request after 393.6264ms - 200
2024-08-15 22:39:29.655 +03:00 [INF] Received HTTP response headers after 357.2416ms - 200
2024-08-15 22:39:29.655 +03:00 [INF] End processing HTTP request after 357.589ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] Received HTTP response headers after 359.1891ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] Received HTTP response headers after 395.1567ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] End processing HTTP request after 360.0979ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] End processing HTTP request after 396.7391ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] Received HTTP response headers after 396.0073ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] End processing HTTP request after 397.2897ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] Received HTTP response headers after 396.8291ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] End processing HTTP request after 397.8461ms - 200
2024-08-15 22:39:29.659 +03:00 [INF] Received HTTP response headers after 361.228ms - 200
2024-08-15 22:39:29.659 +03:00 [INF] End processing HTTP request after 361.7882ms - 200
2024-08-15 22:39:29.670 +03:00 [INF] Received HTTP response headers after 372.2531ms - 200
2024-08-15 22:39:29.670 +03:00 [INF] End processing HTTP request after 373.1268ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] Received HTTP response headers after 372.6018ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] End processing HTTP request after 373.4509ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] Received HTTP response headers after 373.093ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] End processing HTTP request after 373.8443ms - 200
2024-08-15 22:39:29.695 +03:00 [INF] Received HTTP response headers after 433.2298ms - 200
2024-08-15 22:39:29.695 +03:00 [INF] End processing HTTP request after 434.7751ms - 200
2024-08-15 22:39:29.720 +03:00 [INF] Received HTTP response headers after 458.855ms - 200
2024-08-15 22:39:29.720 +03:00 [INF] End processing HTTP request after 459.8765ms - 200
2024-08-15 22:39:30.252 +03:00 [INF] Received HTTP response headers after 954.299ms - 200
2024-08-15 22:39:30.252 +03:00 [INF] End processing HTTP request after 955.1687ms - 200
2024-08-15 22:39:30.259 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/deposit - application/json 92
2024-08-15 22:39:30.281 +03:00 [INF] Executing endpoint 'Core.Features.User.Deposit.DepositController.Deposit (API)'
2024-08-15 22:39:30.294 +03:00 [INF] Route matched with {action = "Deposit", controller = "Deposit"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Deposit(Core.Features.Deposit.DepositRequest) on controller Core.Features.User.Deposit.DepositController (API).
2024-08-15 22:39:30.384 +03:00 [INF] Start processing HTTP request GET https://api.frankfurter.app/latest?amount=100&from=TRY&to=USD
2024-08-15 22:39:30.384 +03:00 [INF] Sending HTTP request GET https://api.frankfurter.app/latest?amount=100&from=TRY&to=USD
2024-08-15 22:39:30.486 +03:00 [INF] Received HTTP response headers after 1188.0024ms - 200
2024-08-15 22:39:30.486 +03:00 [INF] End processing HTTP request after 1188.628ms - 200
2024-08-15 22:39:30.499 +03:00 [INF] Received HTTP response headers after 114.6934ms - 200
2024-08-15 22:39:30.499 +03:00 [INF] End processing HTTP request after 115.1987ms - 200
2024-08-15 22:39:30.509 +03:00 [INF] Received HTTP response headers after 1210.7759ms - 200
2024-08-15 22:39:30.509 +03:00 [INF] End processing HTTP request after 1211.6645ms - 200
2024-08-15 22:39:30.606 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 22:39:30.708 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?' (DbType = Decimal), @p5='?', @p6='?' (DbType = DateTime), @p7='?', @p8='?' (DbType = DateTime), @p9='?', @p10='?' (DbType = Boolean), @p11='?', @p12='?' (DbType = DateTime), @p13='?' (DbType = Guid), @p14='?' (DbType = Int32), @p15='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2024-08-15 22:39:30.736 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.Deposit.DepositResponse'.
2024-08-15 22:39:30.743 +03:00 [INF] Executed action Core.Features.User.Deposit.DepositController.Deposit (API) in 446.332ms
2024-08-15 22:39:30.743 +03:00 [INF] Executed endpoint 'Core.Features.User.Deposit.DepositController.Deposit (API)'
2024-08-15 22:39:30.744 +03:00 [INF] HTTP POST /api/deposit responded 200 in 484.6665 ms
2024-08-15 22:39:30.746 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/deposit - 200 null application/json; charset=utf-8 486.2131ms
2024-08-15 22:39:34.591 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.591 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.640 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.640 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.676 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.702 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.703 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.730 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.730 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.957 +03:00 [INF] Received HTTP response headers after 301.9076ms - 200
2024-08-15 22:39:34.957 +03:00 [INF] End processing HTTP request after 302.4397ms - 200
2024-08-15 22:39:34.975 +03:00 [INF] Received HTTP response headers after 334.2893ms - 200
2024-08-15 22:39:34.975 +03:00 [INF] End processing HTTP request after 334.6136ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] Received HTTP response headers after 321.2042ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] End processing HTTP request after 321.6762ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] Received HTTP response headers after 321.7848ms - 200
2024-08-15 22:39:34.977 +03:00 [INF] End processing HTTP request after 322.1685ms - 200
2024-08-15 22:39:34.979 +03:00 [INF] Received HTTP response headers after 317.712ms - 200
2024-08-15 22:39:34.979 +03:00 [INF] End processing HTTP request after 318.118ms - 200
2024-08-15 22:39:34.980 +03:00 [INF] Received HTTP response headers after 318.7629ms - 200
2024-08-15 22:39:34.980 +03:00 [INF] End processing HTTP request after 319.0571ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] Received HTTP response headers after 331.8602ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] End processing HTTP request after 332.3406ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] Received HTTP response headers after 311.7813ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] End processing HTTP request after 312.0715ms - 200
2024-08-15 22:39:34.988 +03:00 [INF] Received HTTP response headers after 312.0535ms - 200
2024-08-15 22:39:34.988 +03:00 [INF] End processing HTTP request after 312.5964ms - 200
2024-08-15 22:39:34.990 +03:00 [INF] Received HTTP response headers after 335.7228ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] End processing HTTP request after 336.2722ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] Received HTTP response headers after 336.2944ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] End processing HTTP request after 336.6208ms - 200
2024-08-15 22:39:35.014 +03:00 [INF] Received HTTP response headers after 338.6097ms - 200
2024-08-15 22:39:35.014 +03:00 [INF] End processing HTTP request after 339.1184ms - 200
2024-08-15 22:39:35.039 +03:00 [INF] Received HTTP response headers after 336.3853ms - 200
2024-08-15 22:39:35.039 +03:00 [INF] End processing HTTP request after 336.6717ms - 200
2024-08-15 22:39:35.056 +03:00 [INF] Received HTTP response headers after 325.1507ms - 200
2024-08-15 22:39:35.056 +03:00 [INF] End processing HTTP request after 325.3939ms - 200
2024-08-15 22:39:35.258 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.258 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.479 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.479 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.514 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.514 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.568 +03:00 [INF] Received HTTP response headers after 309.9418ms - 200
2024-08-15 22:39:35.568 +03:00 [INF] End processing HTTP request after 310.1519ms - 200
2024-08-15 22:39:35.773 +03:00 [INF] Received HTTP response headers after 1181.9109ms - 200
2024-08-15 22:39:35.773 +03:00 [INF] End processing HTTP request after 1182.2722ms - 200
2024-08-15 22:39:35.789 +03:00 [INF] Received HTTP response headers after 309.3053ms - 200
2024-08-15 22:39:35.789 +03:00 [INF] End processing HTTP request after 309.6625ms - 200
2024-08-15 22:39:35.812 +03:00 [INF] Received HTTP response headers after 1151.2242ms - 200
2024-08-15 22:39:35.812 +03:00 [INF] End processing HTTP request after 1151.6575ms - 200
2024-08-15 22:39:35.819 +03:00 [INF] Received HTTP response headers after 1158.2659ms - 200
2024-08-15 22:39:35.819 +03:00 [INF] End processing HTTP request after 1158.6206ms - 200
2024-08-15 22:39:35.824 +03:00 [INF] Received HTTP response headers after 310.3345ms - 200
2024-08-15 22:39:35.824 +03:00 [INF] End processing HTTP request after 310.5973ms - 200
2024-08-15 22:39:35.854 +03:00 [INF] Received HTTP response headers after 1193.2791ms - 200
2024-08-15 22:39:35.855 +03:00 [INF] End processing HTTP request after 1193.7619ms - 200
2024-08-15 22:39:39.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.959 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.982 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.982 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.992 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.993 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.000 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.001 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.014 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.014 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.041 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.041 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.056 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.056 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.277 +03:00 [INF] Received HTTP response headers after 317.169ms - 200
2024-08-15 22:39:40.277 +03:00 [INF] End processing HTTP request after 317.4736ms - 200
2024-08-15 22:39:40.298 +03:00 [INF] Received HTTP response headers after 310.0662ms - 200
2024-08-15 22:39:40.298 +03:00 [INF] End processing HTTP request after 310.5125ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 311.4608ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 317.2349ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 311.5317ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 317.6083ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 311.9371ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 320.302ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 311.8494ms - 200
2024-08-15 22:39:40.300 +03:00 [INF] End processing HTTP request after 320.9374ms - 200
2024-08-15 22:39:40.303 +03:00 [INF] Received HTTP response headers after 323.774ms - 200
2024-08-15 22:39:40.303 +03:00 [INF] End processing HTTP request after 324.1198ms - 200
2024-08-15 22:39:40.304 +03:00 [INF] Received HTTP response headers after 327.9043ms - 200
2024-08-15 22:39:40.304 +03:00 [INF] End processing HTTP request after 328.4071ms - 200
2024-08-15 22:39:40.376 +03:00 [INF] Received HTTP response headers after 362.0464ms - 200
2024-08-15 22:39:40.376 +03:00 [INF] End processing HTTP request after 362.3595ms - 200
2024-08-15 22:39:40.397 +03:00 [INF] Received HTTP response headers after 355.3643ms - 200
2024-08-15 22:39:40.397 +03:00 [INF] End processing HTTP request after 355.6401ms - 200
2024-08-15 22:39:40.572 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.572 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.784 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.784 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.800 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.800 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.837 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.837 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.862 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.862 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.865 +03:00 [INF] Received HTTP response headers after 872.3471ms - 200
2024-08-15 22:39:40.865 +03:00 [INF] End processing HTTP request after 872.6336ms - 200
2024-08-15 22:39:40.885 +03:00 [INF] Received HTTP response headers after 312.946ms - 429
2024-08-15 22:39:40.885 +03:00 [INF] End processing HTTP request after 313.2479ms - 429
2024-08-15 22:39:40.899 +03:00 [WRN] Failed to process the job '871': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:40.940 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.101 +03:00 [INF] Received HTTP response headers after 317.7469ms - 429
2024-08-15 22:39:41.101 +03:00 [INF] End processing HTTP request after 317.9803ms - 429
2024-08-15 22:39:41.114 +03:00 [WRN] Failed to process the job '881': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.128 +03:00 [INF] Received HTTP response headers after 307.597ms - 429
2024-08-15 22:39:41.128 +03:00 [INF] End processing HTTP request after 307.8507ms - 429
2024-08-15 22:39:41.140 +03:00 [INF] Received HTTP response headers after 319.8744ms - 429
2024-08-15 22:39:41.140 +03:00 [INF] End processing HTTP request after 320.1858ms - 429
2024-08-15 22:39:41.140 +03:00 [WRN] Failed to process the job '935': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.142 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.149 +03:00 [WRN] Failed to process the job '903': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.157 +03:00 [INF] Received HTTP response headers after 320.2672ms - 429
2024-08-15 22:39:41.157 +03:00 [INF] End processing HTTP request after 320.5338ms - 429
2024-08-15 22:39:41.158 +03:00 [INF] Received HTTP response headers after 1182.3954ms - 429
2024-08-15 22:39:41.159 +03:00 [INF] End processing HTTP request after 1182.7321ms - 429
2024-08-15 22:39:41.164 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.165 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.167 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.171 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.172 +03:00 [INF] Received HTTP response headers after 310.4881ms - 429
2024-08-15 22:39:41.172 +03:00 [INF] End processing HTTP request after 310.8009ms - 429
2024-08-15 22:39:41.177 +03:00 [INF] Received HTTP response headers after 1121.1246ms - 429
2024-08-15 22:39:41.177 +03:00 [INF] End processing HTTP request after 1121.4251ms - 429
2024-08-15 22:39:41.181 +03:00 [WRN] Failed to process the job '867': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.183 +03:00 [INF] Received HTTP response headers after 1182.1192ms - 429
2024-08-15 22:39:41.183 +03:00 [INF] End processing HTTP request after 1182.4227ms - 429
2024-08-15 22:39:41.184 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:15.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.191 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.191 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.192 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.204 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.213 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.990 +03:00 [INF] Received HTTP response headers after 1189.2332ms - 429
2024-08-15 22:39:41.990 +03:00 [INF] End processing HTTP request after 1189.7579ms - 429
2024-08-15 22:39:41.998 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:42.022 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:45.281 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.282 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.302 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.368 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.368 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.404 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.404 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.593 +03:00 [INF] Received HTTP response headers after 311.0096ms - 429
2024-08-15 22:39:45.593 +03:00 [INF] End processing HTTP request after 311.4404ms - 429
2024-08-15 22:39:45.603 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:20.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.611 +03:00 [INF] Received HTTP response headers after 309.1545ms - 429
2024-08-15 22:39:45.611 +03:00 [INF] End processing HTTP request after 309.5403ms - 429
2024-08-15 22:39:45.613 +03:00 [INF] Received HTTP response headers after 311.2018ms - 429
2024-08-15 22:39:45.613 +03:00 [INF] End processing HTTP request after 311.4708ms - 429
2024-08-15 22:39:45.618 +03:00 [INF] Received HTTP response headers after 315.8361ms - 429
2024-08-15 22:39:45.618 +03:00 [INF] End processing HTTP request after 316.5161ms - 429
2024-08-15 22:39:45.619 +03:00 [INF] Received HTTP response headers after 317.1885ms - 429
2024-08-15 22:39:45.619 +03:00 [INF] End processing HTTP request after 317.5728ms - 429
2024-08-15 22:39:45.619 +03:00 [WRN] Failed to process the job '969': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.620 +03:00 [WRN] Failed to process the job '913': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:36.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.622 +03:00 [INF] Received HTTP response headers after 316.0359ms - 429
2024-08-15 22:39:45.622 +03:00 [INF] End processing HTTP request after 316.3864ms - 429
2024-08-15 22:39:45.626 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.628 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.632 +03:00 [WRN] Failed to process the job '929': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.638 +03:00 [INF] Received HTTP response headers after 336.1228ms - 429
2024-08-15 22:39:45.638 +03:00 [INF] End processing HTTP request after 336.4163ms - 429
2024-08-15 22:39:45.645 +03:00 [WRN] Failed to process the job '895': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.735 +03:00 [INF] Received HTTP response headers after 330.8277ms - 429
2024-08-15 22:39:45.735 +03:00 [INF] End processing HTTP request after 331.0705ms - 429
2024-08-15 22:39:45.745 +03:00 [WRN] Failed to process the job '971': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:50.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.869 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.869 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.959 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.146 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.146 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.167 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.167 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.174 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.174 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.194 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.194 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Received HTTP response headers after 325.9936ms - 429
2024-08-15 22:39:46.195 +03:00 [INF] End processing HTTP request after 326.1816ms - 429
2024-08-15 22:39:46.203 +03:00 [WRN] Failed to process the job '941': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.208 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.208 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.271 +03:00 [INF] Received HTTP response headers after 311.9515ms - 429
2024-08-15 22:39:46.272 +03:00 [INF] End processing HTTP request after 312.2785ms - 429
2024-08-15 22:39:46.280 +03:00 [WRN] Failed to process the job '865': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.460 +03:00 [INF] Received HTTP response headers after 314.2872ms - 429
2024-08-15 22:39:46.460 +03:00 [INF] End processing HTTP request after 314.5159ms - 429
2024-08-15 22:39:46.468 +03:00 [WRN] Failed to process the job '889': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.481 +03:00 [INF] Received HTTP response headers after 313.9754ms - 429
2024-08-15 22:39:46.481 +03:00 [INF] End processing HTTP request after 314.2477ms - 429
2024-08-15 22:39:46.484 +03:00 [INF] Received HTTP response headers after 1177.8996ms - 429
2024-08-15 22:39:46.484 +03:00 [INF] End processing HTTP request after 1178.2586ms - 429
2024-08-15 22:39:46.489 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.492 +03:00 [WRN] Failed to process the job '927': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.495 +03:00 [INF] Received HTTP response headers after 320.9049ms - 429
2024-08-15 22:39:46.495 +03:00 [INF] End processing HTTP request after 321.246ms - 429
2024-08-15 22:39:46.503 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.524 +03:00 [INF] Received HTTP response headers after 315.3871ms - 429
2024-08-15 22:39:46.524 +03:00 [INF] End processing HTTP request after 315.7263ms - 429
2024-08-15 22:39:46.532 +03:00 [WRN] Failed to process the job '945': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 1193.8795ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 1194.256ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 367.0477ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 367.4716ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 347.0154ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 347.2375ms - 429
2024-08-15 22:39:46.570 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.571 +03:00 [WRN] Failed to process the job '949': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.571 +03:00 [WRN] Failed to process the job '911': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:36.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:47.022 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:47.022 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:47.327 +03:00 [INF] Received HTTP response headers after 305.2239ms - 429
2024-08-15 22:39:47.327 +03:00 [INF] End processing HTTP request after 305.4265ms - 429
2024-08-15 22:39:47.337 +03:00 [WRN] Failed to process the job '953': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:47.339 +03:00 [INF] Received HTTP response headers after 1144.2781ms - 429
2024-08-15 22:39:47.339 +03:00 [INF] End processing HTTP request after 1144.6085ms - 429
2024-08-15 22:39:47.346 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:08.022 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.036 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:40:08.037 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:08.037 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:08.345 +03:00 [INF] Received HTTP response headers after 307.8647ms - 429
2024-08-15 22:40:08.345 +03:00 [INF] End processing HTTP request after 308.0693ms - 429
2024-08-15 22:40:08.355 +03:00 [WRN] Failed to process the job '976': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:08.381 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.390 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.399 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:09.064 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:13.029 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.029 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.398 +03:00 [INF] Received HTTP response headers after 368.2322ms - 429
2024-08-15 22:40:13.398 +03:00 [INF] End processing HTTP request after 368.5377ms - 429
2024-08-15 22:40:13.406 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.406 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.408 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:39.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:13.712 +03:00 [INF] Received HTTP response headers after 326.337ms - 429
2024-08-15 22:40:13.712 +03:00 [INF] End processing HTTP request after 326.6395ms - 429
2024-08-15 22:40:13.721 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:13.736 +03:00 [INF] Received HTTP response headers after 350.5247ms - 429
2024-08-15 22:40:13.736 +03:00 [INF] End processing HTTP request after 350.791ms - 429
2024-08-15 22:40:13.743 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:14.065 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:14.065 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:14.382 +03:00 [INF] Received HTTP response headers after 316.4788ms - 429
2024-08-15 22:40:14.382 +03:00 [INF] End processing HTTP request after 316.8598ms - 429
2024-08-15 22:40:14.392 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:14.585 +03:00 [INF] Received HTTP response headers after 1179.208ms - 429
2024-08-15 22:40:14.585 +03:00 [INF] End processing HTTP request after 1179.5673ms - 429
2024-08-15 22:40:14.596 +03:00 [WRN] Failed to process the job '905': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:01.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:23.434 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:23.443 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:23.453 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:28.425 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.425 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.441 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.441 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.460 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.460 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.741 +03:00 [INF] Received HTTP response headers after 315.6106ms - 200
2024-08-15 22:40:28.741 +03:00 [INF] End processing HTTP request after 315.9497ms - 200
2024-08-15 22:40:28.748 +03:00 [INF] Received HTTP response headers after 306.7091ms - 200
2024-08-15 22:40:28.748 +03:00 [INF] End processing HTTP request after 307.2774ms - 200
2024-08-15 22:40:28.768 +03:00 [INF] Received HTTP response headers after 307.4863ms - 200
2024-08-15 22:40:28.768 +03:00 [INF] End processing HTTP request after 307.7705ms - 200
2024-08-15 22:40:33.739 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.739 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.754 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.754 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.772 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.772 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:34.053 +03:00 [INF] Received HTTP response headers after 314.2796ms - 200
2024-08-15 22:40:34.053 +03:00 [INF] End processing HTTP request after 314.5422ms - 200
2024-08-15 22:40:34.075 +03:00 [INF] Received HTTP response headers after 320.6502ms - 200
2024-08-15 22:40:34.075 +03:00 [INF] End processing HTTP request after 321.0119ms - 200
2024-08-15 22:40:34.089 +03:00 [INF] Received HTTP response headers after 317.4129ms - 200
2024-08-15 22:40:34.089 +03:00 [INF] End processing HTTP request after 317.7052ms - 200
2024-08-15 22:40:38.482 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:40:38.482 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:38.482 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:38.490 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:38.501 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:39.064 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.064 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.080 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.080 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.096 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.096 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.392 +03:00 [INF] Received HTTP response headers after 312.539ms - 200
2024-08-15 22:40:39.392 +03:00 [INF] End processing HTTP request after 312.8867ms - 200
2024-08-15 22:40:39.444 +03:00 [INF] Received HTTP response headers after 347.5118ms - 200
2024-08-15 22:40:39.444 +03:00 [INF] End processing HTTP request after 347.7937ms - 200
2024-08-15 22:40:39.658 +03:00 [INF] Received HTTP response headers after 1175.9912ms - 200
2024-08-15 22:40:39.658 +03:00 [INF] End processing HTTP request after 1176.1641ms - 200
2024-08-15 22:40:39.659 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.659 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.971 +03:00 [INF] Received HTTP response headers after 312.5183ms - 200
2024-08-15 22:40:39.971 +03:00 [INF] End processing HTTP request after 312.7854ms - 200
2024-08-15 22:40:39.972 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.972 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.212 +03:00 [INF] Received HTTP response headers after 1148.7049ms - 200
2024-08-15 22:40:40.213 +03:00 [INF] End processing HTTP request after 1149.0563ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] Received HTTP response headers after 304.8134ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] End processing HTTP request after 305.1586ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.277 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.624 +03:00 [INF] Received HTTP response headers after 347.3577ms - 200
2024-08-15 22:40:40.624 +03:00 [INF] End processing HTTP request after 347.5483ms - 200
2024-08-15 22:40:40.625 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.625 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:41.786 +03:00 [INF] Received HTTP response headers after 1161.356ms - 200
2024-08-15 22:40:41.786 +03:00 [INF] End processing HTTP request after 1161.508ms - 200
2024-08-15 22:40:41.786 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:41.786 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.096 +03:00 [INF] Received HTTP response headers after 310.2233ms - 200
2024-08-15 22:40:42.096 +03:00 [INF] End processing HTTP request after 310.3672ms - 200
2024-08-15 22:40:42.097 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.097 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.422 +03:00 [INF] Received HTTP response headers after 325.5133ms - 200
2024-08-15 22:40:42.422 +03:00 [INF] End processing HTTP request after 325.6552ms - 200
2024-08-15 22:40:43.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.484 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.506 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.506 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.806 +03:00 [INF] Received HTTP response headers after 321.241ms - 200
2024-08-15 22:40:43.806 +03:00 [INF] End processing HTTP request after 321.4975ms - 200
2024-08-15 22:40:43.849 +03:00 [INF] Received HTTP response headers after 342.7172ms - 200
2024-08-15 22:40:43.849 +03:00 [INF] End processing HTTP request after 343.0594ms - 200
2024-08-15 22:40:44.394 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.394 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.451 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.451 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.705 +03:00 [INF] Received HTTP response headers after 311.0685ms - 200
2024-08-15 22:40:44.705 +03:00 [INF] End processing HTTP request after 311.3481ms - 200
2024-08-15 22:40:44.787 +03:00 [INF] Received HTTP response headers after 336.104ms - 200
2024-08-15 22:40:44.788 +03:00 [INF] End processing HTTP request after 336.3696ms - 200
2024-08-15 22:40:45.224 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:45.224 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:45.541 +03:00 [INF] Received HTTP response headers after 317.0425ms - 200
2024-08-15 22:40:45.541 +03:00 [INF] End processing HTTP request after 317.3525ms - 200
2024-08-15 22:40:48.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.852 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.852 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.160 +03:00 [INF] Received HTTP response headers after 339.3975ms - 200
2024-08-15 22:40:49.160 +03:00 [INF] End processing HTTP request after 339.6848ms - 200
2024-08-15 22:40:49.698 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.698 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.787 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.787 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.970 +03:00 [INF] Received HTTP response headers after 1117.2861ms - 200
2024-08-15 22:40:49.970 +03:00 [INF] End processing HTTP request after 1117.5656ms - 200
2024-08-15 22:40:50.006 +03:00 [INF] Received HTTP response headers after 307.662ms - 200
2024-08-15 22:40:50.006 +03:00 [INF] End processing HTTP request after 307.8818ms - 200
2024-08-15 22:40:50.110 +03:00 [INF] Received HTTP response headers after 323.5263ms - 200
2024-08-15 22:40:50.111 +03:00 [INF] End processing HTTP request after 323.7256ms - 200
2024-08-15 22:40:50.546 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:50.546 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:50.918 +03:00 [INF] Received HTTP response headers after 372.1546ms - 200
2024-08-15 22:40:50.918 +03:00 [INF] End processing HTTP request after 372.4308ms - 200
2024-08-15 22:40:53.321 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 caught stopping signal...
2024-08-15 22:40:53.321 +03:00 [INF] Application is shutting down...
2024-08-15 22:40:53.321 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da caught stopping signal...
2024-08-15 22:40:53.323 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da All dispatchers stopped
2024-08-15 22:40:53.329 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da successfully reported itself as stopped in 3,5395 ms
2024-08-15 22:40:53.329 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da has been stopped in total 7,6165 ms
2024-08-15 22:40:53.336 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 22:40:53.337 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 22:40:53.340 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 22:40:53.848 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 caught stopped signal...
2024-08-15 22:40:54.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.152 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.970 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.970 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.008 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.008 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.108 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.108 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.277 +03:00 [INF] Received HTTP response headers after 306.3421ms - 200
2024-08-15 22:40:55.277 +03:00 [INF] End processing HTTP request after 306.6024ms - 200
2024-08-15 22:40:55.311 +03:00 [INF] Received HTTP response headers after 303.3759ms - 200
2024-08-15 22:40:55.311 +03:00 [INF] End processing HTTP request after 303.6149ms - 200
2024-08-15 22:40:55.323 +03:00 [INF] Received HTTP response headers after 1170.9963ms - 200
2024-08-15 22:40:55.323 +03:00 [INF] End processing HTTP request after 1171.5237ms - 200
2024-08-15 22:40:55.414 +03:00 [INF] Received HTTP response headers after 305.846ms - 200
2024-08-15 22:40:55.414 +03:00 [INF] End processing HTTP request after 306.0867ms - 200
2024-08-15 22:40:55.920 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.920 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:57.081 +03:00 [INF] Received HTTP response headers after 1160.8407ms - 200
2024-08-15 22:40:57.081 +03:00 [INF] End processing HTTP request after 1161.0764ms - 200
2024-08-15 22:41:00.276 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.276 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.315 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.316 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.337 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.337 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.427 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.427 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.579 +03:00 [INF] Received HTTP response headers after 302.8761ms - 200
2024-08-15 22:41:00.579 +03:00 [INF] End processing HTTP request after 303.1483ms - 200
2024-08-15 22:41:00.657 +03:00 [INF] Received HTTP response headers after 341.2105ms - 200
2024-08-15 22:41:00.657 +03:00 [INF] End processing HTTP request after 341.5587ms - 200
2024-08-15 22:41:00.658 +03:00 [INF] Received HTTP response headers after 321.0584ms - 200
2024-08-15 22:41:00.658 +03:00 [INF] End processing HTTP request after 321.3737ms - 200
2024-08-15 22:41:00.756 +03:00 [INF] Received HTTP response headers after 329.5128ms - 200
2024-08-15 22:41:00.756 +03:00 [INF] End processing HTTP request after 329.7548ms - 200
2024-08-15 22:41:02.067 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:02.067 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:02.380 +03:00 [INF] Received HTTP response headers after 313.1165ms - 200
2024-08-15 22:41:02.380 +03:00 [INF] End processing HTTP request after 313.357ms - 200
2024-08-15 22:41:05.588 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.588 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.666 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.667 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.666 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.667 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.758 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.758 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.920 +03:00 [INF] Received HTTP response headers after 332.7332ms - 200
2024-08-15 22:41:05.921 +03:00 [INF] End processing HTTP request after 332.9578ms - 200
2024-08-15 22:41:05.997 +03:00 [INF] Received HTTP response headers after 330.6213ms - 200
2024-08-15 22:41:05.997 +03:00 [INF] End processing HTTP request after 330.8889ms - 200
2024-08-15 22:41:06.066 +03:00 [INF] Received HTTP response headers after 307.0924ms - 200
2024-08-15 22:41:06.066 +03:00 [INF] End processing HTTP request after 307.3691ms - 200
2024-08-15 22:41:06.816 +03:00 [INF] Received HTTP response headers after 1149.0117ms - 200
2024-08-15 22:41:06.816 +03:00 [INF] End processing HTTP request after 1149.3419ms - 200
2024-08-15 22:41:07.381 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:07.381 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:07.703 +03:00 [INF] Received HTTP response headers after 322.184ms - 200
2024-08-15 22:41:07.703 +03:00 [INF] End processing HTTP request after 322.4823ms - 200
2024-08-15 22:41:08.343 +03:00 [WRN] Server desktop-ihebt3k:13660:8451fcc8 caught shutdown signal...
2024-08-15 22:41:08.344 +03:00 [WRN] Server desktop-ihebt3k:13660:8451fcc8 stopped non-gracefully due to Worker. Outstanding work on those dispatchers could be aborted, and there can be delays in background processing. This server instance will be incorrectly shown as active for a while. To avoid non-graceful shutdowns, investigate what prevents from stopping gracefully and add CancellationToken support for those methods.
2024-08-15 22:41:08.347 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 successfully reported itself as stopped in 2,6252 ms
2024-08-15 22:41:08.347 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 has been stopped in total 15025,6733 ms
2024-08-15 22:41:12.058 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:41:12.146 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:41:12.160 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:41:12.160 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:41:12.161 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:41:12.161 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:41:12.161 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:41:12.161 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:41:12.294 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a successfully announced in 112,2485 ms
2024-08-15 22:41:12.299 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:41:12.562 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a all the dispatchers started
2024-08-15 22:41:12.684 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:41:12.720 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:41:12.720 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:41:12.721 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:41:12.721 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:41:12.721 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:41:12.722 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:41:12.722 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:41:12.729 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:41:12.731 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:41:12.824 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:41:12.824 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:41:12.825 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:41:12.832 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:41:12.832 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:41:12.832 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:41:12.832 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:41:12.836 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:41:12.836 +03:00 [INF] Hosting environment: Development
2024-08-15 22:41:12.836 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:41:12.838 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:41:12.839 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 successfully announced in 2,8218 ms
2024-08-15 22:41:12.839 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:41:13.006 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 all the dispatchers started
2024-08-15 22:41:13.110 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:41:13.258 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 120.0303 ms
2024-08-15 22:41:13.331 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 157.4919ms
2024-08-15 22:41:13.340 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:41:13.347 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.1324 ms
2024-08-15 22:41:13.347 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 7.5646ms
2024-08-15 22:41:13.600 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:41:13.760 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 157.4501 ms
2024-08-15 22:41:13.760 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 159.7942ms
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:41:14.719 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:14.720 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.164 +03:00 [INF] Received HTTP response headers after 442.6379ms - 200
2024-08-15 22:41:15.165 +03:00 [INF] End processing HTTP request after 449.0346ms - 200
2024-08-15 22:41:15.176 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.176 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.583 +03:00 [INF] Received HTTP response headers after 407.1617ms - 200
2024-08-15 22:41:15.583 +03:00 [INF] End processing HTTP request after 407.5867ms - 200
2024-08-15 22:41:15.584 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.584 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.919 +03:00 [INF] Received HTTP response headers after 334.3875ms - 200
2024-08-15 22:41:15.919 +03:00 [INF] End processing HTTP request after 335.5461ms - 200
2024-08-15 22:41:15.919 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.919 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.246 +03:00 [INF] Received HTTP response headers after 326.0736ms - 200
2024-08-15 22:41:16.246 +03:00 [INF] End processing HTTP request after 326.769ms - 200
2024-08-15 22:41:16.247 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.247 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.576 +03:00 [INF] Received HTTP response headers after 329.2537ms - 200
2024-08-15 22:41:16.577 +03:00 [INF] End processing HTTP request after 329.9731ms - 200
2024-08-15 22:41:16.577 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.577 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:17.759 +03:00 [INF] Received HTTP response headers after 1181.6943ms - 200
2024-08-15 22:41:17.759 +03:00 [INF] End processing HTTP request after 1182.2158ms - 200
2024-08-15 22:41:17.760 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:17.760 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:18.068 +03:00 [INF] Received HTTP response headers after 307.6138ms - 200
2024-08-15 22:41:18.068 +03:00 [INF] End processing HTTP request after 308.1715ms - 200
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:20.029 +03:00 [INF] Received HTTP response headers after 311.1095ms - 200
2024-08-15 22:41:20.029 +03:00 [INF] End processing HTTP request after 311.9689ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] Received HTTP response headers after 364.5496ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] End processing HTTP request after 365.3394ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] Received HTTP response headers after 364.5581ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] End processing HTTP request after 365.4299ms - 200
2024-08-15 22:41:20.093 +03:00 [INF] Received HTTP response headers after 373.959ms - 200
2024-08-15 22:41:20.093 +03:00 [INF] End processing HTTP request after 375.4069ms - 200
2024-08-15 22:41:20.098 +03:00 [INF] Received HTTP response headers after 378.8843ms - 200
2024-08-15 22:41:20.099 +03:00 [INF] End processing HTTP request after 381.1046ms - 200
2024-08-15 22:41:20.108 +03:00 [INF] Received HTTP response headers after 389.2824ms - 200
2024-08-15 22:41:20.108 +03:00 [INF] End processing HTTP request after 391.1352ms - 200
2024-08-15 22:41:20.968 +03:00 [INF] Received HTTP response headers after 1248.8407ms - 200
2024-08-15 22:41:20.968 +03:00 [INF] End processing HTTP request after 1250.6786ms - 200
2024-08-15 22:41:25.030 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.030 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.366 +03:00 [INF] Received HTTP response headers after 336.0723ms - 200
2024-08-15 22:41:25.366 +03:00 [INF] End processing HTTP request after 336.4023ms - 200
2024-08-15 22:41:25.392 +03:00 [INF] Received HTTP response headers after 313.3542ms - 200
2024-08-15 22:41:25.392 +03:00 [INF] End processing HTTP request after 313.7696ms - 200
2024-08-15 22:41:25.407 +03:00 [INF] Received HTTP response headers after 328.5755ms - 200
2024-08-15 22:41:25.408 +03:00 [INF] End processing HTTP request after 329.0608ms - 200
2024-08-15 22:41:25.425 +03:00 [INF] Received HTTP response headers after 315.5201ms - 200
2024-08-15 22:41:25.425 +03:00 [INF] End processing HTTP request after 316.122ms - 200
2024-08-15 22:41:25.428 +03:00 [INF] Received HTTP response headers after 318.0018ms - 200
2024-08-15 22:41:25.428 +03:00 [INF] End processing HTTP request after 318.6098ms - 200
2024-08-15 22:41:25.973 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.973 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:26.248 +03:00 [INF] Received HTTP response headers after 1138.372ms - 429
2024-08-15 22:41:26.248 +03:00 [INF] End processing HTTP request after 1139.1055ms - 429
2024-08-15 22:41:26.293 +03:00 [INF] Received HTTP response headers after 320.4188ms - 429
2024-08-15 22:41:26.294 +03:00 [INF] End processing HTTP request after 320.85ms - 429
2024-08-15 22:41:26.386 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:41:26.386 +03:00 [WRN] Failed to process the job '943': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:41:27.871 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:29.362 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/orders/place - application/json 136
2024-08-15 22:41:29.391 +03:00 [INF] Executing endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 22:41:29.406 +03:00 [INF] Route matched with {action = "PlaceOrder", controller = "Order"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PlaceOrder(Core.Features.GiveOrder.GiveOrderRequest) on controller API.Controllers.OrderController (API).
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.880 +03:00 [INF] Received HTTP response headers after 22652.8192ms - 200
2024-08-15 22:42:00.881 +03:00 [INF] End processing HTTP request after 22654.6181ms - 200
2024-08-15 22:42:00.882 +03:00 [INF] Received HTTP response headers after 22654.5391ms - 200
2024-08-15 22:42:00.882 +03:00 [INF] End processing HTTP request after 22655.365ms - 200
2024-08-15 22:42:00.883 +03:00 [INF] Received HTTP response headers after 22653.775ms - 200
2024-08-15 22:42:00.883 +03:00 [INF] End processing HTTP request after 22656.8779ms - 200
2024-08-15 22:42:00.894 +03:00 [INF] Received HTTP response headers after 22666.1576ms - 200
2024-08-15 22:42:00.894 +03:00 [INF] Received HTTP response headers after 22665.3454ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.1636ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.1844ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] Received HTTP response headers after 22666.4355ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.6988ms - 200
2024-08-15 22:42:00.925 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.943 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.944 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.962 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.977 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:42:00.980 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.981 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.985 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:01.000 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:01.090 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 22:42:01.229 +03:00 [INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32), @p10='?', @p11='?' (DbType = Decimal), @p12='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderType", "Quantity", "StockSymbol", "TargetPrice", "UserId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12);
2024-08-15 22:42:01.266 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderProcesses" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)
RETURNING "Status";
2024-08-15 22:42:01.275 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.276 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.310 +03:00 [INF] Received HTTP response headers after 328.2795ms - 200
2024-08-15 22:42:01.310 +03:00 [INF] End processing HTTP request after 329.3637ms - 200
2024-08-15 22:42:01.310 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.310 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.587 +03:00 [INF] Received HTTP response headers after 311.7227ms - 200
2024-08-15 22:42:01.587 +03:00 [INF] End processing HTTP request after 312.2952ms - 200
2024-08-15 22:42:01.623 +03:00 [INF] Received HTTP response headers after 313.0134ms - 200
2024-08-15 22:42:01.623 +03:00 [INF] End processing HTTP request after 313.4678ms - 200
2024-08-15 22:42:01.624 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.624 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.252 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.252 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.254 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.254 +03:00 [INF] Received HTTP response headers after 8629.8284ms - 200
2024-08-15 22:42:10.254 +03:00 [INF] End processing HTTP request after 8630.1939ms - 200
2024-08-15 22:42:10.254 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.255 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.277 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.278 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.464 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.485 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.485 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.486 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.486 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.489 +03:00 [INF] Received HTTP response headers after 1234.1028ms - 200
2024-08-15 22:42:11.489 +03:00 [INF] End processing HTTP request after 1234.3426ms - 200
2024-08-15 22:42:11.489 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.489 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.692 +03:00 [INF] Received HTTP response headers after 5439.341ms - 200
2024-08-15 22:42:15.693 +03:00 [INF] End processing HTTP request after 5440.3261ms - 200
2024-08-15 22:42:15.694 +03:00 [INF] Received HTTP response headers after 5439.4058ms - 200
2024-08-15 22:42:15.694 +03:00 [INF] End processing HTTP request after 5441.5386ms - 200
2024-08-15 22:42:15.731 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.732 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 4287.4604ms - 200
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 4287.4403ms - 200
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 5496.4626ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 4289.2375ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 4289.6111ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] Received HTTP response headers after 5473.1047ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 5499.8849ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 5475.0325ms - 200
2024-08-15 22:42:15.774 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.GiveOrder.OrderResponse'.
2024-08-15 22:49:51.432 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:49:51.515 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:49:51.529 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:49:51.529 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:49:51.529 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:49:51.529 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:49:51.529 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:49:51.529 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:49:51.603 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d successfully announced in 62,4503 ms
2024-08-15 22:49:51.605 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:49:51.609 +03:00 [INF] 5 servers were removed due to timeout
2024-08-15 22:49:51.663 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d all the dispatchers started
2024-08-15 22:49:51.755 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:49:51.784 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:49:51.784 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:49:51.786 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:49:51.786 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:49:51.786 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:49:51.786 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:49:51.787 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:49:51.794 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:49:51.796 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:49:51.868 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:49:51.868 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:49:51.868 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:49:51.868 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:49:51.869 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:49:51.869 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:49:51.869 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:49:51.869 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:49:51.869 +03:00 [INF] Hosting environment: Development
2024-08-15 22:49:51.869 +03:00 [INF] Content root path: c:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:49:51.872 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:49:51.872 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 successfully announced in 3,1158 ms
2024-08-15 22:49:51.872 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:49:51.898 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 all the dispatchers started
2024-08-15 22:49:52.185 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:49:52.364 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 56.1323 ms
2024-08-15 22:49:52.365 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 180.8891ms
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.535 +03:00 [INF] Executed DbCommand (154ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.541 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:53.542 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:53.554 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:49:53.554 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 3.9226ms
2024-08-15 22:49:53.559 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.560 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.560 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.2640 ms
2024-08-15 22:49:53.561 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 6.2447ms
2024-08-15 22:49:53.561 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.563 +03:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.566 +03:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.791 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:49:53.892 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 99.1716 ms
2024-08-15 22:49:53.892 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 101.4462ms
2024-08-15 22:49:54.353 +03:00 [INF] Received HTTP response headers after 809.4525ms - 200
2024-08-15 22:49:54.354 +03:00 [INF] End processing HTTP request after 816.2878ms - 200
2024-08-15 22:49:54.396 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.568 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.568 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.570 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.571 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:59.254 +03:00 [INF] Received HTTP response headers after 713.7027ms - 200
2024-08-15 22:49:59.255 +03:00 [INF] End processing HTTP request after 714.4856ms - 200
2024-08-15 22:49:59.274 +03:00 [INF] Received HTTP response headers after 732.8437ms - 429
2024-08-15 22:49:59.274 +03:00 [INF] End processing HTTP request after 733.7706ms - 429
2024-08-15 22:49:59.267 +03:00 [WRN] Failed to process the job '945': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.285 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.Exception: Failed to fetch stock price.
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 42
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.302 +03:00 [INF] Received HTTP response headers after 760.5542ms - 200
2024-08-15 22:49:59.302 +03:00 [INF] End processing HTTP request after 761.9248ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 738.4305ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 764.5913ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 764.3848ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 739.3651ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 765.7437ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 765.7125ms - 200
2024-08-15 22:49:59.310 +03:00 [INF] Received HTTP response headers after 769.5314ms - 200
2024-08-15 22:49:59.310 +03:00 [INF] End processing HTTP request after 770.3515ms - 200
2024-08-15 22:49:59.315 +03:00 [INF] Received HTTP response headers after 773.9522ms - 200
2024-08-15 22:49:59.315 +03:00 [INF] End processing HTTP request after 775.1473ms - 200
2024-08-15 22:49:59.318 +03:00 [INF] Received HTTP response headers after 750.4043ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] End processing HTTP request after 752.1399ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] Received HTTP response headers after 778.1792ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] End processing HTTP request after 779.3732ms - 200
2024-08-15 22:49:59.319 +03:00 [WRN] Failed to process the job '871': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '889': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '905': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.327 +03:00 [WRN] Failed to process the job '865': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.327 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.331 +03:00 [WRN] Failed to process the job '953': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.331 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.388 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.389 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.389 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.402 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.415 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.432 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.503 +03:00 [INF] Received HTTP response headers after 935.1777ms - 200
2024-08-15 22:49:59.503 +03:00 [INF] End processing HTTP request after 936.2319ms - 200
2024-08-15 22:49:59.519 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.558 +03:00 [INF] Received HTTP response headers after 1016.4667ms - 200
2024-08-15 22:49:59.558 +03:00 [INF] End processing HTTP request after 1017.7012ms - 200
2024-08-15 22:49:59.562 +03:00 [INF] Received HTTP response headers after 1020.6405ms - 200
2024-08-15 22:49:59.562 +03:00 [INF] End processing HTTP request after 1021.8436ms - 200
2024-08-15 22:49:59.570 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.570 +03:00 [INF] Received HTTP response headers after 1029.5028ms - 200
2024-08-15 22:49:59.576 +03:00 [INF] End processing HTTP request after 1035.8903ms - 200
2024-08-15 22:49:59.581 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.589 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.625 +03:00 [INF] Received HTTP response headers after 1057.0266ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] Received HTTP response headers after 1057.2766ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] End processing HTTP request after 1058.3415ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] End processing HTTP request after 1058.3839ms - 200
2024-08-15 22:49:59.627 +03:00 [INF] Received HTTP response headers after 1059.7912ms - 200
2024-08-15 22:49:59.628 +03:00 [INF] End processing HTTP request after 1061.0185ms - 200
2024-08-15 22:49:59.633 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.635 +03:00 [WRN] Failed to process the job '867': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.636 +03:00 [INF] Received HTTP response headers after 1068.5062ms - 200
2024-08-15 22:49:59.636 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.655 +03:00 [INF] End processing HTTP request after 1088.5051ms - 200
2024-08-15 22:49:59.677 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.816 +03:00 [INF] Received HTTP response headers after 1275.4003ms - 200
2024-08-15 22:49:59.817 +03:00 [INF] End processing HTTP request after 1276.4276ms - 200
2024-08-15 22:49:59.828 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:00.050 +03:00 [INF] Received HTTP response headers after 1479.1426ms - 200
2024-08-15 22:50:00.050 +03:00 [INF] End processing HTTP request after 1479.556ms - 200
2024-08-15 22:50:00.085 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:00.539 +03:00 [INF] Received HTTP response headers after 1971.9966ms - 200
2024-08-15 22:50:00.539 +03:00 [INF] End processing HTTP request after 1972.6356ms - 200
2024-08-15 22:50:00.552 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:03.195 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 caught stopping signal...
2024-08-15 22:50:03.195 +03:00 [INF] Application is shutting down...
2024-08-15 22:50:03.196 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d caught stopping signal...
2024-08-15 22:50:03.198 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d All dispatchers stopped
2024-08-15 22:50:03.204 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d successfully reported itself as stopped in 4,0654 ms
2024-08-15 22:50:03.204 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d has been stopped in total 8,1295 ms
2024-08-15 22:50:03.210 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 22:50:03.210 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 22:50:03.214 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 22:50:03.722 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 caught stopped signal...
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:05.114 +03:00 [INF] Received HTTP response headers after 658.3234ms - 200
2024-08-15 22:50:05.114 +03:00 [INF] End processing HTTP request after 658.5338ms - 200
2024-08-15 22:50:05.119 +03:00 [INF] Received HTTP response headers after 664.0739ms - 200
2024-08-15 22:50:05.119 +03:00 [INF] End processing HTTP request after 664.3278ms - 200
2024-08-15 22:50:05.122 +03:00 [INF] Received HTTP response headers after 666.2962ms - 200
2024-08-15 22:50:05.122 +03:00 [INF] End processing HTTP request after 666.6484ms - 200
2024-08-15 22:50:05.127 +03:00 [WRN] Failed to process the job '949': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.129 +03:00 [WRN] Failed to process the job '895': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.129 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.142 +03:00 [INF] Received HTTP response headers after 686.3484ms - 200
2024-08-15 22:50:05.142 +03:00 [INF] End processing HTTP request after 686.7195ms - 200
2024-08-15 22:50:05.144 +03:00 [INF] Received HTTP response headers after 688.8155ms - 200
2024-08-15 22:50:05.145 +03:00 [INF] End processing HTTP request after 689.359ms - 200
2024-08-15 22:50:05.148 +03:00 [INF] Received HTTP response headers after 692.1384ms - 200
2024-08-15 22:50:05.148 +03:00 [INF] End processing HTTP request after 692.464ms - 200
2024-08-15 22:50:05.153 +03:00 [WRN] Failed to process the job '903': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.154 +03:00 [WRN] Failed to process the job '911': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.157 +03:00 [WRN] Failed to process the job '943': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.165 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 All dispatchers stopped
2024-08-15 22:50:05.166 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 successfully reported itself as stopped in 1,2699 ms
2024-08-15 22:50:05.166 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 has been stopped in total 1971,0386 ms
2024-08-15 22:54:55.308 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:54:55.406 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:54:55.418 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:54:55.419 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:54:55.419 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:54:55.419 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:54:55.419 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:54:55.419 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:54:55.492 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da successfully announced in 62,6489 ms
2024-08-15 22:54:55.494 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:54:55.564 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da all the dispatchers started
2024-08-15 22:54:55.670 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:54:55.702 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:54:55.702 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:54:55.703 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:54:55.703 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:54:55.704 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:54:55.704 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:54:55.704 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:54:55.712 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:54:55.714 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:54:55.791 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:54:55.791 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:54:55.792 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:54:55.792 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:54:55.792 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:54:55.792 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:54:55.792 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:54:55.792 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:54:55.792 +03:00 [INF] Hosting environment: Development
2024-08-15 22:54:55.792 +03:00 [INF] Content root path: c:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:54:55.796 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:54:55.796 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 successfully announced in 3,5672 ms
2024-08-15 22:54:55.796 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:54:55.812 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 all the dispatchers started
2024-08-15 22:54:56.007 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:54:56.097 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 70.2970 ms
2024-08-15 22:54:56.100 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 92.4266ms
2024-08-15 22:54:56.114 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:54:56.114 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:54:56.117 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 2.4211ms
2024-08-15 22:54:56.117 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.0138 ms
2024-08-15 22:54:56.118 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 3.4843ms
2024-08-15 22:54:56.353 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:54:56.475 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 120.6816 ms
2024-08-15 22:54:56.476 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 122.6043ms
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:58.087 +03:00 [INF] Received HTTP response headers after 787.4047ms - 200
2024-08-15 22:54:58.088 +03:00 [INF] End processing HTTP request after 794.2981ms - 200
2024-08-15 22:54:58.123 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:54:58.964 +03:00 [INF] Received HTTP response headers after 1665.6432ms - 200
2024-08-15 22:54:58.964 +03:00 [INF] End processing HTTP request after 1670.3381ms - 200
2024-08-15 22:54:58.981 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.295 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.930 +03:00 [INF] Received HTTP response headers after 635.1639ms - 200
2024-08-15 22:55:02.930 +03:00 [INF] End processing HTTP request after 635.7318ms - 200
2024-08-15 22:55:02.941 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:02.977 +03:00 [INF] Received HTTP response headers after 682.7315ms - 200
2024-08-15 22:55:02.978 +03:00 [INF] End processing HTTP request after 683.4045ms - 200
2024-08-15 22:55:02.991 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:03.809 +03:00 [INF] Received HTTP response headers after 1514.8348ms - 200
2024-08-15 22:55:03.810 +03:00 [INF] End processing HTTP request after 1515.7ms - 200
2024-08-15 22:55:03.822 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:04.633 +03:00 [INF] Received HTTP response headers after 2338.1241ms - 200
2024-08-15 22:55:04.634 +03:00 [INF] End processing HTTP request after 2339.5081ms - 200
2024-08-15 22:55:04.646 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:10.864 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:10.864 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:10.865 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:10.865 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:11.788 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285//metrics - null null
2024-08-15 22:55:11.806 +03:00 [INF] No cached response available for this request.
2024-08-15 22:55:11.808 +03:00 [INF] The response could not be cached for this request.
2024-08-15 22:55:11.808 +03:00 [INF] HTTP GET //metrics responded 404 in 19.7235 ms
2024-08-15 22:55:11.808 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285//metrics - 404 0 null 20.7038ms
2024-08-15 22:55:11.809 +03:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:5285//metrics, Response status code: 404
2024-08-15 22:55:12.393 +03:00 [INF] Received HTTP response headers after 1527.8029ms - 200
2024-08-15 22:55:12.394 +03:00 [INF] End processing HTTP request after 1528.1943ms - 200
2024-08-15 22:55:12.412 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:24.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:15.872 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:15.872 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:16.519 +03:00 [INF] Received HTTP response headers after 646.7807ms - 200
2024-08-15 22:55:16.519 +03:00 [INF] End processing HTTP request after 647.2204ms - 200
2024-08-15 22:55:16.530 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:16.586 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/metrics - null null
2024-08-15 22:55:16.669 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/metrics - 200 null text/plain; version=0.0.4; charset=utf-8 82.4273ms
2024-08-15 22:55:25.824 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:30.831 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:30.831 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:31.513 +03:00 [INF] Received HTTP response headers after 681.432ms - 200
2024-08-15 22:55:31.513 +03:00 [INF] End processing HTTP request after 681.9433ms - 200
2024-08-15 22:55:31.530 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:40.852 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:40.854 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.854 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.863 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:40.863 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.864 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.872 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:41.541 +03:00 [INF] Received HTTP response headers after 687.4249ms - 200
2024-08-15 22:55:41.542 +03:00 [INF] End processing HTTP request after 687.7542ms - 200
2024-08-15 22:55:41.550 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:54.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:41.554 +03:00 [INF] Received HTTP response headers after 690.3251ms - 200
2024-08-15 22:55:41.556 +03:00 [INF] End processing HTTP request after 692.7482ms - 200
2024-08-15 22:55:41.566 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:45.879 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:45.880 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:46.570 +03:00 [INF] Received HTTP response headers after 689.9246ms - 200
2024-08-15 22:55:46.570 +03:00 [INF] End processing HTTP request after 690.426ms - 200
2024-08-15 22:55:46.578 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:55.903 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:55.911 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:00.905 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.905 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.922 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.922 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:01.589 +03:00 [INF] Received HTTP response headers after 667.4242ms - 200
2024-08-15 22:56:01.589 +03:00 [INF] End processing HTTP request after 667.7419ms - 200
2024-08-15 22:56:01.606 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:38.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:01.608 +03:00 [INF] Received HTTP response headers after 702.3776ms - 200
2024-08-15 22:56:01.611 +03:00 [INF] End processing HTTP request after 705.6722ms - 200
2024-08-15 22:56:01.621 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:10.913 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:10.931 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:10.932 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.932 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.942 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:10.943 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.943 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:11.566 +03:00 [INF] Received HTTP response headers after 633.7749ms - 200
2024-08-15 22:56:11.566 +03:00 [INF] End processing HTTP request after 634.1262ms - 200
2024-08-15 22:56:11.582 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:11.585 +03:00 [INF] Received HTTP response headers after 642.5968ms - 200
2024-08-15 22:56:11.588 +03:00 [INF] End processing HTTP request after 645.6211ms - 200
2024-08-15 22:56:11.604 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:15.920 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:15.920 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:17.398 +03:00 [INF] Received HTTP response headers after 1478.7047ms - 200
2024-08-15 22:56:17.399 +03:00 [INF] End processing HTTP request after 1479.0828ms - 200
2024-08-15 22:56:17.409 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:23.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:25.972 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:25.983 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:30.974 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.974 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.990 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.990 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:31.626 +03:00 [INF] Received HTTP response headers after 651.6075ms - 200
2024-08-15 22:56:31.626 +03:00 [INF] End processing HTTP request after 651.8397ms - 200
2024-08-15 22:56:31.634 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:49.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:32.490 +03:00 [INF] Received HTTP response headers after 1499.9857ms - 200
2024-08-15 22:56:32.491 +03:00 [INF] End processing HTTP request after 1500.7007ms - 200
2024-08-15 22:56:32.499 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:41.018 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:41.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.018 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.029 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:41.030 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.030 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.041 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:41.054 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:41.680 +03:00 [INF] Received HTTP response headers after 649.8242ms - 200
2024-08-15 22:56:41.680 +03:00 [INF] End processing HTTP request after 650.214ms - 200
2024-08-15 22:56:41.689 +03:00 [INF] Received HTTP response headers after 670.7557ms - 200
2024-08-15 22:56:41.689 +03:00 [INF] End processing HTTP request after 670.9924ms - 200
2024-08-15 22:56:41.698 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:41.699 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:46.052 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.052 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.069 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.069 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.707 +03:00 [INF] Received HTTP response headers after 654.0883ms - 200
2024-08-15 22:56:46.707 +03:00 [INF] End processing HTTP request after 654.4783ms - 200
2024-08-15 22:56:46.716 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:49.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:47.637 +03:00 [INF] Received HTTP response headers after 1568.0836ms - 200
2024-08-15 22:56:47.637 +03:00 [INF] End processing HTTP request after 1568.6249ms - 200
2024-08-15 22:56:47.648 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:56.074 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:56.083 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:56.092 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:56.093 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:56.093 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:56.763 +03:00 [INF] Received HTTP response headers after 669.943ms - 200
2024-08-15 22:56:56.763 +03:00 [INF] End processing HTTP request after 670.1378ms - 200
2024-08-15 22:56:56.778 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:01.076 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.077 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.090 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.090 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.740 +03:00 [INF] Received HTTP response headers after 650.4606ms - 200
2024-08-15 22:57:01.741 +03:00 [INF] End processing HTTP request after 650.7359ms - 200
2024-08-15 22:57:01.752 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:02.608 +03:00 [INF] Received HTTP response headers after 1531.8666ms - 200
2024-08-15 22:57:02.609 +03:00 [INF] End processing HTTP request after 1532.1924ms - 200
2024-08-15 22:57:02.619 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:11.003 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:11.017 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:11.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:11.018 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:11.653 +03:00 [INF] Received HTTP response headers after 634.8425ms - 200
2024-08-15 22:57:11.653 +03:00 [INF] End processing HTTP request after 635.0449ms - 200
2024-08-15 22:57:11.661 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:24.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:16.007 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:16.007 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:16.630 +03:00 [INF] Received HTTP response headers after 623.5457ms - 200
2024-08-15 22:57:16.631 +03:00 [INF] End processing HTTP request after 623.9906ms - 200
2024-08-15 22:57:16.642 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:23.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:26.130 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:26.141 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:26.150 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:26.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:26.151 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:26.834 +03:00 [INF] Received HTTP response headers after 683.0351ms - 200
2024-08-15 22:57:26.834 +03:00 [INF] End processing HTTP request after 683.2891ms - 200
2024-08-15 22:57:26.843 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:31.135 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.135 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.151 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.761 +03:00 [INF] Received HTTP response headers after 626.1241ms - 200
2024-08-15 22:57:31.761 +03:00 [INF] End processing HTTP request after 626.4676ms - 200
2024-08-15 22:57:31.771 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:31.826 +03:00 [INF] Received HTTP response headers after 674.9226ms - 200
2024-08-15 22:57:31.827 +03:00 [INF] End processing HTTP request after 675.2182ms - 200
2024-08-15 22:57:31.852 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:41.180 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:41.181 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:41.181 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:41.192 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:41.838 +03:00 [INF] Received HTTP response headers after 656.8032ms - 200
2024-08-15 22:57:41.838 +03:00 [INF] End processing HTTP request after 657.0054ms - 200
2024-08-15 22:57:41.849 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:46.192 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:46.193 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:46.816 +03:00 [INF] Received HTTP response headers after 622.8382ms - 200
2024-08-15 22:57:46.816 +03:00 [INF] End processing HTTP request after 623.348ms - 200
2024-08-15 22:57:46.831 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:56.215 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:56.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.224 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:56.234 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:56.234 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.234 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.935 +03:00 [INF] Received HTTP response headers after 700.4321ms - 200
2024-08-15 22:57:56.935 +03:00 [INF] End processing HTTP request after 700.5886ms - 200
2024-08-15 22:57:56.938 +03:00 [INF] Received HTTP response headers after 723.1215ms - 200
2024-08-15 22:57:56.938 +03:00 [INF] End processing HTTP request after 723.3675ms - 200
2024-08-15 22:57:56.944 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:56.956 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:01.229 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:01.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:01.892 +03:00 [INF] Received HTTP response headers after 662.7918ms - 200
2024-08-15 22:58:01.892 +03:00 [INF] End processing HTTP request after 663.0347ms - 200
2024-08-15 22:58:01.908 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:11.090 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:11.106 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:11.106 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.106 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.253 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:11.254 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.254 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.740 +03:00 [INF] Received HTTP response headers after 633.8036ms - 200
2024-08-15 22:58:11.740 +03:00 [INF] End processing HTTP request after 633.9905ms - 200
2024-08-15 22:58:11.750 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:11.918 +03:00 [INF] Received HTTP response headers after 664.5127ms - 200
2024-08-15 22:58:11.918 +03:00 [INF] End processing HTTP request after 664.7963ms - 200
2024-08-15 22:58:11.934 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:16.102 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:16.103 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:16.798 +03:00 [INF] Received HTTP response headers after 695.6528ms - 200
2024-08-15 22:58:16.798 +03:00 [INF] End processing HTTP request after 695.9867ms - 200
2024-08-15 22:58:16.808 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:26.292 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:26.292 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:26.292 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:26.965 +03:00 [INF] Received HTTP response headers after 672.2909ms - 200
2024-08-15 22:58:26.965 +03:00 [INF] End processing HTTP request after 672.5666ms - 200
2024-08-15 22:58:26.982 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:41.329 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:41.339 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:46.332 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.332 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.347 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.347 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.987 +03:00 [INF] Received HTTP response headers after 654.9008ms - 200
2024-08-15 22:58:46.987 +03:00 [INF] End processing HTTP request after 655.3183ms - 200
2024-08-15 22:58:46.998 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:46.999 +03:00 [INF] Received HTTP response headers after 652.1108ms - 200
2024-08-15 22:58:47.005 +03:00 [INF] End processing HTTP request after 657.5938ms - 200
2024-08-15 22:58:47.021 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:56.366 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:56.376 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:56.377 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:56.377 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:57.079 +03:00 [INF] Received HTTP response headers after 701.8732ms - 200
2024-08-15 22:58:57.079 +03:00 [INF] End processing HTTP request after 702.0736ms - 200
2024-08-15 22:58:57.100 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:30.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:01.366 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:01.366 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:02.019 +03:00 [INF] Received HTTP response headers after 652.1271ms - 200
2024-08-15 22:59:02.019 +03:00 [INF] End processing HTTP request after 652.5059ms - 200
2024-08-15 22:59:02.032 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:11.177 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:11.192 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:11.192 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.193 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.414 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:11.414 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.414 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.841 +03:00 [INF] Received HTTP response headers after 648.2579ms - 200
2024-08-15 22:59:11.841 +03:00 [INF] End processing HTTP request after 648.4342ms - 200
2024-08-15 22:59:11.849 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:18.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:12.039 +03:00 [INF] Received HTTP response headers after 624.6129ms - 200
2024-08-15 22:59:12.039 +03:00 [INF] End processing HTTP request after 624.8063ms - 200
2024-08-15 22:59:12.048 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:16.178 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:16.178 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:17.681 +03:00 [INF] Received HTTP response headers after 1502.8735ms - 200
2024-08-15 22:59:17.681 +03:00 [INF] End processing HTTP request after 1503.3507ms - 200
2024-08-15 22:59:17.697 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:19.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:26.441 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:26.441 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:26.441 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.093 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:27.094 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.094 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.733 +03:00 [INF] Received HTTP response headers after 639.6898ms - 200
2024-08-15 22:59:27.734 +03:00 [INF] End processing HTTP request after 639.8841ms - 200
2024-08-15 22:59:27.748 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:27.930 +03:00 [INF] Received HTTP response headers after 1488.7051ms - 200
2024-08-15 22:59:27.930 +03:00 [INF] End processing HTTP request after 1488.9337ms - 200
2024-08-15 22:59:27.939 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:41.465 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:41.466 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:41.466 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:41.475 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.486 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.497 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.506 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.517 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:42.134 +03:00 [INF] Received HTTP response headers after 668.213ms - 200
2024-08-15 22:59:42.134 +03:00 [INF] End processing HTTP request after 668.4568ms - 200
2024-08-15 22:59:42.147 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:46.479 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.479 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.494 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.495 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.501 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.501 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.508 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.508 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.530 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.530 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:47.151 +03:00 [INF] Received HTTP response headers after 671.7514ms - 200
2024-08-15 22:59:47.151 +03:00 [INF] End processing HTTP request after 672.0963ms - 200
2024-08-15 22:59:47.163 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.241 +03:00 [INF] Received HTTP response headers after 739.7039ms - 200
2024-08-15 22:59:47.241 +03:00 [INF] End processing HTTP request after 740.0326ms - 200
2024-08-15 22:59:47.249 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.279 +03:00 [INF] Received HTTP response headers after 784.3722ms - 200
2024-08-15 22:59:47.279 +03:00 [INF] End processing HTTP request after 784.8741ms - 200
2024-08-15 22:59:47.288 +03:00 [INF] Received HTTP response headers after 779.5755ms - 200
2024-08-15 22:59:47.288 +03:00 [INF] End processing HTTP request after 779.9565ms - 200
2024-08-15 22:59:47.292 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:25.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.301 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:48.131 +03:00 [INF] Received HTTP response headers after 1600.7774ms - 200
2024-08-15 22:59:48.131 +03:00 [INF] End processing HTTP request after 1601.0613ms - 200
2024-08-15 22:59:48.144 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:56.546 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:56.557 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:56.558 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:56.558 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:57.215 +03:00 [INF] Received HTTP response headers after 657.6894ms - 200
2024-08-15 22:59:57.215 +03:00 [INF] End processing HTTP request after 657.9209ms - 200
2024-08-15 22:59:57.226 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:01.553 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:01.553 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:02.259 +03:00 [INF] Received HTTP response headers after 706.0318ms - 200
2024-08-15 23:00:02.259 +03:00 [INF] End processing HTTP request after 706.2805ms - 200
2024-08-15 23:00:02.270 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:11.256 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:11.271 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:11.272 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:11.272 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:11.977 +03:00 [INF] Received HTTP response headers after 705.2184ms - 200
2024-08-15 23:00:11.977 +03:00 [INF] End processing HTTP request after 705.4101ms - 200
2024-08-15 23:00:11.994 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:16.260 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:16.260 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:16.905 +03:00 [INF] Received HTTP response headers after 644.9993ms - 200
2024-08-15 23:00:16.905 +03:00 [INF] End processing HTTP request after 645.2476ms - 200
2024-08-15 23:00:16.915 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:26.597 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:31.599 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:31.599 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:32.261 +03:00 [INF] Received HTTP response headers after 662.5792ms - 200
2024-08-15 23:00:32.261 +03:00 [INF] End processing HTTP request after 662.946ms - 200
2024-08-15 23:00:32.272 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:41.627 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:41.627 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.627 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.637 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:41.638 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.638 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:42.286 +03:00 [INF] Received HTTP response headers after 658.7416ms - 200
2024-08-15 23:00:42.286 +03:00 [INF] End processing HTTP request after 659.0469ms - 200
2024-08-15 23:00:42.288 +03:00 [INF] Received HTTP response headers after 650.3865ms - 200
2024-08-15 23:00:42.288 +03:00 [INF] End processing HTTP request after 650.6082ms - 200
2024-08-15 23:00:42.297 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:42.298 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:56.664 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:56.675 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:56.683 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:01.664 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.664 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:02.373 +03:00 [INF] Received HTTP response headers after 708.3483ms - 200
2024-08-15 23:01:02.373 +03:00 [INF] End processing HTTP request after 708.8854ms - 200
2024-08-15 23:01:02.392 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:02.421 +03:00 [INF] Received HTTP response headers after 735.1389ms - 200
2024-08-15 23:01:02.421 +03:00 [INF] End processing HTTP request after 735.4801ms - 200
2024-08-15 23:01:02.425 +03:00 [INF] Received HTTP response headers after 738.8806ms - 200
2024-08-15 23:01:02.425 +03:00 [INF] End processing HTTP request after 739.2245ms - 200
2024-08-15 23:01:02.435 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:02.440 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:11.364 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:11.387 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.388 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.388 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.717 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.717 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.731 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.732 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.733 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.745 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.745 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.745 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:12.030 +03:00 [INF] Received HTTP response headers after 642.2934ms - 200
2024-08-15 23:01:12.030 +03:00 [INF] End processing HTTP request after 642.5538ms - 200
2024-08-15 23:01:12.042 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.182 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:12.354 +03:00 [INF] Received HTTP response headers after 636.8025ms - 200
2024-08-15 23:01:12.354 +03:00 [INF] End processing HTTP request after 637.1644ms - 200
2024-08-15 23:01:12.363 +03:00 [INF] Received HTTP response headers after 630.4009ms - 200
2024-08-15 23:01:12.363 +03:00 [INF] End processing HTTP request after 630.8036ms - 200
2024-08-15 23:01:12.369 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.377 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.471 +03:00 [INF] Received HTTP response headers after 725.1155ms - 200
2024-08-15 23:01:12.471 +03:00 [INF] End processing HTTP request after 725.3224ms - 200
2024-08-15 23:01:12.482 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:16.371 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:16.371 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.087 +03:00 [INF] Received HTTP response headers after 715.5736ms - 200
2024-08-15 23:01:17.087 +03:00 [INF] End processing HTTP request after 715.8406ms - 200
2024-08-15 23:01:17.097 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:15.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:17.188 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.188 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.809 +03:00 [INF] Received HTTP response headers after 620.4385ms - 200
2024-08-15 23:01:17.809 +03:00 [INF] End processing HTTP request after 620.698ms - 200
2024-08-15 23:01:17.819 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:26.789 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:26.805 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:26.805 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:26.805 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:27.205 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:27.451 +03:00 [INF] Received HTTP response headers after 645.6551ms - 200
2024-08-15 23:01:27.451 +03:00 [INF] End processing HTTP request after 645.8238ms - 200
2024-08-15 23:01:27.462 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:31.792 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:31.792 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.218 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.218 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.418 +03:00 [INF] Received HTTP response headers after 626.439ms - 200
2024-08-15 23:01:32.418 +03:00 [INF] End processing HTTP request after 626.753ms - 200
2024-08-15 23:01:32.430 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:32.908 +03:00 [INF] Received HTTP response headers after 689.3497ms - 200
2024-08-15 23:01:32.908 +03:00 [INF] End processing HTTP request after 689.6505ms - 200
2024-08-15 23:01:32.919 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:29.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:41.829 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:41.829 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.829 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.836 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:41.848 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:41.848 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.848 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:42.478 +03:00 [INF] Received HTTP response headers after 649.169ms - 200
2024-08-15 23:01:42.478 +03:00 [INF] End processing HTTP request after 649.4454ms - 200
2024-08-15 23:01:42.490 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:42.493 +03:00 [INF] Received HTTP response headers after 644.2651ms - 200
2024-08-15 23:01:42.495 +03:00 [INF] End processing HTTP request after 647.074ms - 200
2024-08-15 23:01:42.503 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:38.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:46.839 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:46.839 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:48.397 +03:00 [INF] Received HTTP response headers after 1558.5299ms - 200
2024-08-15 23:01:48.397 +03:00 [INF] End processing HTTP request after 1558.8042ms - 200
2024-08-15 23:01:48.406 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:56.882 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:56.889 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:56.890 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:56.890 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:57.506 +03:00 [INF] Received HTTP response headers after 616.1031ms - 200
2024-08-15 23:01:57.506 +03:00 [INF] End processing HTTP request after 616.3741ms - 200
2024-08-15 23:01:57.531 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:01.885 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:01.885 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:02.603 +03:00 [INF] Received HTTP response headers after 717.8584ms - 200
2024-08-15 23:02:02.603 +03:00 [INF] End processing HTTP request after 718.105ms - 200
2024-08-15 23:02:02.614 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:11.466 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:11.484 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:11.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:11.484 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:11.918 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:12.961 +03:00 [INF] Received HTTP response headers after 1476.3469ms - 200
2024-08-15 23:02:12.961 +03:00 [INF] End processing HTTP request after 1476.5973ms - 200
2024-08-15 23:02:12.972 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:16.470 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.470 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.919 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.919 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:17.564 +03:00 [INF] Received HTTP response headers after 644.823ms - 200
2024-08-15 23:02:17.564 +03:00 [INF] End processing HTTP request after 645.1923ms - 200
2024-08-15 23:02:17.575 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:33.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:17.960 +03:00 [INF] Received HTTP response headers after 1489.746ms - 200
2024-08-15 23:02:17.960 +03:00 [INF] End processing HTTP request after 1489.9745ms - 200
2024-08-15 23:02:17.969 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:27.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:26.944 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.953 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:26.954 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.954 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.965 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.976 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.987 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:26.987 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.987 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:27.277 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:27.635 +03:00 [INF] Received HTTP response headers after 680.9227ms - 200
2024-08-15 23:02:27.635 +03:00 [INF] End processing HTTP request after 681.0849ms - 200
2024-08-15 23:02:27.642 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:28.467 +03:00 [INF] Received HTTP response headers after 1480.3004ms - 200
2024-08-15 23:02:28.467 +03:00 [INF] End processing HTTP request after 1480.5189ms - 200
2024-08-15 23:02:28.476 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:31.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.960 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.975 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.975 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.991 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.992 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.280 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.280 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.722 +03:00 [INF] Received HTTP response headers after 730.1544ms - 200
2024-08-15 23:02:32.722 +03:00 [INF] End processing HTTP request after 730.4193ms - 200
2024-08-15 23:02:32.727 +03:00 [INF] Received HTTP response headers after 751.5979ms - 200
2024-08-15 23:02:32.727 +03:00 [INF] End processing HTTP request after 751.886ms - 200
2024-08-15 23:02:32.733 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:32.733 +03:00 [INF] Received HTTP response headers after 773.841ms - 200
2024-08-15 23:02:32.738 +03:00 [INF] End processing HTTP request after 778.5285ms - 200
2024-08-15 23:02:32.740 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:32.745 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:33.006 +03:00 [INF] Received HTTP response headers after 725.6262ms - 200
2024-08-15 23:02:33.006 +03:00 [INF] End processing HTTP request after 725.9038ms - 200
2024-08-15 23:02:33.015 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:42.020 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.026 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.035 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.044 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:47.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.019 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.032 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.032 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.714 +03:00 [INF] Received HTTP response headers after 681.9412ms - 200
2024-08-15 23:02:47.714 +03:00 [INF] End processing HTTP request after 682.2249ms - 200
2024-08-15 23:02:47.724 +03:00 [INF] Received HTTP response headers after 679.4931ms - 200
2024-08-15 23:02:47.724 +03:00 [INF] End processing HTTP request after 679.8744ms - 200
2024-08-15 23:02:47.728 +03:00 [WRN] Failed to process the job '895': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:53.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:47.731 +03:00 [INF] Received HTTP response headers after 687.1755ms - 200
2024-08-15 23:02:47.734 +03:00 [INF] End processing HTTP request after 690.0925ms - 200
2024-08-15 23:02:47.735 +03:00 [WRN] Failed to process the job '889': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:11.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:47.743 +03:00 [WRN] Failed to process the job '871': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:53.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:48.493 +03:00 [INF] Received HTTP response headers after 1474.2577ms - 200
2024-08-15 23:02:48.493 +03:00 [INF] End processing HTTP request after 1474.6224ms - 200
2024-08-15 23:02:48.509 +03:00 [WRN] Failed to process the job '949': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:57.074 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:57.084 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:57.093 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:57.104 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:57.112 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:57.112 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:57.113 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:57.122 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:58.842 +03:00 [INF] Received HTTP response headers after 1729.8066ms - 200
2024-08-15 23:02:58.842 +03:00 [INF] End processing HTTP request after 1729.9936ms - 200
2024-08-15 23:02:58.850 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:18.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:02.087 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.087 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.087 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.087 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.102 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.102 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.108 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.108 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.130 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.130 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:02.762 +03:00 [INF] Received HTTP response headers after 674.8727ms - 200
2024-08-15 23:03:02.762 +03:00 [INF] End processing HTTP request after 675.2192ms - 200
2024-08-15 23:03:02.774 +03:00 [WRN] Failed to process the job '865': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:50.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:02.782 +03:00 [INF] Received HTTP response headers after 673.5217ms - 200
2024-08-15 23:03:02.782 +03:00 [INF] End processing HTTP request after 673.798ms - 200
2024-08-15 23:03:02.787 +03:00 [INF] Received HTTP response headers after 700.0563ms - 200
2024-08-15 23:03:02.788 +03:00 [INF] End processing HTTP request after 700.7427ms - 200
2024-08-15 23:03:02.793 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:02.798 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:20.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:03.053 +03:00 [INF] Received HTTP response headers after 951.0459ms - 200
2024-08-15 23:03:03.053 +03:00 [INF] End processing HTTP request after 951.3381ms - 200
2024-08-15 23:03:03.065 +03:00 [WRN] Failed to process the job '867': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:03.680 +03:00 [INF] Received HTTP response headers after 1550.4503ms - 200
2024-08-15 23:03:03.680 +03:00 [INF] End processing HTTP request after 1550.7348ms - 200
2024-08-15 23:03:03.693 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:11.565 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:11.582 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:11.582 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:11.582 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:12.150 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:12.159 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:12.159 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:12.159 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:12.173 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:12.185 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:12.314 +03:00 [INF] Received HTTP response headers after 731.9341ms - 200
2024-08-15 23:03:12.314 +03:00 [INF] End processing HTTP request after 732.2017ms - 200
2024-08-15 23:03:12.327 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:12.849 +03:00 [INF] Received HTTP response headers after 689.929ms - 200
2024-08-15 23:03:12.849 +03:00 [INF] End processing HTTP request after 690.1745ms - 200
2024-08-15 23:03:12.863 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:16.576 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:16.576 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.152 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.153 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.177 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.177 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.188 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.188 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:17.245 +03:00 [INF] Received HTTP response headers after 669.0405ms - 200
2024-08-15 23:03:17.245 +03:00 [INF] End processing HTTP request after 669.2977ms - 200
2024-08-15 23:03:17.259 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:38.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:17.790 +03:00 [INF] Received HTTP response headers after 637.7377ms - 200
2024-08-15 23:03:17.790 +03:00 [INF] End processing HTTP request after 638.058ms - 200
2024-08-15 23:03:17.798 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:19.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:17.809 +03:00 [INF] Received HTTP response headers after 632.0287ms - 200
2024-08-15 23:03:17.809 +03:00 [INF] End processing HTTP request after 632.3152ms - 200
2024-08-15 23:03:17.817 +03:00 [WRN] Failed to process the job '953': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:50.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:18.641 +03:00 [INF] Received HTTP response headers after 1452.6823ms - 200
2024-08-15 23:03:18.641 +03:00 [INF] End processing HTTP request after 1453.0087ms - 200
2024-08-15 23:03:18.657 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 7 of 10 will be performed in 00:21:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:27.209 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:27.219 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:27.219 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:27.219 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:27.228 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:27.238 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:27.248 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:27.259 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:29.686 +03:00 [INF] Received HTTP response headers after 2467.0434ms - 200
2024-08-15 23:03:29.686 +03:00 [INF] End processing HTTP request after 2467.2537ms - 200
2024-08-15 23:03:29.696 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:49.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:32.216 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.216 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.234 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.235 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.249 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.249 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.249 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.249 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.264 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.264 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:32.991 +03:00 [INF] Received HTTP response headers after 742.1524ms - 200
2024-08-15 23:03:32.991 +03:00 [INF] End processing HTTP request after 742.4341ms - 200
2024-08-15 23:03:33.002 +03:00 [WRN] Failed to process the job '943': an exception occurred. Retry attempt 7 of 10 will be performed in 00:25:07.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:33.014 +03:00 [INF] Received HTTP response headers after 779.6796ms - 200
2024-08-15 23:03:33.014 +03:00 [INF] End processing HTTP request after 779.9614ms - 200
2024-08-15 23:03:33.028 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:33.034 +03:00 [INF] Received HTTP response headers after 784.755ms - 200
2024-08-15 23:03:33.034 +03:00 [INF] End processing HTTP request after 785.0851ms - 200
2024-08-15 23:03:33.043 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:33.056 +03:00 [INF] Received HTTP response headers after 791.999ms - 200
2024-08-15 23:03:33.056 +03:00 [INF] End processing HTTP request after 792.3283ms - 200
2024-08-15 23:03:33.071 +03:00 [WRN] Failed to process the job '945': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:33.789 +03:00 [INF] Received HTTP response headers after 1573.1932ms - 200
2024-08-15 23:03:33.789 +03:00 [INF] End processing HTTP request after 1573.4795ms - 200
2024-08-15 23:03:33.799 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:42.283 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:42.283 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:42.283 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:42.294 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:42.306 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:42.307 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:42.307 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:42.318 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:42.327 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:42.336 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:43.045 +03:00 [INF] Received HTTP response headers after 738.2747ms - 200
2024-08-15 23:03:43.045 +03:00 [INF] End processing HTTP request after 738.4771ms - 200
2024-08-15 23:03:43.056 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:43.081 +03:00 [INF] Received HTTP response headers after 797.3996ms - 200
2024-08-15 23:03:43.081 +03:00 [INF] End processing HTTP request after 797.7231ms - 200
2024-08-15 23:03:43.092 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:47.296 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.296 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.318 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.318 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.327 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.328 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.337 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.338 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:47.992 +03:00 [INF] Received HTTP response headers after 674.0373ms - 200
2024-08-15 23:03:47.992 +03:00 [INF] End processing HTTP request after 674.2811ms - 200
2024-08-15 23:03:47.998 +03:00 [INF] Received HTTP response headers after 670.0716ms - 200
2024-08-15 23:03:47.998 +03:00 [INF] End processing HTTP request after 670.3967ms - 200
2024-08-15 23:03:48.002 +03:00 [WRN] Failed to process the job '903': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:53.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:48.006 +03:00 [WRN] Failed to process the job '905': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:48.010 +03:00 [INF] Received HTTP response headers after 714.6675ms - 200
2024-08-15 23:03:48.012 +03:00 [INF] Received HTTP response headers after 673.9839ms - 200
2024-08-15 23:03:48.020 +03:00 [INF] End processing HTTP request after 682.3055ms - 200
2024-08-15 23:03:48.020 +03:00 [INF] End processing HTTP request after 724.0201ms - 200
2024-08-15 23:03:48.029 +03:00 [WRN] Failed to process the job '911': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:15.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:48.030 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:20.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:03:57.361 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:03:58.353 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:03:58.354 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:58.354 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:03:59.014 +03:00 [INF] Received HTTP response headers after 659.9834ms - 200
2024-08-15 23:03:59.014 +03:00 [INF] End processing HTTP request after 660.1376ms - 200
2024-08-15 23:03:59.027 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:02.367 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:02.367 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:03.847 +03:00 [INF] Received HTTP response headers after 1479.2818ms - 200
2024-08-15 23:04:03.847 +03:00 [INF] End processing HTTP request after 1479.5236ms - 200
2024-08-15 23:04:03.856 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:11.649 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:04:11.664 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:04:11.664 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:11.665 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:12.294 +03:00 [INF] Received HTTP response headers after 629.5474ms - 200
2024-08-15 23:04:12.294 +03:00 [INF] End processing HTTP request after 629.6864ms - 200
2024-08-15 23:04:12.301 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:12.392 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:04:12.392 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:12.392 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:13.080 +03:00 [INF] Received HTTP response headers after 687.9361ms - 200
2024-08-15 23:04:13.080 +03:00 [INF] End processing HTTP request after 688.0842ms - 200
2024-08-15 23:04:13.091 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:16.646 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:16.647 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:18.992 +03:00 [INF] Received HTTP response headers after 2345.2797ms - 200
2024-08-15 23:04:18.992 +03:00 [INF] End processing HTTP request after 2345.4954ms - 200
2024-08-15 23:04:19.001 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:42.431 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:04:42.440 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:04:42.440 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:42.440 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:42.449 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:04:42.449 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:42.449 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:43.103 +03:00 [INF] Received HTTP response headers after 653.5772ms - 200
2024-08-15 23:04:43.103 +03:00 [INF] End processing HTTP request after 653.773ms - 200
2024-08-15 23:04:43.112 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:43.969 +03:00 [INF] Received HTTP response headers after 1529.3651ms - 200
2024-08-15 23:04:43.970 +03:00 [INF] End processing HTTP request after 1529.5987ms - 200
2024-08-15 23:04:43.980 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:30.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:47.452 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:47.452 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:48.966 +03:00 [INF] Received HTTP response headers after 1513.9248ms - 200
2024-08-15 23:04:48.966 +03:00 [INF] End processing HTTP request after 1514.3478ms - 200
2024-08-15 23:04:48.974 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:04:57.478 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:04:57.487 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:04:57.497 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:04:57.497 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:57.497 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:04:57.507 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:04:58.187 +03:00 [INF] Received HTTP response headers after 689.7416ms - 200
2024-08-15 23:04:58.187 +03:00 [INF] End processing HTTP request after 689.9344ms - 200
2024-08-15 23:04:58.198 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:02.491 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:02.491 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:02.491 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:02.492 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:02.511 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:02.511 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:03.128 +03:00 [INF] Received HTTP response headers after 636.6746ms - 200
2024-08-15 23:05:03.128 +03:00 [INF] End processing HTTP request after 637.0273ms - 200
2024-08-15 23:05:03.138 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:03.168 +03:00 [INF] Received HTTP response headers after 676.8745ms - 200
2024-08-15 23:05:03.169 +03:00 [INF] End processing HTTP request after 677.2063ms - 200
2024-08-15 23:05:03.179 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:04.039 +03:00 [INF] Received HTTP response headers after 1527.2406ms - 200
2024-08-15 23:05:04.039 +03:00 [INF] End processing HTTP request after 1527.5638ms - 200
2024-08-15 23:05:04.047 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:11.734 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:11.748 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:05:11.748 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:11.748 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:12.443 +03:00 [INF] Received HTTP response headers after 694.42ms - 200
2024-08-15 23:05:12.443 +03:00 [INF] End processing HTTP request after 694.5847ms - 200
2024-08-15 23:05:12.453 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:19.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:13.438 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:05:13.438 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:13.439 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:14.095 +03:00 [INF] Received HTTP response headers after 656.1735ms - 200
2024-08-15 23:05:14.095 +03:00 [INF] End processing HTTP request after 656.3926ms - 200
2024-08-15 23:05:14.109 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:16.737 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:16.737 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:17.402 +03:00 [INF] Received HTTP response headers after 665.2679ms - 200
2024-08-15 23:05:17.403 +03:00 [INF] End processing HTTP request after 665.5934ms - 200
2024-08-15 23:05:17.412 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:27.554 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:27.565 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:05:27.565 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:27.565 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:28.240 +03:00 [INF] Received HTTP response headers after 675.2003ms - 200
2024-08-15 23:05:28.240 +03:00 [INF] End processing HTTP request after 675.3773ms - 200
2024-08-15 23:05:28.256 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:32.555 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:32.555 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:33.250 +03:00 [INF] Received HTTP response headers after 694.6924ms - 200
2024-08-15 23:05:33.250 +03:00 [INF] End processing HTTP request after 695.0666ms - 200
2024-08-15 23:05:33.264 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:42.600 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:05:42.600 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:42.600 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:42.611 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:42.625 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:42.644 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:05:42.645 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:42.645 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:43.214 +03:00 [INF] Received HTTP response headers after 613.9258ms - 200
2024-08-15 23:05:43.214 +03:00 [INF] End processing HTTP request after 614.3063ms - 200
2024-08-15 23:05:43.226 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:43.264 +03:00 [INF] Received HTTP response headers after 618.7145ms - 200
2024-08-15 23:05:43.264 +03:00 [INF] End processing HTTP request after 619.0096ms - 200
2024-08-15 23:05:43.281 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:47.621 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:47.621 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:47.628 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:47.628 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:05:48.275 +03:00 [INF] Received HTTP response headers after 654.3459ms - 200
2024-08-15 23:05:48.276 +03:00 [INF] End processing HTTP request after 654.6284ms - 200
2024-08-15 23:05:48.287 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:49.152 +03:00 [INF] Received HTTP response headers after 1524.2588ms - 200
2024-08-15 23:05:49.152 +03:00 [INF] End processing HTTP request after 1524.575ms - 200
2024-08-15 23:05:49.161 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:05:57.663 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:57.672 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:57.683 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:05:58.495 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:02.670 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:02.670 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:02.685 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:02.685 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:02.685 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:02.685 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:03.312 +03:00 [INF] Received HTTP response headers after 626.8888ms - 200
2024-08-15 23:06:03.312 +03:00 [INF] End processing HTTP request after 627.1813ms - 200
2024-08-15 23:06:03.325 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:03.496 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:03.496 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:03.907 +03:00 [INF] Received HTTP response headers after 1222.6121ms - 200
2024-08-15 23:06:03.908 +03:00 [INF] End processing HTTP request after 1222.9167ms - 200
2024-08-15 23:06:03.918 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:04.184 +03:00 [INF] Received HTTP response headers after 1514.2715ms - 200
2024-08-15 23:06:04.184 +03:00 [INF] End processing HTTP request after 1514.6038ms - 200
2024-08-15 23:06:04.195 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:05.016 +03:00 [INF] Received HTTP response headers after 1519.708ms - 200
2024-08-15 23:06:05.016 +03:00 [INF] End processing HTTP request after 1519.9589ms - 200
2024-08-15 23:06:05.025 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:11.826 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:11.843 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:11.843 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:11.843 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:12.559 +03:00 [INF] Received HTTP response headers after 715.6424ms - 200
2024-08-15 23:06:12.559 +03:00 [INF] End processing HTTP request after 715.8195ms - 200
2024-08-15 23:06:12.569 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:23.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:12.711 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:12.712 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:12.712 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:12.725 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:12.725 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:12.725 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:13.345 +03:00 [INF] Received HTTP response headers after 632.6008ms - 200
2024-08-15 23:06:13.345 +03:00 [INF] End processing HTTP request after 632.8065ms - 200
2024-08-15 23:06:13.361 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:14.235 +03:00 [INF] Received HTTP response headers after 1509.9016ms - 200
2024-08-15 23:06:14.235 +03:00 [INF] End processing HTTP request after 1510.2979ms - 200
2024-08-15 23:06:14.244 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:16.838 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:16.838 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:18.322 +03:00 [INF] Received HTTP response headers after 1484.4774ms - 200
2024-08-15 23:06:18.322 +03:00 [INF] End processing HTTP request after 1484.8077ms - 200
2024-08-15 23:06:18.339 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:27.758 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:27.758 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:27.758 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:28.440 +03:00 [INF] Received HTTP response headers after 681.5834ms - 200
2024-08-15 23:06:28.440 +03:00 [INF] End processing HTTP request after 681.95ms - 200
2024-08-15 23:06:28.448 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:34.132 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:34.219 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:39.135 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:39.135 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:39.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:39.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:39.871 +03:00 [INF] Received HTTP response headers after 655.1569ms - 200
2024-08-15 23:06:39.871 +03:00 [INF] End processing HTTP request after 655.5394ms - 200
2024-08-15 23:06:39.879 +03:00 [WRN] Failed to process the job '955': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:40.662 +03:00 [INF] Received HTTP response headers after 1527.4504ms - 200
2024-08-15 23:06:40.662 +03:00 [INF] End processing HTTP request after 1527.76ms - 200
2024-08-15 23:06:40.670 +03:00 [WRN] Failed to process the job '965': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:42.794 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:42.794 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:42.794 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:43.470 +03:00 [INF] Received HTTP response headers after 675.4633ms - 200
2024-08-15 23:06:43.470 +03:00 [INF] End processing HTTP request after 675.6298ms - 200
2024-08-15 23:06:43.479 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:57.823 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:57.823 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:57.823 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:57.835 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:57.848 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:06:58.513 +03:00 [INF] Received HTTP response headers after 690.1482ms - 200
2024-08-15 23:06:58.513 +03:00 [INF] End processing HTTP request after 690.3395ms - 200
2024-08-15 23:06:58.531 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:06:58.549 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:06:58.549 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:58.550 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:06:59.210 +03:00 [INF] Received HTTP response headers after 659.9758ms - 200
2024-08-15 23:06:59.210 +03:00 [INF] End processing HTTP request after 660.1621ms - 200
2024-08-15 23:06:59.230 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:02.840 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:02.840 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:02.854 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:02.854 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:03.511 +03:00 [INF] Received HTTP response headers after 656.6081ms - 200
2024-08-15 23:07:03.511 +03:00 [INF] End processing HTTP request after 656.9215ms - 200
2024-08-15 23:07:03.526 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:04.348 +03:00 [INF] Received HTTP response headers after 1507.6441ms - 200
2024-08-15 23:07:04.348 +03:00 [INF] End processing HTTP request after 1507.91ms - 200
2024-08-15 23:07:04.366 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:11.909 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:11.925 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:11.925 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:11.925 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:12.583 +03:00 [INF] Received HTTP response headers after 657.6666ms - 200
2024-08-15 23:07:12.583 +03:00 [INF] End processing HTTP request after 657.8555ms - 200
2024-08-15 23:07:12.597 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:12.872 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:12.881 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:12.892 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:12.892 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:12.892 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:13.525 +03:00 [INF] Received HTTP response headers after 633.2661ms - 200
2024-08-15 23:07:13.525 +03:00 [INF] End processing HTTP request after 633.4288ms - 200
2024-08-15 23:07:13.536 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:16.916 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:16.916 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:17.616 +03:00 [INF] Received HTTP response headers after 699.6822ms - 200
2024-08-15 23:07:17.616 +03:00 [INF] End processing HTTP request after 699.98ms - 200
2024-08-15 23:07:17.626 +03:00 [WRN] Failed to process the job '1009': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:17.875 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:17.875 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:17.887 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:17.887 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:18.608 +03:00 [INF] Received HTTP response headers after 733.4961ms - 200
2024-08-15 23:07:18.608 +03:00 [INF] End processing HTTP request after 733.7161ms - 200
2024-08-15 23:07:18.627 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:19.400 +03:00 [INF] Received HTTP response headers after 1512.6815ms - 200
2024-08-15 23:07:19.400 +03:00 [INF] End processing HTTP request after 1513.0432ms - 200
2024-08-15 23:07:19.409 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:27.913 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:27.923 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:27.923 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:27.923 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:28.598 +03:00 [INF] Received HTTP response headers after 674.8407ms - 200
2024-08-15 23:07:28.598 +03:00 [INF] End processing HTTP request after 674.9987ms - 200
2024-08-15 23:07:28.608 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:32.916 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:32.916 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:33.576 +03:00 [INF] Received HTTP response headers after 659.484ms - 200
2024-08-15 23:07:33.576 +03:00 [INF] End processing HTTP request after 659.7627ms - 200
2024-08-15 23:07:33.585 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:39.941 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:40.733 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:41.237 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:41.238 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:42.955 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:42.965 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:42.966 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:42.966 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:42.976 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:42.976 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:42.976 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:42.986 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:42.999 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:42.999 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:42.999 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:43.009 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:43.615 +03:00 [INF] Received HTTP response headers after 649.028ms - 200
2024-08-15 23:07:43.615 +03:00 [INF] End processing HTTP request after 649.2078ms - 200
2024-08-15 23:07:43.625 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:43.639 +03:00 [INF] Received HTTP response headers after 662.8205ms - 200
2024-08-15 23:07:43.639 +03:00 [INF] End processing HTTP request after 663.022ms - 200
2024-08-15 23:07:43.648 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:44.561 +03:00 [INF] Received HTTP response headers after 1561.5525ms - 200
2024-08-15 23:07:44.561 +03:00 [INF] End processing HTTP request after 1561.8426ms - 200
2024-08-15 23:07:44.571 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:44.948 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:44.948 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:45.738 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:45.738 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:46.239 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:46.239 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:46.239 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:46.239 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:46.396 +03:00 [INF] Received HTTP response headers after 657.5251ms - 200
2024-08-15 23:07:46.396 +03:00 [INF] End processing HTTP request after 657.9026ms - 200
2024-08-15 23:07:46.407 +03:00 [WRN] Failed to process the job '879': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:46.412 +03:00 [INF] Received HTTP response headers after 1464.045ms - 200
2024-08-15 23:07:46.413 +03:00 [INF] End processing HTTP request after 1464.9486ms - 200
2024-08-15 23:07:46.428 +03:00 [WRN] Failed to process the job '901': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:46.899 +03:00 [INF] Received HTTP response headers after 659.4301ms - 200
2024-08-15 23:07:46.899 +03:00 [INF] End processing HTTP request after 659.7798ms - 200
2024-08-15 23:07:46.909 +03:00 [WRN] Failed to process the job '937': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:47.722 +03:00 [INF] Received HTTP response headers after 1483.0145ms - 200
2024-08-15 23:07:47.722 +03:00 [INF] End processing HTTP request after 1483.3109ms - 200
2024-08-15 23:07:47.740 +03:00 [WRN] Failed to process the job '885': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:47.965 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:47.965 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:47.987 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:47.987 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:48.009 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:48.010 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:48.632 +03:00 [INF] Received HTTP response headers after 622.4135ms - 200
2024-08-15 23:07:48.632 +03:00 [INF] End processing HTTP request after 622.6849ms - 200
2024-08-15 23:07:48.641 +03:00 [INF] Received HTTP response headers after 675.3698ms - 200
2024-08-15 23:07:48.641 +03:00 [INF] End processing HTTP request after 675.7046ms - 200
2024-08-15 23:07:48.646 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:48.649 +03:00 [INF] Received HTTP response headers after 662.0023ms - 200
2024-08-15 23:07:48.652 +03:00 [INF] End processing HTTP request after 665.214ms - 200
2024-08-15 23:07:48.654 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:48.662 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:07:58.041 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:58.052 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:07:58.052 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:58.052 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:07:58.061 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:07:58.769 +03:00 [INF] Received HTTP response headers after 716.2738ms - 200
2024-08-15 23:07:58.769 +03:00 [INF] End processing HTTP request after 716.5034ms - 200
2024-08-15 23:07:58.778 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:18.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:03.046 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:03.046 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:03.063 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:03.063 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:03.762 +03:00 [INF] Received HTTP response headers after 698.619ms - 200
2024-08-15 23:08:03.762 +03:00 [INF] End processing HTTP request after 698.9553ms - 200
2024-08-15 23:08:03.772 +03:00 [INF] Received HTTP response headers after 725.2828ms - 200
2024-08-15 23:08:03.772 +03:00 [INF] End processing HTTP request after 725.6649ms - 200
2024-08-15 23:08:03.778 +03:00 [WRN] Failed to process the job '965': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:03.780 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:33.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:11.983 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:11.997 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:08:11.998 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:11.998 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:12.615 +03:00 [INF] Received HTTP response headers after 617.2041ms - 200
2024-08-15 23:08:12.615 +03:00 [INF] End processing HTTP request after 617.4043ms - 200
2024-08-15 23:08:12.625 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:13.102 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:13.113 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:13.126 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:13.142 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:16.992 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:16.992 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:17.893 +03:00 [INF] Received HTTP response headers after 900.3192ms - 200
2024-08-15 23:08:17.893 +03:00 [INF] End processing HTTP request after 900.6034ms - 200
2024-08-15 23:08:17.904 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:27.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:18.102 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.102 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.118 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.118 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.130 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.130 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.145 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.145 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:18.926 +03:00 [INF] Received HTTP response headers after 823.0355ms - 200
2024-08-15 23:08:18.926 +03:00 [INF] End processing HTTP request after 823.3166ms - 200
2024-08-15 23:08:18.934 +03:00 [WRN] Failed to process the job '1009': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:54.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:18.937 +03:00 [INF] Received HTTP response headers after 818.7393ms - 200
2024-08-15 23:08:18.940 +03:00 [INF] End processing HTTP request after 821.7334ms - 200
2024-08-15 23:08:18.946 +03:00 [INF] Received HTTP response headers after 815.979ms - 200
2024-08-15 23:08:18.946 +03:00 [INF] End processing HTTP request after 816.2117ms - 200
2024-08-15 23:08:18.948 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 7 of 10 will be performed in 00:25:07.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:18.960 +03:00 [INF] Received HTTP response headers after 815.377ms - 200
2024-08-15 23:08:18.961 +03:00 [INF] End processing HTTP request after 815.7683ms - 200
2024-08-15 23:08:18.961 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:18.971 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:28.162 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:08:28.173 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:08:28.173 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:28.173 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:28.182 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:08:28.182 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:28.182 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:28.808 +03:00 [INF] Received HTTP response headers after 634.7695ms - 200
2024-08-15 23:08:28.808 +03:00 [INF] End processing HTTP request after 635.0005ms - 200
2024-08-15 23:08:28.818 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:28.829 +03:00 [INF] Received HTTP response headers after 646.2688ms - 200
2024-08-15 23:08:28.829 +03:00 [INF] End processing HTTP request after 646.4319ms - 200
2024-08-15 23:08:28.838 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:33.163 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:33.163 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:33.800 +03:00 [INF] Received HTTP response headers after 636.3207ms - 200
2024-08-15 23:08:33.800 +03:00 [INF] End processing HTTP request after 636.6378ms - 200
2024-08-15 23:08:33.809 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:39.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:43.217 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:08:43.218 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:43.218 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:08:44.744 +03:00 [INF] Received HTTP response headers after 1525.8378ms - 200
2024-08-15 23:08:44.744 +03:00 [INF] End processing HTTP request after 1526.0538ms - 200
2024-08-15 23:08:44.755 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:08:58.248 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:03.255 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:03.256 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:03.962 +03:00 [INF] Received HTTP response headers after 706.1169ms - 200
2024-08-15 23:09:03.962 +03:00 [INF] End processing HTTP request after 706.4822ms - 200
2024-08-15 23:09:03.977 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:12.091 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:12.109 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:12.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:12.109 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:12.772 +03:00 [INF] Received HTTP response headers after 662.4642ms - 200
2024-08-15 23:09:12.772 +03:00 [INF] End processing HTTP request after 662.6886ms - 200
2024-08-15 23:09:12.782 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:13.278 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:13.278 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:13.278 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:13.288 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:13.301 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:13.313 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:13.313 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:13.313 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:13.327 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:13.343 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:14.023 +03:00 [INF] Received HTTP response headers after 709.3688ms - 200
2024-08-15 23:09:14.023 +03:00 [INF] End processing HTTP request after 709.6093ms - 200
2024-08-15 23:09:14.035 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:14.796 +03:00 [INF] Received HTTP response headers after 1517.2985ms - 200
2024-08-15 23:09:14.796 +03:00 [INF] End processing HTTP request after 1517.5438ms - 200
2024-08-15 23:09:14.806 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:17.096 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:17.096 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:17.764 +03:00 [INF] Received HTTP response headers after 667.7806ms - 200
2024-08-15 23:09:17.764 +03:00 [INF] End processing HTTP request after 668.113ms - 200
2024-08-15 23:09:17.775 +03:00 [WRN] Failed to process the job '1013': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:18.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:18.299 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.299 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.303 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.303 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.333 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.333 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.347 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.347 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:18.906 +03:00 [INF] Received HTTP response headers after 607.5985ms - 200
2024-08-15 23:09:18.906 +03:00 [INF] End processing HTTP request after 607.9496ms - 200
2024-08-15 23:09:18.914 +03:00 [WRN] Failed to process the job '955': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:18.953 +03:00 [INF] Received HTTP response headers after 650.1649ms - 200
2024-08-15 23:09:18.953 +03:00 [INF] End processing HTTP request after 650.5572ms - 200
2024-08-15 23:09:18.966 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:19.011 +03:00 [INF] Received HTTP response headers after 678.2131ms - 200
2024-08-15 23:09:19.012 +03:00 [INF] End processing HTTP request after 678.6697ms - 200
2024-08-15 23:09:19.022 +03:00 [INF] Received HTTP response headers after 674.7881ms - 200
2024-08-15 23:09:19.022 +03:00 [INF] End processing HTTP request after 675.2365ms - 200
2024-08-15 23:09:19.026 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:19.045 +03:00 [WRN] Failed to process the job '1009': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:28.362 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:28.362 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:28.362 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:28.371 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:29.121 +03:00 [INF] Received HTTP response headers after 758.7903ms - 200
2024-08-15 23:09:29.121 +03:00 [INF] End processing HTTP request after 759.1257ms - 200
2024-08-15 23:09:29.139 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:33.377 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:33.377 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:34.914 +03:00 [INF] Received HTTP response headers after 1536.3798ms - 200
2024-08-15 23:09:34.914 +03:00 [INF] End processing HTTP request after 1536.7166ms - 200
2024-08-15 23:09:34.930 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:43.405 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:43.415 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:43.424 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:43.425 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:43.425 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:43.434 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:44.131 +03:00 [INF] Received HTTP response headers after 705.8641ms - 200
2024-08-15 23:09:44.131 +03:00 [INF] End processing HTTP request after 706.0835ms - 200
2024-08-15 23:09:44.138 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:48.405 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:48.405 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:48.421 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:48.421 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:48.437 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:48.438 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:49.092 +03:00 [INF] Received HTTP response headers after 670.9788ms - 200
2024-08-15 23:09:49.092 +03:00 [INF] End processing HTTP request after 671.2964ms - 200
2024-08-15 23:09:49.116 +03:00 [WRN] Failed to process the job '937': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:49.159 +03:00 [INF] Received HTTP response headers after 721.2809ms - 200
2024-08-15 23:09:49.159 +03:00 [INF] End processing HTTP request after 721.5993ms - 200
2024-08-15 23:09:49.168 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:49.910 +03:00 [INF] Received HTTP response headers after 1504.9633ms - 200
2024-08-15 23:09:49.910 +03:00 [INF] End processing HTTP request after 1505.2011ms - 200
2024-08-15 23:09:49.921 +03:00 [WRN] Failed to process the job '1013': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:58.457 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:58.458 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.458 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.469 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:58.469 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.469 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.480 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:58.490 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:58.500 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:58.510 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:09:58.510 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.510 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:09:58.520 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:09:59.092 +03:00 [INF] Received HTTP response headers after 622.5805ms - 200
2024-08-15 23:09:59.092 +03:00 [INF] End processing HTTP request after 622.7855ms - 200
2024-08-15 23:09:59.105 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:59.112 +03:00 [INF] Received HTTP response headers after 654.4274ms - 200
2024-08-15 23:09:59.112 +03:00 [INF] End processing HTTP request after 654.6367ms - 200
2024-08-15 23:09:59.125 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:09:59.149 +03:00 [INF] Received HTTP response headers after 639.0165ms - 200
2024-08-15 23:09:59.149 +03:00 [INF] End processing HTTP request after 639.2025ms - 200
2024-08-15 23:09:59.157 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:03.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.485 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.501 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.501 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.501 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.501 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.521 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:03.521 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:04.139 +03:00 [INF] Received HTTP response headers after 654.7372ms - 200
2024-08-15 23:10:04.139 +03:00 [INF] End processing HTTP request after 655.0001ms - 200
2024-08-15 23:10:04.140 +03:00 [INF] Received HTTP response headers after 639.4424ms - 200
2024-08-15 23:10:04.140 +03:00 [INF] End processing HTTP request after 639.8928ms - 200
2024-08-15 23:10:04.149 +03:00 [INF] Received HTTP response headers after 647.8584ms - 200
2024-08-15 23:10:04.149 +03:00 [INF] End processing HTTP request after 648.288ms - 200
2024-08-15 23:10:04.148 +03:00 [WRN] Failed to process the job '1009': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:20.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:04.150 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:04.156 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:04.172 +03:00 [INF] Received HTTP response headers after 650.6718ms - 200
2024-08-15 23:10:04.179 +03:00 [INF] End processing HTTP request after 658.3342ms - 200
2024-08-15 23:10:04.187 +03:00 [WRN] Failed to process the job '901': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:11.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:12.201 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:12.214 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:12.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:12.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:12.843 +03:00 [INF] Received HTTP response headers after 627.8129ms - 200
2024-08-15 23:10:12.843 +03:00 [INF] End processing HTTP request after 628.0141ms - 200
2024-08-15 23:10:12.850 +03:00 [WRN] Failed to process the job '1016': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:13.542 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:17.216 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:17.216 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:17.867 +03:00 [INF] Received HTTP response headers after 650.6273ms - 200
2024-08-15 23:10:17.867 +03:00 [INF] End processing HTTP request after 650.8783ms - 200
2024-08-15 23:10:17.875 +03:00 [WRN] Failed to process the job '1015': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:18.552 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:18.552 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:19.271 +03:00 [INF] Received HTTP response headers after 718.4647ms - 200
2024-08-15 23:10:19.271 +03:00 [INF] End processing HTTP request after 718.8386ms - 200
2024-08-15 23:10:19.282 +03:00 [WRN] Failed to process the job '965': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:26.335 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:26.335 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:26.336 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:28.569 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:28.577 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:31.343 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.343 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.343 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.343 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.343 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.343 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:31.983 +03:00 [INF] Received HTTP response headers after 640.0638ms - 200
2024-08-15 23:10:31.983 +03:00 [INF] End processing HTTP request after 640.4119ms - 200
2024-08-15 23:10:31.993 +03:00 [WRN] Failed to process the job '891': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:32.030 +03:00 [INF] Received HTTP response headers after 686.7462ms - 200
2024-08-15 23:10:32.030 +03:00 [INF] End processing HTTP request after 687.0793ms - 200
2024-08-15 23:10:32.040 +03:00 [WRN] Failed to process the job '969': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:32.051 +03:00 [INF] Received HTTP response headers after 708.024ms - 200
2024-08-15 23:10:32.052 +03:00 [INF] End processing HTTP request after 708.4578ms - 200
2024-08-15 23:10:32.060 +03:00 [WRN] Failed to process the job '933': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:33.574 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:33.574 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:33.577 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:33.578 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:34.300 +03:00 [INF] Received HTTP response headers after 722.7198ms - 200
2024-08-15 23:10:34.300 +03:00 [INF] End processing HTTP request after 723.02ms - 200
2024-08-15 23:10:34.307 +03:00 [WRN] Failed to process the job '1013': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:35.163 +03:00 [INF] Received HTTP response headers after 1589.0889ms - 200
2024-08-15 23:10:35.163 +03:00 [INF] End processing HTTP request after 1589.3654ms - 200
2024-08-15 23:10:35.173 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:41.344 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:41.350 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:43.607 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:43.607 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:43.607 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:43.616 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:43.616 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:43.616 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:43.628 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:43.642 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:43.643 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:43.643 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:44.244 +03:00 [INF] Received HTTP response headers after 636.5833ms - 200
2024-08-15 23:10:44.244 +03:00 [INF] End processing HTTP request after 636.7723ms - 200
2024-08-15 23:10:44.252 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:44.277 +03:00 [INF] Received HTTP response headers after 634.727ms - 200
2024-08-15 23:10:44.277 +03:00 [INF] End processing HTTP request after 634.9072ms - 200
2024-08-15 23:10:44.284 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:44.296 +03:00 [INF] Received HTTP response headers after 679.2437ms - 200
2024-08-15 23:10:44.296 +03:00 [INF] End processing HTTP request after 679.4303ms - 200
2024-08-15 23:10:44.302 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:46.356 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:46.356 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:46.356 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:46.356 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:46.989 +03:00 [INF] Received HTTP response headers after 632.2988ms - 200
2024-08-15 23:10:46.989 +03:00 [INF] End processing HTTP request after 632.684ms - 200
2024-08-15 23:10:46.998 +03:00 [WRN] Failed to process the job '971': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:47.065 +03:00 [INF] Received HTTP response headers after 708.7485ms - 200
2024-08-15 23:10:47.065 +03:00 [INF] End processing HTTP request after 709.107ms - 200
2024-08-15 23:10:47.075 +03:00 [WRN] Failed to process the job '915': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:48.631 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:48.631 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:48.686 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:10:48.687 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 13.2735ms
2024-08-15 23:10:49.324 +03:00 [INF] Received HTTP response headers after 692.9125ms - 200
2024-08-15 23:10:49.324 +03:00 [INF] End processing HTTP request after 693.3289ms - 200
2024-08-15 23:10:49.334 +03:00 [WRN] Failed to process the job '879': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:54.066 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:10:54.074 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:10:54.086 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:10:54.218 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 129.7372ms
2024-08-15 23:10:54.219 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:10:54.219 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 152.8846 ms
System.Exception: Test Exception: Something went wrong during the stock purchase process.
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in c:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 35
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in c:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:10:54.222 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.Exception: Test Exception: Something went wrong during the stock purchase process.
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in c:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 35
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in c:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:10:54.226 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 159.8122ms
2024-08-15 23:10:58.673 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:58.682 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:58.692 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:58.692 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:58.692 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:58.704 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:58.704 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:58.704 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:58.720 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:10:58.729 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:10:58.729 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:58.729 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:10:59.441 +03:00 [INF] Received HTTP response headers after 748.9547ms - 200
2024-08-15 23:10:59.441 +03:00 [INF] End processing HTTP request after 749.1764ms - 200
2024-08-15 23:10:59.458 +03:00 [WRN] Failed to process the job '1016': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:42.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:59.475 +03:00 [INF] Received HTTP response headers after 771.464ms - 200
2024-08-15 23:10:59.475 +03:00 [INF] End processing HTTP request after 771.6191ms - 200
2024-08-15 23:10:59.488 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:10:59.503 +03:00 [INF] Received HTTP response headers after 773.4728ms - 200
2024-08-15 23:10:59.503 +03:00 [INF] End processing HTTP request after 773.6501ms - 200
2024-08-15 23:10:59.515 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:00.247 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 caught stopping signal...
2024-08-15 23:11:00.248 +03:00 [INF] Application is shutting down...
2024-08-15 23:11:00.248 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da caught stopping signal...
2024-08-15 23:11:00.250 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da All dispatchers stopped
2024-08-15 23:11:00.256 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da successfully reported itself as stopped in 3,95 ms
2024-08-15 23:11:00.256 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da has been stopped in total 7,8833 ms
2024-08-15 23:11:00.257 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 23:11:00.258 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 23:11:00.261 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 23:11:00.768 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 caught stopped signal...
2024-08-15 23:11:03.678 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:03.679 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:03.693 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:03.693 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:03.721 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:03.721 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:04.339 +03:00 [INF] Received HTTP response headers after 660.6918ms - 200
2024-08-15 23:11:04.339 +03:00 [INF] End processing HTTP request after 660.9908ms - 200
2024-08-15 23:11:04.372 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:04.372 +03:00 [INF] Received HTTP response headers after 651.6601ms - 200
2024-08-15 23:11:04.373 +03:00 [INF] End processing HTTP request after 652.211ms - 200
2024-08-15 23:11:04.386 +03:00 [WRN] Failed to process the job '885': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:05.209 +03:00 [INF] Received HTTP response headers after 1516.3013ms - 200
2024-08-15 23:11:05.209 +03:00 [INF] End processing HTTP request after 1516.535ms - 200
2024-08-15 23:11:05.223 +03:00 [WRN] Failed to process the job '1015': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:05.231 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 All dispatchers stopped
2024-08-15 23:11:05.232 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 successfully reported itself as stopped in 1,4052 ms
2024-08-15 23:11:05.232 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 has been stopped in total 4984,8533 ms
2024-08-15 23:11:17.447 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:11:17.545 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:11:17.558 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:11:17.558 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:11:17.558 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:11:17.559 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:11:17.559 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:11:17.559 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:11:17.640 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 successfully announced in 69,6112 ms
2024-08-15 23:11:17.642 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:11:17.759 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 all the dispatchers started
2024-08-15 23:11:17.815 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:11:17.846 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:11:17.846 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:11:17.846 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:11:17.847 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:11:17.847 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:11:17.847 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:11:17.847 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:11:17.856 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:11:17.858 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:11:17.926 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:11:17.926 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:11:17.926 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:11:17.926 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:11:17.926 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:11:17.926 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:11:17.926 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:11:17.927 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:11:17.927 +03:00 [INF] Hosting environment: Development
2024-08-15 23:11:17.927 +03:00 [INF] Content root path: c:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:11:17.929 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:11:17.930 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 successfully announced in 3,1183 ms
2024-08-15 23:11:17.930 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:11:17.950 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 all the dispatchers started
2024-08-15 23:11:18.134 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:11:18.224 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 71.7243 ms
2024-08-15 23:11:18.226 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 92.3384ms
2024-08-15 23:11:18.236 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:11:18.236 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:11:18.237 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 1.758ms
2024-08-15 23:11:18.239 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.6245 ms
2024-08-15 23:11:18.239 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 3.4776ms
2024-08-15 23:11:18.478 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:11:18.578 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 97.8839 ms
2024-08-15 23:11:18.578 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 99.9577ms
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.242 +03:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:19.386 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:19.387 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:19.388 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:19.388 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:20.233 +03:00 [INF] Received HTTP response headers after 842.1366ms - 200
2024-08-15 23:11:20.234 +03:00 [INF] End processing HTTP request after 852.0253ms - 200
2024-08-15 23:11:20.257 +03:00 [INF] Received HTTP response headers after 868.6962ms - 200
2024-08-15 23:11:20.258 +03:00 [INF] End processing HTTP request after 875.7007ms - 200
2024-08-15 23:11:20.273 +03:00 [WRN] Failed to process the job '1018': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:42.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:20.279 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:23.385 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:11:23.405 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:11:23.424 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:11:23.557 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:23.558 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.222 +03:00 [INF] Received HTTP response headers after 664.2379ms - 200
2024-08-15 23:11:24.222 +03:00 [INF] End processing HTTP request after 665.2523ms - 200
2024-08-15 23:11:24.242 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 814.7691ms
2024-08-15 23:11:24.242 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:11:24.244 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 857.9192 ms
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in c:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in c:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:11:24.276 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in c:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in c:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:11:24.298 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 912.8614ms
2024-08-15 23:11:24.384 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:24.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:25.024 +03:00 [INF] Received HTTP response headers after 639.1093ms - 200
2024-08-15 23:11:25.024 +03:00 [INF] End processing HTTP request after 640.0324ms - 200
2024-08-15 23:11:25.037 +03:00 [INF] Received HTTP response headers after 651.5432ms - 200
2024-08-15 23:11:25.037 +03:00 [INF] End processing HTTP request after 652.3972ms - 200
2024-08-15 23:11:25.037 +03:00 [WRN] Failed to process the job '1017': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.049 +03:00 [INF] Received HTTP response headers after 663.9857ms - 200
2024-08-15 23:11:25.049 +03:00 [INF] End processing HTTP request after 664.9716ms - 200
2024-08-15 23:11:25.050 +03:00 [WRN] Failed to process the job '875': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.059 +03:00 [INF] Received HTTP response headers after 674.178ms - 200
2024-08-15 23:11:25.060 +03:00 [INF] End processing HTTP request after 675.071ms - 200
2024-08-15 23:11:25.063 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.071 +03:00 [WRN] Failed to process the job '977': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.088 +03:00 [INF] Received HTTP response headers after 702.4798ms - 200
2024-08-15 23:11:25.088 +03:00 [INF] End processing HTTP request after 703.8238ms - 200
2024-08-15 23:11:25.101 +03:00 [WRN] Failed to process the job '883': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.162 +03:00 [INF] Received HTTP response headers after 777.2129ms - 200
2024-08-15 23:11:25.162 +03:00 [INF] End processing HTTP request after 778.1052ms - 200
2024-08-15 23:11:25.177 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:25.879 +03:00 [INF] Received HTTP response headers after 1493.8799ms - 200
2024-08-15 23:11:25.879 +03:00 [INF] End processing HTTP request after 1495.0515ms - 200
2024-08-15 23:11:25.892 +03:00 [WRN] Failed to process the job '869': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:32.985 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:11:32.985 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:32.987 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:32.987 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:33.639 +03:00 [INF] Received HTTP response headers after 652.171ms - 200
2024-08-15 23:11:33.639 +03:00 [INF] End processing HTTP request after 652.5718ms - 200
2024-08-15 23:11:33.654 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:34.274 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 caught stopping signal...
2024-08-15 23:11:34.274 +03:00 [INF] Application is shutting down...
2024-08-15 23:11:34.278 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 caught stopping signal...
2024-08-15 23:11:34.281 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 All dispatchers stopped
2024-08-15 23:11:34.287 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 successfully reported itself as stopped in 4,168 ms
2024-08-15 23:11:34.287 +03:00 [INF] Server desktop-ihebt3k:20532:fc1ea848 has been stopped in total 8,5819 ms
2024-08-15 23:11:34.291 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 23:11:34.292 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 23:11:34.296 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 23:11:34.799 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 caught stopped signal...
2024-08-15 23:11:38.001 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:38.001 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:38.657 +03:00 [INF] Received HTTP response headers after 656.4886ms - 200
2024-08-15 23:11:38.657 +03:00 [INF] End processing HTTP request after 656.8572ms - 200
2024-08-15 23:11:38.670 +03:00 [WRN] Failed to process the job '913': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:11:38.681 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 All dispatchers stopped
2024-08-15 23:11:38.683 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 successfully reported itself as stopped in 1,7929 ms
2024-08-15 23:11:38.683 +03:00 [INF] Server desktop-ihebt3k:20532:3eaf9842 has been stopped in total 4409,0343 ms
2024-08-15 23:11:56.489 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:11:56.591 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:11:56.607 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:11:56.609 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:11:56.610 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:11:56.611 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:11:56.612 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:11:56.613 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:11:56.865 +03:00 [INF] Server desktop-ihebt3k:18572:d0cfcb12 successfully announced in 165,1235 ms
2024-08-15 23:11:56.873 +03:00 [INF] Server desktop-ihebt3k:18572:d0cfcb12 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:11:57.275 +03:00 [INF] Server desktop-ihebt3k:18572:d0cfcb12 all the dispatchers started
2024-08-15 23:11:57.442 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:11:57.487 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:11:57.488 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:11:57.489 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:11:57.490 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:11:57.491 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:11:57.492 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:11:57.493 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:11:57.505 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:11:57.508 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:11:57.637 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:11:57.638 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:11:57.639 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:11:57.640 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:11:57.640 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:11:57.641 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:11:57.641 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:11:57.641 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:11:57.654 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:11:57.655 +03:00 [INF] Hosting environment: Development
2024-08-15 23:11:57.656 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:11:57.657 +03:00 [INF] Server desktop-ihebt3k:18572:eba42deb successfully announced in 2,9289 ms
2024-08-15 23:11:57.659 +03:00 [INF] Server desktop-ihebt3k:18572:eba42deb is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:11:57.831 +03:00 [INF] Server desktop-ihebt3k:18572:eba42deb all the dispatchers started
2024-08-15 23:11:58.498 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:11:58.756 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 80.7148 ms
2024-08-15 23:11:58.764 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 272.7033ms
2024-08-15 23:11:58.771 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:11:58.771 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:11:58.779 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:11:58.785 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.2513 ms
2024-08-15 23:11:58.787 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 7.7255ms
2024-08-15 23:11:58.788 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 18.5092ms
2024-08-15 23:11:58.906 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 135.9884ms
2024-08-15 23:11:59.083 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:11:59.238 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 150.3596 ms
2024-08-15 23:11:59.240 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 156.7148ms
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:11:59.590 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:11:59.689 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:59.689 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:59.692 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:11:59.692 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:00.489 +03:00 [INF] Received HTTP response headers after 791.7877ms - 200
2024-08-15 23:12:00.491 +03:00 [INF] End processing HTTP request after 805.9203ms - 200
2024-08-15 23:12:00.533 +03:00 [INF] Received HTTP response headers after 839.4018ms - 200
2024-08-15 23:12:00.534 +03:00 [INF] End processing HTTP request after 848.6868ms - 200
2024-08-15 23:12:00.664 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:00.664 +03:00 [WRN] Failed to process the job '1016': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:04.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.688 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.689 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.690 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:04.690 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:05.357 +03:00 [INF] Received HTTP response headers after 662.7046ms - 200
2024-08-15 23:12:05.360 +03:00 [INF] End processing HTTP request after 673.4296ms - 200
2024-08-15 23:12:05.380 +03:00 [INF] Received HTTP response headers after 687.6032ms - 200
2024-08-15 23:12:05.381 +03:00 [INF] End processing HTTP request after 694.7483ms - 200
2024-08-15 23:12:05.393 +03:00 [INF] Received HTTP response headers after 695.0111ms - 200
2024-08-15 23:12:05.396 +03:00 [INF] End processing HTTP request after 708.9333ms - 200
2024-08-15 23:12:05.410 +03:00 [INF] Received HTTP response headers after 713.3086ms - 200
2024-08-15 23:12:05.411 +03:00 [INF] End processing HTTP request after 724.052ms - 200
2024-08-15 23:12:05.598 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:05.600 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:05.600 +03:00 [WRN] Failed to process the job '977': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:05.600 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:05.728 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:05.728 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:05.729 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:05.740 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:07.711 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:12:07.739 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:12:07.759 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:12:10.978 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.980 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.978 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.978 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.978 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.981 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.981 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.984 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.983 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:10.983 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:11.658 +03:00 [INF] Received HTTP response headers after 673.2061ms - 200
2024-08-15 23:12:11.661 +03:00 [INF] End processing HTTP request after 682.6029ms - 200
2024-08-15 23:12:11.697 +03:00 [INF] Received HTTP response headers after 704.9394ms - 200
2024-08-15 23:12:11.699 +03:00 [INF] End processing HTTP request after 721.2101ms - 200
2024-08-15 23:12:11.711 +03:00 [INF] Received HTTP response headers after 723.7491ms - 200
2024-08-15 23:12:11.712 +03:00 [INF] End processing HTTP request after 731.2965ms - 200
2024-08-15 23:12:11.751 +03:00 [INF] Received HTTP response headers after 761.8162ms - 200
2024-08-15 23:12:11.751 +03:00 [INF] Received HTTP response headers after 757.0004ms - 200
2024-08-15 23:12:11.752 +03:00 [INF] End processing HTTP request after 773.5733ms - 200
2024-08-15 23:12:11.753 +03:00 [INF] End processing HTTP request after 774.5308ms - 200
2024-08-15 23:12:11.983 +03:00 [WRN] Failed to process the job '935': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:11.986 +03:00 [WRN] Failed to process the job '881': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:11.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:11.987 +03:00 [WRN] Failed to process the job '941': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:11.987 +03:00 [WRN] Failed to process the job '929': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:12.055 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 4290.6307ms
2024-08-15 23:12:12.088 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:12.125 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:12:12.129 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 4413.9011 ms
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:12:12.158 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:12:12.186 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 4475.0667ms
2024-08-15 23:12:12.455 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:12.461 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:12:12.465 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:12.467 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:12.542 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:20.965 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:20.965 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:20.968 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:20.970 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:22.811 +03:00 [INF] Received HTTP response headers after 10342.0655ms - 200
2024-08-15 23:12:22.813 +03:00 [INF] End processing HTTP request after 10348.1714ms - 200
2024-08-15 23:12:25.304 +03:00 [INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:12:25.306 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:25.309 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:25.311 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:26.286 +03:00 [INF] Received HTTP response headers after 5314.3333ms - 200
2024-08-15 23:12:26.824 +03:00 [INF] Executed DbCommand (535ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:26.827 +03:00 [INF] End processing HTTP request after 5862.2753ms - 200
2024-08-15 23:12:26.286 +03:00 [INF] Received HTTP response headers after 3475.8816ms - 200
2024-08-15 23:12:26.845 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:12:26.846 +03:00 [INF] End processing HTTP request after 5881.6797ms - 200
2024-08-15 23:12:27.325 +03:00 [INF] Received HTTP response headers after 1036.0334ms - 200
2024-08-15 23:12:27.327 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:27.328 +03:00 [INF] End processing HTTP request after 2018.2466ms - 200
2024-08-15 23:12:27.338 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:27.337 +03:00 [WRN] Failed to process the job '980': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:28.049 +03:00 [INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:28.046 +03:00 [INF] Executed DbCommand (621ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:12:28.047 +03:00 [INF] Executed DbCommand (620ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:12:28.233 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:28.048 +03:00 [INF] Executed DbCommand (314ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:12:29.254 +03:00 [WRN] Failed to process the job '979': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:27.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:29.255 +03:00 [INF] Received HTTP response headers after 1903.0209ms - 200
2024-08-15 23:12:29.256 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:29.256 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:29.257 +03:00 [WRN] Failed to process the job '1020': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:29.286 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:29.261 +03:00 [WRN] Failed to process the job '927': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:29.285 +03:00 [INF] End processing HTTP request after 1958.2073ms - 200
2024-08-15 23:12:29.392 +03:00 [WRN] Failed to process the job '1018': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:54.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:30.018 +03:00 [INF] Received HTTP response headers after 705.3135ms - 200
2024-08-15 23:12:30.021 +03:00 [INF] End processing HTTP request after 764.4543ms - 200
2024-08-15 23:12:30.022 +03:00 [INF] Received HTTP response headers after 734.7158ms - 200
2024-08-15 23:12:30.024 +03:00 [INF] End processing HTTP request after 1791.0134ms - 200
2024-08-15 23:12:30.137 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:30.137 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:30.318 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:30.321 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:31.004 +03:00 [INF] Received HTTP response headers after 682.5082ms - 200
2024-08-15 23:12:31.006 +03:00 [INF] End processing HTTP request after 687.8743ms - 200
2024-08-15 23:12:31.060 +03:00 [WRN] Failed to process the job '1017': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:31.857 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:31.860 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:32.759 +03:00 [INF] Received HTTP response headers after 896.9864ms - 200
2024-08-15 23:12:32.762 +03:00 [INF] End processing HTTP request after 904.9455ms - 200
2024-08-15 23:12:32.825 +03:00 [WRN] Failed to process the job '1015': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:12:33.239 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:12:33.243 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:29.600 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:15:29.695 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:15:29.710 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:15:29.711 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:15:29.712 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:15:29.712 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:15:29.713 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:15:29.714 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:15:29.839 +03:00 [INF] Server desktop-ihebt3k:12236:976606cd successfully announced in 102,6763 ms
2024-08-15 23:15:29.846 +03:00 [INF] Server desktop-ihebt3k:12236:976606cd is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:15:30.226 +03:00 [INF] Server desktop-ihebt3k:12236:976606cd all the dispatchers started
2024-08-15 23:15:30.326 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:15:30.378 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:15:30.380 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:15:30.381 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:15:30.382 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:15:30.383 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:15:30.383 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:15:30.384 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:15:30.393 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:15:30.397 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:15:30.547 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:15:30.549 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:15:30.550 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:15:30.550 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:15:30.551 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:15:30.552 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:15:30.552 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:15:30.553 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:15:30.566 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:15:30.567 +03:00 [INF] Hosting environment: Development
2024-08-15 23:15:30.568 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:15:30.569 +03:00 [INF] Server desktop-ihebt3k:12236:b4f7e892 successfully announced in 2,4061 ms
2024-08-15 23:15:30.571 +03:00 [INF] Server desktop-ihebt3k:12236:b4f7e892 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:15:30.744 +03:00 [INF] Server desktop-ihebt3k:12236:b4f7e892 all the dispatchers started
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:32.143 +03:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.678 +03:00 [INF] Executed DbCommand (5,544ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.696 +03:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.701 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:37.699 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.699 +03:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.698 +03:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:37.697 +03:00 [INF] Executed DbCommand (18ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:37.698 +03:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:37.697 +03:00 [INF] Executed DbCommand (18ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:37.701 +03:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.797 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.802 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.803 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.804 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.804 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.805 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.806 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:39.830 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:15:40.010 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 91.5085 ms
2024-08-15 23:15:40.016 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 190.1937ms
2024-08-15 23:15:40.021 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:15:40.021 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:15:40.021 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:15:40.028 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 7.3362ms
2024-08-15 23:15:40.031 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 2.5344 ms
2024-08-15 23:15:40.036 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 15.9096ms
2024-08-15 23:15:40.061 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 39.7205ms
2024-08-15 23:15:40.227 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:15:40.386 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 149.5843 ms
2024-08-15 23:15:40.390 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 163.5064ms
2024-08-15 23:15:40.622 +03:00 [INF] Received HTTP response headers after 813.1876ms - 200
2024-08-15 23:15:40.626 +03:00 [INF] End processing HTTP request after 834.2736ms - 200
2024-08-15 23:15:40.627 +03:00 [INF] Received HTTP response headers after 819.4554ms - 200
2024-08-15 23:15:40.628 +03:00 [INF] End processing HTTP request after 837.0565ms - 200
2024-08-15 23:15:40.634 +03:00 [INF] Received HTTP response headers after 821.349ms - 200
2024-08-15 23:15:40.634 +03:00 [INF] Received HTTP response headers after 821.3587ms - 200
2024-08-15 23:15:40.636 +03:00 [INF] End processing HTTP request after 844.6262ms - 200
2024-08-15 23:15:40.637 +03:00 [INF] End processing HTTP request after 846.0867ms - 200
2024-08-15 23:15:40.656 +03:00 [INF] Received HTTP response headers after 846.7801ms - 200
2024-08-15 23:15:40.656 +03:00 [INF] Received HTTP response headers after 847.7356ms - 200
2024-08-15 23:15:40.659 +03:00 [INF] End processing HTTP request after 867.2976ms - 200
2024-08-15 23:15:40.673 +03:00 [INF] End processing HTTP request after 881.2256ms - 200
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '1006': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '1022': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:25.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '980': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.069 +03:00 [WRN] Failed to process the job '1016': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:15:41.187 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:41.187 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:15:41.203 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:15:47.631 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:47.641 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:56.346 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:56.346 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:56.346 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:56.348 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:56.350 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:57.840 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:57.841 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.265 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.267 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.421 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.422 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.750 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:58.750 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.823 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.823 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.823 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.832 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.824 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.825 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.824 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.843 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.061 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:00.342 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.083 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:00.729 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.836 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.092 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:16:01.092 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:00.342 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:00.423 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:15:59.837 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.101 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.102 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:00.100 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.062 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.112 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.093 +03:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:16:01.113 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:01.421 +03:00 [INF] Received HTTP response headers after 2668.759ms - 200
2024-08-15 23:16:01.423 +03:00 [INF] End processing HTTP request after 3157.9334ms - 200
2024-08-15 23:16:01.424 +03:00 [INF] Received HTTP response headers after 3581.6175ms - 200
2024-08-15 23:16:01.426 +03:00 [INF] End processing HTTP request after 5080.3994ms - 200
2024-08-15 23:16:01.483 +03:00 [INF] Received HTTP response headers after 3639.1331ms - 200
2024-08-15 23:16:01.483 +03:00 [INF] Received HTTP response headers after 5137.7734ms - 200
2024-08-15 23:16:01.483 +03:00 [INF] Received HTTP response headers after 3059.1804ms - 200
2024-08-15 23:16:01.485 +03:00 [INF] End processing HTTP request after 13854.3477ms - 200
2024-08-15 23:16:01.484 +03:00 [INF] End processing HTTP request after 5138.7505ms - 200
2024-08-15 23:16:01.492 +03:00 [INF] End processing HTTP request after 3651.8692ms - 200
2024-08-15 23:16:01.511 +03:00 [INF] Received HTTP response headers after 3242.5561ms - 200
2024-08-15 23:16:01.558 +03:00 [INF] End processing HTTP request after 5212.6007ms - 200
2024-08-15 23:16:01.650 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.743 +03:00 [WRN] Failed to process the job '1021': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.744 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:19.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.745 +03:00 [WRN] Failed to process the job '1015': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:20.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.745 +03:00 [WRN] Failed to process the job '1018': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.746 +03:00 [WRN] Failed to process the job '955': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:01.754 +03:00 [INF] Received HTTP response headers after 1923.6842ms - 200
2024-08-15 23:16:01.760 +03:00 [INF] Received HTTP response headers after 1931.0713ms - 200
2024-08-15 23:16:01.788 +03:00 [INF] Received HTTP response headers after 725.3951ms - 200
2024-08-15 23:16:01.809 +03:00 [INF] Received HTTP response headers after 1972.4243ms - 200
2024-08-15 23:16:01.831 +03:00 [INF] Received HTTP response headers after 732.1142ms - 200
2024-08-15 23:16:01.836 +03:00 [INF] Received HTTP response headers after 732.0052ms - 200
2024-08-15 23:16:01.845 +03:00 [INF] End processing HTTP request after 3095.5055ms - 200
2024-08-15 23:16:01.846 +03:00 [INF] End processing HTTP request after 3425.534ms - 200
2024-08-15 23:16:01.849 +03:00 [INF] End processing HTTP request after 1119.9045ms - 200
2024-08-15 23:16:01.847 +03:00 [INF] End processing HTTP request after 2023.1389ms - 200
2024-08-15 23:16:01.850 +03:00 [INF] End processing HTTP request after 2026.1177ms - 200
2024-08-15 23:16:01.848 +03:00 [INF] End processing HTTP request after 2024.8851ms - 200
2024-08-15 23:16:01.864 +03:00 [INF] Received HTTP response headers after 777.3772ms - 200
2024-08-15 23:16:01.864 +03:00 [INF] Received HTTP response headers after 773.8875ms - 200
2024-08-15 23:16:01.876 +03:00 [INF] End processing HTTP request after 2052.725ms - 200
2024-08-15 23:16:01.877 +03:00 [INF] End processing HTTP request after 1086.8145ms - 200
2024-08-15 23:16:01.890 +03:00 [INF] Received HTTP response headers after 780.9282ms - 200
2024-08-15 23:16:01.892 +03:00 [INF] End processing HTTP request after 1468.5203ms - 200
2024-08-15 23:16:01.912 +03:00 [INF] Received HTTP response headers after 817.7987ms - 200
2024-08-15 23:16:01.913 +03:00 [INF] End processing HTTP request after 2090.3911ms - 200
2024-08-15 23:16:01.924 +03:00 [INF] Received HTTP response headers after 817.4628ms - 200
2024-08-15 23:16:01.925 +03:00 [INF] End processing HTTP request after 1583.9631ms - 200
2024-08-15 23:16:02.045 +03:00 [INF] Received HTTP response headers after 924.6758ms - 200
2024-08-15 23:16:02.046 +03:00 [INF] End processing HTTP request after 983.9186ms - 200
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '1017': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '969': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '1001': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '977': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.434 +03:00 [WRN] Failed to process the job '979': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:42.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.436 +03:00 [WRN] Failed to process the job '1020': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:42.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.436 +03:00 [WRN] Failed to process the job '971': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.436 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.436 +03:00 [WRN] Failed to process the job '937': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.436 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.437 +03:00 [WRN] Failed to process the job '901': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:02.732 +03:00 [INF] Received HTTP response headers after 1618.0333ms - 200
2024-08-15 23:16:02.734 +03:00 [INF] End processing HTTP request after 2634.3598ms - 200
2024-08-15 23:16:02.787 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:01.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:13.110 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.110 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.114 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.116 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.151 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:16:13.167 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:16:13.517 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.522 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:13.865 +03:00 [INF] Received HTTP response headers after 746.1541ms - 200
2024-08-15 23:16:13.867 +03:00 [INF] End processing HTTP request after 756.6937ms - 200
2024-08-15 23:16:13.884 +03:00 [INF] Received HTTP response headers after 766.8113ms - 200
2024-08-15 23:16:13.885 +03:00 [INF] End processing HTTP request after 774.5161ms - 200
2024-08-15 23:16:13.980 +03:00 [WRN] Failed to process the job '1005': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:13.981 +03:00 [WRN] Failed to process the job '915': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:14.188 +03:00 [INF] Received HTTP response headers after 664.313ms - 200
2024-08-15 23:16:14.190 +03:00 [INF] End processing HTTP request after 673.0308ms - 200
2024-08-15 23:16:14.255 +03:00 [WRN] Failed to process the job '1024': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:17.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:16:15.460 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:16:40.501 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:16:40.589 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:16:40.608 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:16:40.609 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:16:40.609 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:16:40.610 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:16:40.610 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:16:40.611 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:16:40.753 +03:00 [INF] Server desktop-ihebt3k:25096:e35b7a91 successfully announced in 119,317 ms
2024-08-15 23:16:40.757 +03:00 [INF] Server desktop-ihebt3k:25096:e35b7a91 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:16:41.048 +03:00 [INF] Server desktop-ihebt3k:25096:e35b7a91 all the dispatchers started
2024-08-15 23:16:41.190 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:16:41.230 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:16:41.231 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:16:41.232 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:16:41.233 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:16:41.234 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:16:41.235 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:16:41.236 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:16:41.245 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:16:41.248 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:16:41.357 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:16:41.359 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:16:41.359 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:16:41.360 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:16:41.360 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:16:41.361 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:16:41.361 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:16:41.362 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:16:41.375 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:16:41.376 +03:00 [INF] Hosting environment: Development
2024-08-15 23:16:41.377 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:16:41.378 +03:00 [INF] Server desktop-ihebt3k:25096:0e12fb4f successfully announced in 2,9298 ms
2024-08-15 23:16:41.379 +03:00 [INF] Server desktop-ihebt3k:25096:0e12fb4f is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:16:41.510 +03:00 [INF] Server desktop-ihebt3k:25096:0e12fb4f all the dispatchers started
2024-08-15 23:16:41.792 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:16:41.990 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 72.9940 ms
2024-08-15 23:16:41.996 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 235.7986ms
2024-08-15 23:16:41.998 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:16:41.999 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:16:42.011 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.7040 ms
2024-08-15 23:16:42.009 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:16:42.027 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 28.6487ms
2024-08-15 23:16:42.033 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 23.2602ms
2024-08-15 23:16:42.069 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 69.6697ms
2024-08-15 23:16:42.236 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:16:42.385 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 145.3572 ms
2024-08-15 23:16:42.388 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 152.3902ms
2024-08-15 23:16:43.115 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:16:50.099 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:50.101 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:16:51.845 +03:00 [INF] Received HTTP response headers after 1739.4903ms - 200
2024-08-15 23:16:51.847 +03:00 [INF] End processing HTTP request after 1753.1699ms - 200
2024-08-15 23:16:51.942 +03:00 [WRN] Failed to process the job '1002': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 47
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:17:01.547 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:17:01.578 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:17:01.598 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:17:03.549 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:17:03.552 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:17:04.343 +03:00 [INF] Received HTTP response headers after 789.7453ms - 200
2024-08-15 23:17:04.345 +03:00 [INF] End processing HTTP request after 802.095ms - 200
2024-08-15 23:17:13.773 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 12166.6841ms
2024-08-15 23:17:13.776 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:17:13.781 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 12228.4062 ms
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 47
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:17:13.830 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 47
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 38
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:17:13.866 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 12319.4855ms
2024-08-15 23:17:13.867 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:17:13.922 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:18:35.404 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:18:35.497 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:18:35.512 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:18:35.513 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:18:35.514 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:18:35.514 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:18:35.515 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:18:35.515 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:18:35.689 +03:00 [INF] Server desktop-ihebt3k:23492:74f9fd97 successfully announced in 140,0037 ms
2024-08-15 23:18:35.695 +03:00 [INF] Server desktop-ihebt3k:23492:74f9fd97 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:18:35.712 +03:00 [INF] 2 servers were removed due to timeout
2024-08-15 23:18:36.067 +03:00 [INF] Server desktop-ihebt3k:23492:74f9fd97 all the dispatchers started
2024-08-15 23:18:36.162 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:18:36.198 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:18:36.199 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:18:36.200 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:18:36.200 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:18:36.201 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:18:36.202 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:18:36.203 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:18:36.211 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:18:36.213 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:18:36.336 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:18:36.347 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:18:36.348 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:18:36.358 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:18:36.359 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:18:36.360 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:18:36.360 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:18:36.361 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:18:36.377 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:18:36.378 +03:00 [INF] Server desktop-ihebt3k:23492:40c4658e successfully announced in 3,7601 ms
2024-08-15 23:18:36.384 +03:00 [INF] Hosting environment: Development
2024-08-15 23:18:36.385 +03:00 [INF] Server desktop-ihebt3k:23492:40c4658e is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:18:36.389 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:18:36.536 +03:00 [INF] Server desktop-ihebt3k:23492:40c4658e all the dispatchers started
2024-08-15 23:18:37.020 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:18:37.236 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 83.9966 ms
2024-08-15 23:18:37.245 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 231.0903ms
2024-08-15 23:18:37.255 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:18:37.260 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:18:37.262 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:18:37.273 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 2.8813 ms
2024-08-15 23:18:37.275 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 12.4729ms
2024-08-15 23:18:37.280 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 26.5529ms
2024-08-15 23:18:37.308 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 53.1517ms
2024-08-15 23:18:37.472 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:18:37.621 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 142.0462 ms
2024-08-15 23:18:37.623 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 150.9493ms
2024-08-15 23:18:37.969 +03:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:18:37.969 +03:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:18:38.052 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:38.055 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:38.486 +03:00 [INF] Received HTTP response headers after 425.9284ms - 200
2024-08-15 23:18:38.488 +03:00 [INF] End processing HTTP request after 439.2707ms - 200
2024-08-15 23:18:38.500 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:38.501 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:38.832 +03:00 [INF] Received HTTP response headers after 329.466ms - 200
2024-08-15 23:18:38.833 +03:00 [INF] End processing HTTP request after 333.6594ms - 200
2024-08-15 23:18:38.835 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:38.836 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.169 +03:00 [INF] Received HTTP response headers after 332.0606ms - 200
2024-08-15 23:18:39.170 +03:00 [INF] End processing HTTP request after 335.4262ms - 200
2024-08-15 23:18:39.172 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.173 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.502 +03:00 [INF] Received HTTP response headers after 327.3724ms - 200
2024-08-15 23:18:39.503 +03:00 [INF] End processing HTTP request after 330.9422ms - 200
2024-08-15 23:18:39.505 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.506 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.818 +03:00 [INF] Received HTTP response headers after 311.8053ms - 200
2024-08-15 23:18:39.820 +03:00 [INF] End processing HTTP request after 315.2075ms - 200
2024-08-15 23:18:39.821 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:39.822 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:40.142 +03:00 [INF] Received HTTP response headers after 318.8759ms - 200
2024-08-15 23:18:40.144 +03:00 [INF] End processing HTTP request after 322.8748ms - 200
2024-08-15 23:18:40.145 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:40.147 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:40.468 +03:00 [INF] Received HTTP response headers after 319.6075ms - 200
2024-08-15 23:18:40.471 +03:00 [INF] End processing HTTP request after 325.2673ms - 200
2024-08-15 23:18:40.472 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:40.473 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:40.790 +03:00 [INF] Received HTTP response headers after 315.7819ms - 200
2024-08-15 23:18:40.793 +03:00 [INF] End processing HTTP request after 321.092ms - 200
2024-08-15 23:18:42.716 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:18:42.746 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:18:42.767 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:18:42.926 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:42.929 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:43.058 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:43.059 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:43.257 +03:00 [INF] Received HTTP response headers after 327.4133ms - 200
2024-08-15 23:18:43.259 +03:00 [INF] End processing HTTP request after 332.9225ms - 200
2024-08-15 23:18:43.341 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:18:47.836 +03:00 [INF] Received HTTP response headers after 4774.9596ms - 200
2024-08-15 23:18:47.841 +03:00 [INF] End processing HTTP request after 4782.7028ms - 200
2024-08-15 23:18:47.860 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:18:48.106 +03:00 [ERR] Failed executing DbCommand (16ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p18='?' (DbType = Guid), @p16='?' (DbType = Int32), @p17='?' (DbType = Decimal), @p19='?' (DbType = Guid), @p20='?' (DbType = Decimal), @p21='?', @p22='?' (DbType = DateTime), @p23='?', @p24='?' (DbType = DateTime), @p25='?', @p26='?' (DbType = Boolean), @p27='?', @p28='?' (DbType = DateTime), @p29='?' (DbType = Guid), @p30='?' (DbType = Int32), @p31='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16, "TotalPurchasePrice" = @p17
WHERE "Id" = @p18;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31);
2024-08-15 23:18:48.148 +03:00 [ERR] An exception occurred in the database while saving changes for context type 'Core.Data.ApplicationDbContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2024-08-15 23:18:48.319 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 5547.2437ms
2024-08-15 23:18:48.323 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:18:48.326 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 5607.0699 ms
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.BuyService.BuyStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyService.cs:line 74
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 50
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:18:48.351 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.BuyService.BuyStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyService.cs:line 74
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 50
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:18:48.368 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 5652.5167ms
2024-08-15 23:18:52.849 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:52.851 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:53.215 +03:00 [INF] Received HTTP response headers after 362.9545ms - 200
2024-08-15 23:18:53.219 +03:00 [INF] End processing HTTP request after 370.1507ms - 200
2024-08-15 23:18:58.225 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:58.226 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:18:58.547 +03:00 [INF] Received HTTP response headers after 320.2669ms - 200
2024-08-15 23:18:58.550 +03:00 [INF] End processing HTTP request after 325.3702ms - 200
2024-08-15 23:20:42.355 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:20:42.443 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:20:42.459 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:20:42.460 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:20:42.460 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:20:42.461 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:20:42.461 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:20:42.462 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:20:42.597 +03:00 [INF] Server desktop-ihebt3k:10232:b88b9b8c successfully announced in 111,2961 ms
2024-08-15 23:20:42.602 +03:00 [INF] Server desktop-ihebt3k:10232:b88b9b8c is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:20:42.928 +03:00 [INF] Server desktop-ihebt3k:10232:b88b9b8c all the dispatchers started
2024-08-15 23:20:43.059 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:20:43.102 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:20:43.103 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:20:43.104 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:20:43.105 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:20:43.105 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:20:43.106 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:20:43.107 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:20:43.115 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:20:43.119 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:20:43.254 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:20:43.255 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:20:43.256 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:20:43.257 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:20:43.258 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:20:43.265 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:20:43.266 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:20:43.267 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:20:43.280 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:20:43.281 +03:00 [INF] Hosting environment: Development
2024-08-15 23:20:43.281 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:20:43.282 +03:00 [INF] Server desktop-ihebt3k:10232:ac6615db successfully announced in 2,1875 ms
2024-08-15 23:20:43.283 +03:00 [INF] Server desktop-ihebt3k:10232:ac6615db is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:20:43.430 +03:00 [INF] Server desktop-ihebt3k:10232:ac6615db all the dispatchers started
2024-08-15 23:20:43.667 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:20:43.859 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 76.7634 ms
2024-08-15 23:20:43.866 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 205.6366ms
2024-08-15 23:20:43.873 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:20:43.874 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:20:43.876 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:20:43.890 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 16.3595ms
2024-08-15 23:20:43.890 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.6234 ms
2024-08-15 23:20:43.896 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 22.1032ms
2024-08-15 23:20:43.926 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 50.9785ms
2024-08-15 23:20:44.141 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:20:44.311 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 164.2067 ms
2024-08-15 23:20:44.313 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 171.767ms
2024-08-15 23:20:45.021 +03:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:20:45.021 +03:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:20:45.127 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:45.131 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:45.580 +03:00 [INF] Received HTTP response headers after 445.55ms - 200
2024-08-15 23:20:45.582 +03:00 [INF] End processing HTTP request after 457.7044ms - 200
2024-08-15 23:20:45.594 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:45.596 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:45.909 +03:00 [INF] Received HTTP response headers after 311.9388ms - 200
2024-08-15 23:20:45.911 +03:00 [INF] End processing HTTP request after 317.0897ms - 200
2024-08-15 23:20:45.913 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:45.913 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.229 +03:00 [INF] Received HTTP response headers after 315.0554ms - 200
2024-08-15 23:20:46.231 +03:00 [INF] End processing HTTP request after 318.085ms - 200
2024-08-15 23:20:46.232 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.234 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.540 +03:00 [INF] Received HTTP response headers after 304.9205ms - 200
2024-08-15 23:20:46.544 +03:00 [INF] End processing HTTP request after 311.751ms - 200
2024-08-15 23:20:46.545 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.546 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.909 +03:00 [INF] Received HTTP response headers after 361.5785ms - 200
2024-08-15 23:20:46.912 +03:00 [INF] End processing HTTP request after 366.6802ms - 200
2024-08-15 23:20:46.914 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:46.915 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:47.256 +03:00 [INF] Received HTTP response headers after 339.7133ms - 200
2024-08-15 23:20:47.258 +03:00 [INF] End processing HTTP request after 344.0035ms - 200
2024-08-15 23:20:47.260 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:47.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:47.581 +03:00 [INF] Received HTTP response headers after 318.0532ms - 200
2024-08-15 23:20:47.582 +03:00 [INF] End processing HTTP request after 321.4159ms - 200
2024-08-15 23:20:47.583 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:47.584 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:47.930 +03:00 [INF] Received HTTP response headers after 344.1423ms - 200
2024-08-15 23:20:47.934 +03:00 [INF] End processing HTTP request after 350.8349ms - 200
2024-08-15 23:20:48.987 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:20:49.017 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:20:49.034 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:20:49.178 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:49.180 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:49.500 +03:00 [INF] Received HTTP response headers after 318.4612ms - 200
2024-08-15 23:20:49.502 +03:00 [INF] End processing HTTP request after 323.743ms - 200
2024-08-15 23:20:49.576 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:20:52.507 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:52.510 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:52.526 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:20:52.776 +03:00 [ERR] Failed executing DbCommand (14ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p18='?' (DbType = Guid), @p16='?' (DbType = Int32), @p17='?' (DbType = Decimal), @p19='?' (DbType = Guid), @p20='?' (DbType = Decimal), @p21='?', @p22='?' (DbType = DateTime), @p23='?', @p24='?' (DbType = DateTime), @p25='?', @p26='?' (DbType = Boolean), @p27='?', @p28='?' (DbType = DateTime), @p29='?' (DbType = Guid), @p30='?' (DbType = Int32), @p31='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16, "TotalPurchasePrice" = @p17
WHERE "Id" = @p18;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31);
2024-08-15 23:20:52.813 +03:00 [ERR] An exception occurred in the database while saving changes for context type 'Core.Data.ApplicationDbContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2024-08-15 23:20:52.846 +03:00 [INF] Received HTTP response headers after 334.8664ms - 200
2024-08-15 23:20:52.847 +03:00 [INF] End processing HTTP request after 340.0991ms - 200
2024-08-15 23:20:52.952 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 3912.3725ms
2024-08-15 23:20:52.954 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:20:52.956 +03:00 [ERR] HTTP POST /api/stocks/buy responded 500 in 3966.0770 ms
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.BuyService.BuyStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyService.cs:line 74
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 50
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:20:52.981 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.BuyService.BuyStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyService.cs:line 74
   at Core.Features.BuyStock.BuyStockHandler.Handle(BuyStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\BuyStock\BuyStockHandler.cs:line 50
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.BuyStock(BuyStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:20:52.999 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 500 null text/plain; charset=utf-8 4012.0522ms
2024-08-15 23:20:57.868 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:57.870 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:20:58.192 +03:00 [INF] Received HTTP response headers after 321.0537ms - 200
2024-08-15 23:20:58.194 +03:00 [INF] End processing HTTP request after 326.3104ms - 200
2024-08-15 23:21:03.210 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:03.211 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:03.531 +03:00 [INF] Received HTTP response headers after 319.7903ms - 200
2024-08-15 23:21:03.534 +03:00 [INF] End processing HTTP request after 324.4513ms - 200
2024-08-15 23:21:08.533 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:08.536 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:08.881 +03:00 [INF] Received HTTP response headers after 343.6199ms - 200
2024-08-15 23:21:08.882 +03:00 [INF] End processing HTTP request after 349.5155ms - 200
2024-08-15 23:21:13.208 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:21:13.223 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:21:13.225 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.226 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.524 +03:00 [INF] Received HTTP response headers after 297.1327ms - 200
2024-08-15 23:21:13.526 +03:00 [INF] End processing HTTP request after 300.6344ms - 200
2024-08-15 23:21:13.527 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.528 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.839 +03:00 [INF] Received HTTP response headers after 309.7153ms - 200
2024-08-15 23:21:13.843 +03:00 [INF] End processing HTTP request after 315.4047ms - 200
2024-08-15 23:21:13.844 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.845 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.886 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:13.888 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.151 +03:00 [INF] Received HTTP response headers after 305.6494ms - 200
2024-08-15 23:21:14.155 +03:00 [INF] End processing HTTP request after 311.8046ms - 200
2024-08-15 23:21:14.157 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.157 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.255 +03:00 [INF] Received HTTP response headers after 366.997ms - 200
2024-08-15 23:21:14.257 +03:00 [INF] End processing HTTP request after 371.1391ms - 200
2024-08-15 23:21:14.467 +03:00 [INF] Received HTTP response headers after 309.064ms - 200
2024-08-15 23:21:14.469 +03:00 [INF] End processing HTTP request after 312.6206ms - 200
2024-08-15 23:21:14.470 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.471 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.788 +03:00 [INF] Received HTTP response headers after 316.8888ms - 200
2024-08-15 23:21:14.790 +03:00 [INF] End processing HTTP request after 320.3399ms - 200
2024-08-15 23:21:14.793 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:14.793 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:15.100 +03:00 [INF] Received HTTP response headers after 305.9882ms - 200
2024-08-15 23:21:15.104 +03:00 [INF] End processing HTTP request after 311.1396ms - 200
2024-08-15 23:21:15.106 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:15.107 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:16.253 +03:00 [INF] Received HTTP response headers after 1145.3731ms - 200
2024-08-15 23:21:16.256 +03:00 [INF] End processing HTTP request after 1149.9563ms - 200
2024-08-15 23:21:16.256 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:16.258 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:16.579 +03:00 [INF] Received HTTP response headers after 320.9287ms - 200
2024-08-15 23:21:16.582 +03:00 [INF] End processing HTTP request after 325.3012ms - 200
2024-08-15 23:21:18.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:18.218 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:18.543 +03:00 [INF] Received HTTP response headers after 324.5816ms - 200
2024-08-15 23:21:18.547 +03:00 [INF] End processing HTTP request after 332.0725ms - 200
2024-08-15 23:21:19.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:19.263 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:20.443 +03:00 [INF] Received HTTP response headers after 1179.6002ms - 200
2024-08-15 23:21:20.444 +03:00 [INF] End processing HTTP request after 1183.4244ms - 200
2024-08-15 23:21:23.558 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:23.561 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:23.868 +03:00 [INF] Received HTTP response headers after 305.1489ms - 200
2024-08-15 23:21:23.871 +03:00 [INF] End processing HTTP request after 312.3512ms - 200
2024-08-15 23:21:25.449 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:25.452 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:25.767 +03:00 [INF] Received HTTP response headers after 313.9098ms - 200
2024-08-15 23:21:25.770 +03:00 [INF] End processing HTTP request after 321.1255ms - 200
2024-08-15 23:21:28.875 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:28.877 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:30.056 +03:00 [INF] Received HTTP response headers after 1178.0565ms - 200
2024-08-15 23:21:30.058 +03:00 [INF] End processing HTTP request after 1183.5042ms - 200
2024-08-15 23:21:30.776 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:30.781 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:31.098 +03:00 [INF] Received HTTP response headers after 316.5777ms - 200
2024-08-15 23:21:31.099 +03:00 [INF] End processing HTTP request after 323.118ms - 200
2024-08-15 23:21:35.056 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:35.058 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:35.371 +03:00 [INF] Received HTTP response headers after 312.2009ms - 200
2024-08-15 23:21:35.374 +03:00 [INF] End processing HTTP request after 317.5153ms - 200
2024-08-15 23:21:36.101 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:36.105 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:36.460 +03:00 [INF] Received HTTP response headers after 354.9939ms - 200
2024-08-15 23:21:36.463 +03:00 [INF] End processing HTTP request after 361.5467ms - 200
2024-08-15 23:21:40.382 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:40.386 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:40.852 +03:00 [INF] Received HTTP response headers after 466.084ms - 200
2024-08-15 23:21:40.855 +03:00 [INF] End processing HTTP request after 472.859ms - 200
2024-08-15 23:21:41.475 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:41.476 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:41.778 +03:00 [INF] Received HTTP response headers after 299.969ms - 200
2024-08-15 23:21:41.779 +03:00 [INF] End processing HTTP request after 303.7169ms - 200
2024-08-15 23:21:45.857 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:45.862 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:46.203 +03:00 [INF] Received HTTP response headers after 340.1283ms - 200
2024-08-15 23:21:46.206 +03:00 [INF] End processing HTTP request after 349.414ms - 200
2024-08-15 23:21:46.785 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:46.788 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:47.129 +03:00 [INF] Received HTTP response headers after 340.1092ms - 200
2024-08-15 23:21:47.132 +03:00 [INF] End processing HTTP request after 347.2574ms - 200
2024-08-15 23:21:51.203 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:51.205 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:51.613 +03:00 [INF] Received HTTP response headers after 406.1429ms - 200
2024-08-15 23:21:51.616 +03:00 [INF] End processing HTTP request after 412.3684ms - 200
2024-08-15 23:21:56.621 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:56.625 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:21:57.009 +03:00 [INF] Received HTTP response headers after 382.7405ms - 200
2024-08-15 23:21:57.010 +03:00 [INF] End processing HTTP request after 388.6058ms - 200
2024-08-15 23:22:02.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:02.020 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:02.340 +03:00 [INF] Received HTTP response headers after 317.7905ms - 200
2024-08-15 23:22:02.343 +03:00 [INF] End processing HTTP request after 324.3183ms - 200
2024-08-15 23:22:07.346 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:07.347 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:07.671 +03:00 [INF] Received HTTP response headers after 322.8338ms - 200
2024-08-15 23:22:07.673 +03:00 [INF] End processing HTTP request after 326.7019ms - 200
2024-08-15 23:22:12.676 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:12.679 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:12.993 +03:00 [INF] Received HTTP response headers after 313.8991ms - 200
2024-08-15 23:22:12.995 +03:00 [INF] End processing HTTP request after 319.0854ms - 200
2024-08-15 23:22:13.313 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:22:13.328 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:22:13.330 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:13.331 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:13.654 +03:00 [INF] Received HTTP response headers after 321.6769ms - 200
2024-08-15 23:22:13.657 +03:00 [INF] End processing HTTP request after 326.2468ms - 200
2024-08-15 23:22:13.658 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:13.659 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:14.811 +03:00 [INF] Received HTTP response headers after 1151.4423ms - 200
2024-08-15 23:22:14.812 +03:00 [INF] End processing HTTP request after 1154.0907ms - 200
2024-08-15 23:22:14.813 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:14.814 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:15.142 +03:00 [INF] Received HTTP response headers after 327.1838ms - 200
2024-08-15 23:22:15.144 +03:00 [INF] End processing HTTP request after 330.9553ms - 200
2024-08-15 23:22:15.145 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:15.146 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:15.482 +03:00 [INF] Received HTTP response headers after 335.3556ms - 200
2024-08-15 23:22:15.485 +03:00 [INF] End processing HTTP request after 340.1558ms - 200
2024-08-15 23:22:15.486 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:15.487 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:16.645 +03:00 [INF] Received HTTP response headers after 1157.5295ms - 200
2024-08-15 23:22:16.647 +03:00 [INF] End processing HTTP request after 1160.3309ms - 200
2024-08-15 23:22:16.648 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:16.649 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:17.010 +03:00 [INF] Received HTTP response headers after 359.7269ms - 200
2024-08-15 23:22:17.011 +03:00 [INF] End processing HTTP request after 362.9923ms - 200
2024-08-15 23:22:17.012 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:17.013 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:17.330 +03:00 [INF] Received HTTP response headers after 316.204ms - 200
2024-08-15 23:22:17.332 +03:00 [INF] End processing HTTP request after 320.3978ms - 200
2024-08-15 23:22:17.334 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:17.335 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:17.644 +03:00 [INF] Received HTTP response headers after 307.5828ms - 200
2024-08-15 23:22:17.645 +03:00 [INF] End processing HTTP request after 311.239ms - 200
2024-08-15 23:22:18.317 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:18.321 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:19.503 +03:00 [INF] Received HTTP response headers after 1180.9992ms - 200
2024-08-15 23:22:19.505 +03:00 [INF] End processing HTTP request after 1188.3547ms - 200
2024-08-15 23:22:24.504 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:24.505 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:24.822 +03:00 [INF] Received HTTP response headers after 315.8756ms - 200
2024-08-15 23:22:24.825 +03:00 [INF] End processing HTTP request after 320.6115ms - 200
2024-08-15 23:22:29.828 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:29.830 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:30.223 +03:00 [INF] Received HTTP response headers after 391.9147ms - 200
2024-08-15 23:22:30.225 +03:00 [INF] End processing HTTP request after 397.3141ms - 200
2024-08-15 23:22:35.230 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:35.231 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:35.576 +03:00 [INF] Received HTTP response headers after 343.9455ms - 200
2024-08-15 23:22:35.577 +03:00 [INF] End processing HTTP request after 347.9073ms - 200
2024-08-15 23:22:40.591 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:40.593 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:40.925 +03:00 [INF] Received HTTP response headers after 330.1756ms - 200
2024-08-15 23:22:40.927 +03:00 [INF] End processing HTTP request after 335.8623ms - 200
2024-08-15 23:22:43.966 +03:00 [ERR] Execution DelayedJobScheduler is in the Failed state now due to an exception, execution will be retried no more than in 00:00:04
Hangfire.PostgreSql.PostgreSqlDistributedLockException: Could not place a lock on the resource 'hangfire:locks:schedulepoller': Lock timeout.
   at Hangfire.PostgreSql.PostgreSqlDistributedLock.LockHandler.Lock(String resource, TimeSpan timeout, IDbConnection connection, PostgreSqlStorageOptions options)
   at Hangfire.PostgreSql.PostgreSqlDistributedLock.Acquire(IDbConnection connection, String resource, TimeSpan timeout, PostgreSqlStorageOptions options)
   at Hangfire.PostgreSql.PostgreSqlConnection.AcquireLock(String resource, TimeSpan timeout)
   at Hangfire.PostgreSql.PostgreSqlConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   at Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 409
   at Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJobs(BackgroundProcessContext context) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 165
   at Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 146
   at Hangfire.Server.BackgroundProcessDispatcherBuilder.ExecuteProcess(Guid executionId, Object state) in C:\projects\hangfire-525\src\Hangfire.Core\Server\BackgroundProcessDispatcherBuilder.cs:line 82
   at Hangfire.Processing.BackgroundExecution.Run(Action`2 callback, Object state) in C:\projects\hangfire-525\src\Hangfire.Core\Processing\BackgroundExecution.cs:line 118
2024-08-15 23:22:44.456 +03:00 [ERR] Execution DelayedJobScheduler is in the Failed state now due to an exception, execution will be retried no more than in 00:00:04
Hangfire.PostgreSql.PostgreSqlDistributedLockException: Could not place a lock on the resource 'hangfire:locks:schedulepoller': Lock timeout.
   at Hangfire.PostgreSql.PostgreSqlDistributedLock.LockHandler.Lock(String resource, TimeSpan timeout, IDbConnection connection, PostgreSqlStorageOptions options)
   at Hangfire.PostgreSql.PostgreSqlDistributedLock.Acquire(IDbConnection connection, String resource, TimeSpan timeout, PostgreSqlStorageOptions options)
   at Hangfire.PostgreSql.PostgreSqlConnection.AcquireLock(String resource, TimeSpan timeout)
   at Hangfire.PostgreSql.PostgreSqlConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   at Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 409
   at Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJobs(BackgroundProcessContext context) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 165
   at Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context) in C:\projects\hangfire-525\src\Hangfire.Core\Server\DelayedJobScheduler.cs:line 146
   at Hangfire.Server.BackgroundProcessDispatcherBuilder.ExecuteProcess(Guid executionId, Object state) in C:\projects\hangfire-525\src\Hangfire.Core\Server\BackgroundProcessDispatcherBuilder.cs:line 82
   at Hangfire.Processing.BackgroundExecution.Run(Action`2 callback, Object state) in C:\projects\hangfire-525\src\Hangfire.Core\Processing\BackgroundExecution.cs:line 118
2024-08-15 23:22:45.929 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:45.932 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:46.270 +03:00 [INF] Received HTTP response headers after 336.97ms - 200
2024-08-15 23:22:46.272 +03:00 [INF] End processing HTTP request after 343.398ms - 200
2024-08-15 23:22:51.284 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:51.287 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:51.660 +03:00 [INF] Received HTTP response headers after 371.3915ms - 200
2024-08-15 23:22:51.663 +03:00 [INF] End processing HTTP request after 379.4208ms - 200
2024-08-15 23:22:56.663 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:56.666 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:22:57.002 +03:00 [INF] Received HTTP response headers after 334.4833ms - 200
2024-08-15 23:22:57.003 +03:00 [INF] End processing HTTP request after 340.0752ms - 200
2024-08-15 23:23:02.013 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:02.015 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:03.152 +03:00 [INF] Received HTTP response headers after 1136.3868ms - 200
2024-08-15 23:23:03.154 +03:00 [INF] End processing HTTP request after 1141.4534ms - 200
2024-08-15 23:23:08.153 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:08.155 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:08.488 +03:00 [INF] Received HTTP response headers after 331.8646ms - 200
2024-08-15 23:23:08.490 +03:00 [INF] End processing HTTP request after 336.7294ms - 200
2024-08-15 23:23:13.389 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:23:13.404 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:23:13.406 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.407 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.489 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.490 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.768 +03:00 [INF] Received HTTP response headers after 360.1049ms - 200
2024-08-15 23:23:13.770 +03:00 [INF] End processing HTTP request after 363.472ms - 200
2024-08-15 23:23:13.770 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.772 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:13.800 +03:00 [INF] Received HTTP response headers after 307.9646ms - 200
2024-08-15 23:23:13.802 +03:00 [INF] End processing HTTP request after 313.1426ms - 200
2024-08-15 23:23:14.960 +03:00 [INF] Received HTTP response headers after 1187.2592ms - 200
2024-08-15 23:23:14.963 +03:00 [INF] End processing HTTP request after 1192.3661ms - 200
2024-08-15 23:23:14.964 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:14.965 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:15.290 +03:00 [INF] Received HTTP response headers after 325.2204ms - 200
2024-08-15 23:23:15.294 +03:00 [INF] End processing HTTP request after 329.9871ms - 200
2024-08-15 23:23:15.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:15.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:15.611 +03:00 [INF] Received HTTP response headers after 313.1719ms - 200
2024-08-15 23:23:15.615 +03:00 [INF] End processing HTTP request after 318.9087ms - 200
2024-08-15 23:23:15.617 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:15.618 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:16.864 +03:00 [INF] Received HTTP response headers after 1244.9086ms - 200
2024-08-15 23:23:16.866 +03:00 [INF] End processing HTTP request after 1249.3402ms - 200
2024-08-15 23:23:16.867 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:16.868 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:17.203 +03:00 [INF] Received HTTP response headers after 334.5416ms - 200
2024-08-15 23:23:17.206 +03:00 [INF] End processing HTTP request after 338.9212ms - 200
2024-08-15 23:23:17.207 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:17.207 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:17.519 +03:00 [INF] Received HTTP response headers after 310.4398ms - 200
2024-08-15 23:23:17.521 +03:00 [INF] End processing HTTP request after 314.4463ms - 200
2024-08-15 23:23:17.522 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:17.524 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:17.848 +03:00 [INF] Received HTTP response headers after 323.0519ms - 200
2024-08-15 23:23:17.850 +03:00 [INF] End processing HTTP request after 327.6094ms - 200
2024-08-15 23:23:18.396 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:18.400 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:19.661 +03:00 [INF] Received HTTP response headers after 1258.9036ms - 200
2024-08-15 23:23:19.664 +03:00 [INF] End processing HTTP request after 1268.2653ms - 200
2024-08-15 23:23:24.663 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:24.666 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:24.988 +03:00 [INF] Received HTTP response headers after 320.387ms - 200
2024-08-15 23:23:24.991 +03:00 [INF] End processing HTTP request after 327.6338ms - 200
2024-08-15 23:23:30.003 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:30.007 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:30.318 +03:00 [INF] Received HTTP response headers after 310.1489ms - 200
2024-08-15 23:23:30.320 +03:00 [INF] End processing HTTP request after 317.1434ms - 200
2024-08-15 23:23:35.328 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:35.332 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:35.662 +03:00 [INF] Received HTTP response headers after 328.8357ms - 200
2024-08-15 23:23:35.664 +03:00 [INF] End processing HTTP request after 335.6219ms - 200
2024-08-15 23:23:40.663 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:40.667 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:40.979 +03:00 [INF] Received HTTP response headers after 311.7716ms - 200
2024-08-15 23:23:40.982 +03:00 [INF] End processing HTTP request after 318.9716ms - 200
2024-08-15 23:23:45.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:45.991 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:46.356 +03:00 [INF] Received HTTP response headers after 364.0385ms - 200
2024-08-15 23:23:46.358 +03:00 [INF] End processing HTTP request after 370.2081ms - 200
2024-08-15 23:23:51.358 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:51.360 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:51.691 +03:00 [INF] Received HTTP response headers after 329.2982ms - 200
2024-08-15 23:23:51.694 +03:00 [INF] End processing HTTP request after 336.1069ms - 200
2024-08-15 23:23:56.699 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:56.702 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:23:57.013 +03:00 [INF] Received HTTP response headers after 309.6064ms - 200
2024-08-15 23:23:57.014 +03:00 [INF] End processing HTTP request after 314.7342ms - 200
2024-08-15 23:24:02.030 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:02.035 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:02.451 +03:00 [INF] Received HTTP response headers after 413.1474ms - 200
2024-08-15 23:24:02.454 +03:00 [INF] End processing HTTP request after 423.1115ms - 200
2024-08-15 23:24:07.456 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:07.458 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:07.768 +03:00 [INF] Received HTTP response headers after 309.1221ms - 200
2024-08-15 23:24:07.770 +03:00 [INF] End processing HTTP request after 314.6835ms - 200
2024-08-15 23:24:12.770 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:12.773 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:13.091 +03:00 [INF] Received HTTP response headers after 317.298ms - 200
2024-08-15 23:24:13.092 +03:00 [INF] End processing HTTP request after 322.2469ms - 200
2024-08-15 23:24:13.503 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:24:13.521 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:24:13.523 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:13.524 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:13.851 +03:00 [INF] Received HTTP response headers after 326.7764ms - 200
2024-08-15 23:24:13.853 +03:00 [INF] End processing HTTP request after 330.4695ms - 200
2024-08-15 23:24:13.854 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:13.855 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.183 +03:00 [INF] Received HTTP response headers after 327.4305ms - 200
2024-08-15 23:24:14.185 +03:00 [INF] End processing HTTP request after 330.9934ms - 200
2024-08-15 23:24:14.187 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.188 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.536 +03:00 [INF] Received HTTP response headers after 347.0724ms - 200
2024-08-15 23:24:14.537 +03:00 [INF] End processing HTTP request after 350.3846ms - 200
2024-08-15 23:24:14.538 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.539 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.877 +03:00 [INF] Received HTTP response headers after 337.0888ms - 200
2024-08-15 23:24:14.880 +03:00 [INF] End processing HTTP request after 341.497ms - 200
2024-08-15 23:24:14.880 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:14.881 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.203 +03:00 [INF] Received HTTP response headers after 320.9185ms - 200
2024-08-15 23:24:15.204 +03:00 [INF] End processing HTTP request after 323.8084ms - 200
2024-08-15 23:24:15.205 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.206 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.549 +03:00 [INF] Received HTTP response headers after 342.5336ms - 200
2024-08-15 23:24:15.552 +03:00 [INF] End processing HTTP request after 346.6571ms - 200
2024-08-15 23:24:15.552 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.553 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.910 +03:00 [INF] Received HTTP response headers after 356.1438ms - 200
2024-08-15 23:24:15.914 +03:00 [INF] End processing HTTP request after 361.457ms - 200
2024-08-15 23:24:15.915 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:15.916 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:17.108 +03:00 [INF] Received HTTP response headers after 1191.6963ms - 200
2024-08-15 23:24:17.111 +03:00 [INF] End processing HTTP request after 1195.5366ms - 200
2024-08-15 23:24:18.511 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:18.514 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:19.675 +03:00 [INF] Received HTTP response headers after 1159.7971ms - 200
2024-08-15 23:24:19.677 +03:00 [INF] End processing HTTP request after 1165.0768ms - 200
2024-08-15 23:24:28.425 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 23:24:28.509 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 23:24:28.524 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:24:28.525 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:24:28.525 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:24:28.526 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:24:28.526 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:24:28.527 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:24:28.654 +03:00 [INF] Server desktop-ihebt3k:7404:3345f6c5 successfully announced in 103,549 ms
2024-08-15 23:24:28.659 +03:00 [INF] Server desktop-ihebt3k:7404:3345f6c5 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:24:28.673 +03:00 [INF] 6 servers were removed due to timeout
2024-08-15 23:24:28.914 +03:00 [INF] Server desktop-ihebt3k:7404:3345f6c5 all the dispatchers started
2024-08-15 23:24:29.043 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 23:24:29.080 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 23:24:29.081 +03:00 [INF] Quartz Scheduler created
2024-08-15 23:24:29.082 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 23:24:29.083 +03:00 [INF] RAMJobStore initialized.
2024-08-15 23:24:29.084 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 23:24:29.084 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 23:24:29.085 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 23:24:29.093 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 23:24:29.096 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 23:24:29.192 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 23:24:29.193 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 23:24:29.194 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 23:24:29.195 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 23:24:29.195 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 23:24:29.195 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 23:24:29.196 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 23:24:29.197 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 23:24:29.208 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 23:24:29.209 +03:00 [INF] Hosting environment: Development
2024-08-15 23:24:29.210 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 23:24:29.211 +03:00 [INF] Server desktop-ihebt3k:7404:30381f45 successfully announced in 2,3234 ms
2024-08-15 23:24:29.212 +03:00 [INF] Server desktop-ihebt3k:7404:30381f45 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 23:24:29.432 +03:00 [INF] Server desktop-ihebt3k:7404:30381f45 all the dispatchers started
2024-08-15 23:24:29.488 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:24:29.647 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 72.0304 ms
2024-08-15 23:24:29.655 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 170.8104ms
2024-08-15 23:24:29.655 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:24:29.657 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:24:29.674 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:24:29.676 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 21.5446ms
2024-08-15 23:24:29.683 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 2.8077 ms
2024-08-15 23:24:29.685 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 11.2599ms
2024-08-15 23:24:29.723 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 66.1616ms
2024-08-15 23:24:29.897 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:24:30.044 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 140.5614 ms
2024-08-15 23:24:30.046 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 148.9122ms
2024-08-15 23:24:33.280 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:24:33.310 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:24:33.326 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:24:33.620 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:33.622 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:34.080 +03:00 [INF] Received HTTP response headers after 455.1875ms - 200
2024-08-15 23:24:34.083 +03:00 [INF] End processing HTTP request after 465.3918ms - 200
2024-08-15 23:24:35.347 +03:00 [INF] Executed DbCommand (14ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:24:38.101 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:24:38.338 +03:00 [INF] Executed DbCommand (7ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p18='?' (DbType = Guid), @p16='?' (DbType = Int32), @p17='?' (DbType = Decimal), @p19='?' (DbType = Guid), @p20='?' (DbType = Decimal), @p21='?', @p22='?' (DbType = DateTime), @p23='?', @p24='?' (DbType = DateTime), @p25='?', @p26='?' (DbType = Boolean), @p27='?', @p28='?' (DbType = DateTime), @p29='?' (DbType = Guid), @p30='?' (DbType = Int32), @p31='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16, "TotalPurchasePrice" = @p17
WHERE "Id" = @p18;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31);
2024-08-15 23:24:38.369 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.BuyStock.BuyStockResponse'.
2024-08-15 23:24:38.380 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 5049.7469ms
2024-08-15 23:24:38.383 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:24:38.384 +03:00 [INF] HTTP POST /api/stocks/buy responded 200 in 5098.5574 ms
2024-08-15 23:24:38.394 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 200 null application/json; charset=utf-8 5113.3836ms
2024-08-15 23:24:49.294 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:24:49.300 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:24:49.307 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:24:49.396 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:24:49.404 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:49.405 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:49.737 +03:00 [INF] Received HTTP response headers after 331.2851ms - 200
2024-08-15 23:24:49.738 +03:00 [INF] End processing HTTP request after 333.9341ms - 200
2024-08-15 23:24:49.743 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.ShowPortfolio.ShowPortfolioResponse'.
2024-08-15 23:24:49.751 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 442.5574ms
2024-08-15 23:24:49.753 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:24:49.754 +03:00 [INF] HTTP GET /api/stocks/portfolio responded 200 in 456.8939 ms
2024-08-15 23:24:49.756 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 200 null application/json; charset=utf-8 461.9965ms
2024-08-15 23:24:52.570 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/buy - application/json 96
2024-08-15 23:24:52.574 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:24:52.576 +03:00 [INF] Route matched with {action = "BuyStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BuyStock(Core.Features.BuyStock.BuyStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:24:52.581 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:52.582 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:24:52.904 +03:00 [INF] Received HTTP response headers after 321.067ms - 200
2024-08-15 23:24:52.907 +03:00 [INF] End processing HTTP request after 325.5126ms - 200
2024-08-15 23:24:52.960 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:24:56.596 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:24:56.604 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p18='?' (DbType = Guid), @p16='?' (DbType = Int32), @p17='?' (DbType = Decimal), @p19='?' (DbType = Guid), @p20='?' (DbType = Decimal), @p21='?', @p22='?' (DbType = DateTime), @p23='?', @p24='?' (DbType = DateTime), @p25='?', @p26='?' (DbType = Boolean), @p27='?', @p28='?' (DbType = DateTime), @p29='?' (DbType = Guid), @p30='?' (DbType = Int32), @p31='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16, "TotalPurchasePrice" = @p17
WHERE "Id" = @p18;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31);
2024-08-15 23:24:56.608 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.BuyStock.BuyStockResponse'.
2024-08-15 23:24:56.609 +03:00 [INF] Executed action API.Controllers.StockController.BuyStock (API) in 4031.7477ms
2024-08-15 23:24:56.610 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.BuyStock (API)'
2024-08-15 23:24:56.611 +03:00 [INF] HTTP POST /api/stocks/buy responded 200 in 4036.4566 ms
2024-08-15 23:24:56.612 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/buy - 200 null application/json; charset=utf-8 4041.9652ms
2024-08-15 23:25:03.311 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:25:03.314 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:03.317 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:03.326 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:25:03.330 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:03.331 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:03.642 +03:00 [INF] Received HTTP response headers after 309.4171ms - 200
2024-08-15 23:25:03.645 +03:00 [INF] End processing HTTP request after 314.1784ms - 200
2024-08-15 23:25:03.646 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.ShowPortfolio.ShowPortfolioResponse'.
2024-08-15 23:25:03.647 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 328.064ms
2024-08-15 23:25:03.650 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:03.651 +03:00 [INF] HTTP GET /api/stocks/portfolio responded 200 in 336.8550 ms
2024-08-15 23:25:03.653 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 200 null application/json; charset=utf-8 342.5043ms
2024-08-15 23:25:08.705 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/sell - application/json 96
2024-08-15 23:25:08.707 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:08.712 +03:00 [INF] Route matched with {action = "SellStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] SellStock(Core.Features.SellStock.SellStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:08.723 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:08.724 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:09.072 +03:00 [INF] Received HTTP response headers after 347.0337ms - 200
2024-08-15 23:25:09.075 +03:00 [INF] End processing HTTP request after 352.1147ms - 200
2024-08-15 23:25:09.080 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:25:09.087 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:25:09.100 +03:00 [ERR] Failed executing DbCommand (9ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p17='?' (DbType = Guid), @p16='?' (DbType = Int32), @p18='?' (DbType = Guid), @p19='?' (DbType = Decimal), @p20='?', @p21='?' (DbType = DateTime), @p22='?', @p23='?' (DbType = DateTime), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?' (DbType = DateTime), @p28='?' (DbType = Guid), @p29='?' (DbType = Int32), @p30='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16
WHERE "Id" = @p17;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
2024-08-15 23:25:09.132 +03:00 [ERR] An exception occurred in the database while saving changes for context type 'Core.Data.ApplicationDbContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2024-08-15 23:25:09.253 +03:00 [INF] Executed action API.Controllers.StockController.SellStock (API) in 539.1634ms
2024-08-15 23:25:09.254 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:09.256 +03:00 [ERR] HTTP POST /api/stocks/sell responded 500 in 548.2941 ms
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.SellService.SellStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellService.cs:line 64
   at Core.Features.SellStock.SellStockHandler.Handle(SellStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellStock\SellStockHandler.cs:line 54
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.SellStock(SellStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 50
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:25:09.282 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.SellService.SellStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellService.cs:line 64
   at Core.Features.SellStock.SellStockHandler.Handle(SellStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellStock\SellStockHandler.cs:line 54
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.SellStock(SellStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 50
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:25:09.299 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/sell - 500 null text/plain; charset=utf-8 594.4886ms
2024-08-15 23:25:14.183 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:25:14.184 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:25:14.216 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:14.218 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:14.531 +03:00 [INF] Received HTTP response headers after 311.9242ms - 200
2024-08-15 23:25:14.533 +03:00 [INF] End processing HTTP request after 317.1098ms - 200
2024-08-15 23:25:14.535 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:14.536 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:14.859 +03:00 [INF] Received HTTP response headers after 322.3837ms - 200
2024-08-15 23:25:14.862 +03:00 [INF] End processing HTTP request after 326.9529ms - 200
2024-08-15 23:25:14.863 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:14.865 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.174 +03:00 [INF] Received HTTP response headers after 309.2156ms - 200
2024-08-15 23:25:15.177 +03:00 [INF] End processing HTTP request after 313.9467ms - 200
2024-08-15 23:25:15.180 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.181 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.502 +03:00 [INF] Received HTTP response headers after 319.6921ms - 200
2024-08-15 23:25:15.504 +03:00 [INF] End processing HTTP request after 324.1081ms - 200
2024-08-15 23:25:15.505 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.506 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.852 +03:00 [INF] Received HTTP response headers after 344.375ms - 200
2024-08-15 23:25:15.856 +03:00 [INF] End processing HTTP request after 350.8984ms - 200
2024-08-15 23:25:15.859 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:15.862 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:16.209 +03:00 [INF] Received HTTP response headers after 344.7181ms - 200
2024-08-15 23:25:16.210 +03:00 [INF] End processing HTTP request after 351.2595ms - 200
2024-08-15 23:25:16.211 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:16.212 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:16.547 +03:00 [INF] Received HTTP response headers after 333.4662ms - 200
2024-08-15 23:25:16.550 +03:00 [INF] End processing HTTP request after 338.9234ms - 200
2024-08-15 23:25:16.552 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:16.553 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:16.893 +03:00 [INF] Received HTTP response headers after 339.2506ms - 200
2024-08-15 23:25:16.895 +03:00 [INF] End processing HTTP request after 343.7597ms - 200
2024-08-15 23:25:19.211 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:19.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:19.539 +03:00 [INF] Received HTTP response headers after 321.8286ms - 200
2024-08-15 23:25:19.542 +03:00 [INF] End processing HTTP request after 331.305ms - 200
2024-08-15 23:25:21.141 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/sell - application/json 96
2024-08-15 23:25:21.144 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:21.147 +03:00 [INF] Route matched with {action = "SellStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] SellStock(Core.Features.SellStock.SellStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:21.150 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:21.151 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:21.486 +03:00 [INF] Received HTTP response headers after 332.9308ms - 200
2024-08-15 23:25:21.488 +03:00 [INF] End processing HTTP request after 338.0554ms - 200
2024-08-15 23:25:21.492 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:25:21.498 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:25:21.507 +03:00 [ERR] Failed executing DbCommand (5ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p17='?' (DbType = Guid), @p16='?' (DbType = Int32), @p18='?' (DbType = Guid), @p19='?' (DbType = Decimal), @p20='?', @p21='?' (DbType = DateTime), @p22='?', @p23='?' (DbType = DateTime), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?' (DbType = DateTime), @p28='?' (DbType = Guid), @p29='?' (DbType = Int32), @p30='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16
WHERE "Id" = @p17;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
2024-08-15 23:25:21.516 +03:00 [ERR] An exception occurred in the database while saving changes for context type 'Core.Data.ApplicationDbContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2024-08-15 23:25:21.631 +03:00 [INF] Executed action API.Controllers.StockController.SellStock (API) in 482.7986ms
2024-08-15 23:25:21.633 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:21.635 +03:00 [ERR] HTTP POST /api/stocks/sell responded 500 in 490.4298 ms
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.SellService.SellStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellService.cs:line 64
   at Core.Features.SellStock.SellStockHandler.Handle(SellStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellStock\SellStockHandler.cs:line 54
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.SellStock(SellStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 50
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:25:21.648 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "StockHoldingItems" violates foreign key constraint "FK_StockHoldingItems_OrderProcesses_OrderProcessId"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: StockHoldingItems
    ConstraintName: FK_StockHoldingItems_OrderProcesses_OrderProcessId
    File: ri_triggers.c
    Line: 2608
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Core.Features.SellService.SellStockAsync(AppUser user, String stockSymbol, Int32 quantity, Decimal price, Guid orderProcessId) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellService.cs:line 64
   at Core.Features.SellStock.SellStockHandler.Handle(SellStockCommand request, CancellationToken cancellationToken) in C:\Users\KC\source\repos\StockFlow\Core\Features\SellStock\SellStockHandler.cs:line 54
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.SellStock(SellStockRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 50
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:25:21.663 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/sell - 500 null text/plain; charset=utf-8 521.7637ms
2024-08-15 23:25:24.557 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:24.560 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:25.102 +03:00 [INF] Received HTTP response headers after 541.9174ms - 200
2024-08-15 23:25:25.104 +03:00 [INF] End processing HTTP request after 547.564ms - 200
2024-08-15 23:25:25.916 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 23:25:25.923 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 0.5999 ms
2024-08-15 23:25:25.925 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 9.2528ms
2024-08-15 23:25:25.943 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 23:25:25.945 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_vs/browserLink - null null
2024-08-15 23:25:25.945 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 23:25:25.946 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 0.3305 ms
2024-08-15 23:25:25.951 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13742 application/javascript; charset=utf-8 5.168ms
2024-08-15 23:25:25.960 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 16.4719ms
2024-08-15 23:25:25.977 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_vs/browserLink - 200 null text/javascript; charset=UTF-8 32.1804ms
2024-08-15 23:25:26.146 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 23:25:26.164 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 13.3431 ms
2024-08-15 23:25:26.167 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 20.7681ms
2024-08-15 23:25:29.726 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:25:29.730 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:29.734 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:29.744 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:25:29.747 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:29.748 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:30.088 +03:00 [INF] Received HTTP response headers after 339.6386ms - 200
2024-08-15 23:25:30.091 +03:00 [INF] End processing HTTP request after 343.4117ms - 200
2024-08-15 23:25:30.094 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.ShowPortfolio.ShowPortfolioResponse'.
2024-08-15 23:25:30.100 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 362.6459ms
2024-08-15 23:25:30.103 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:30.104 +03:00 [INF] HTTP GET /api/stocks/portfolio responded 200 in 374.7836 ms
2024-08-15 23:25:30.106 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:30.107 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 200 null application/json; charset=utf-8 381.8284ms
2024-08-15 23:25:30.108 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:30.523 +03:00 [INF] Received HTTP response headers after 410.5211ms - 200
2024-08-15 23:25:30.526 +03:00 [INF] End processing HTTP request after 420.056ms - 200
2024-08-15 23:25:35.529 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:35.531 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:35.838 +03:00 [INF] Received HTTP response headers after 305.8214ms - 200
2024-08-15 23:25:35.840 +03:00 [INF] End processing HTTP request after 310.9689ms - 200
2024-08-15 23:25:38.803 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/stocks/sell - application/json 96
2024-08-15 23:25:38.809 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:38.813 +03:00 [INF] Route matched with {action = "SellStock", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] SellStock(Core.Features.SellStock.SellStockRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:38.818 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:38.819 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:39.133 +03:00 [INF] Received HTTP response headers after 313.2738ms - 200
2024-08-15 23:25:39.134 +03:00 [INF] End processing HTTP request after 316.4794ms - 200
2024-08-15 23:25:39.140 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:25:39.146 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:25:39.151 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p17='?' (DbType = Guid), @p16='?' (DbType = Int32), @p18='?' (DbType = Guid), @p19='?' (DbType = Decimal), @p20='?', @p21='?' (DbType = DateTime), @p22='?', @p23='?' (DbType = DateTime), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?' (DbType = DateTime), @p28='?' (DbType = Guid), @p29='?' (DbType = Int32), @p30='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16
WHERE "Id" = @p17;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
2024-08-15 23:25:39.155 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.SellStock.SellStockResponse'.
2024-08-15 23:25:39.158 +03:00 [INF] Executed action API.Controllers.StockController.SellStock (API) in 343.3247ms
2024-08-15 23:25:39.159 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.SellStock (API)'
2024-08-15 23:25:39.160 +03:00 [INF] HTTP POST /api/stocks/sell responded 200 in 352.9793 ms
2024-08-15 23:25:39.161 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/stocks/sell - 200 null application/json; charset=utf-8 358.1563ms
2024-08-15 23:25:40.848 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:40.849 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:41.169 +03:00 [INF] Received HTTP response headers after 319.1634ms - 200
2024-08-15 23:25:41.171 +03:00 [INF] End processing HTTP request after 322.6976ms - 200
2024-08-15 23:25:44.591 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:25:44.594 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:44.595 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:25:44.602 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:25:44.604 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:44.605 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:44.931 +03:00 [INF] Received HTTP response headers after 324.8036ms - 200
2024-08-15 23:25:44.933 +03:00 [INF] End processing HTTP request after 328.1455ms - 200
2024-08-15 23:25:44.933 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.ShowPortfolio.ShowPortfolioResponse'.
2024-08-15 23:25:44.935 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 337.8664ms
2024-08-15 23:25:44.936 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:25:44.937 +03:00 [INF] HTTP GET /api/stocks/portfolio responded 200 in 343.0698 ms
2024-08-15 23:25:44.938 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 200 null application/json; charset=utf-8 346.94ms
2024-08-15 23:25:46.177 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:46.180 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:46.498 +03:00 [INF] Received HTTP response headers after 317.3077ms - 200
2024-08-15 23:25:46.500 +03:00 [INF] End processing HTTP request after 322.8924ms - 200
2024-08-15 23:25:51.493 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:51.494 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:51.868 +03:00 [INF] Received HTTP response headers after 372.1329ms - 200
2024-08-15 23:25:51.870 +03:00 [INF] End processing HTTP request after 376.2546ms - 200
2024-08-15 23:25:56.873 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:56.877 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:57.199 +03:00 [INF] Received HTTP response headers after 320.4224ms - 200
2024-08-15 23:25:57.202 +03:00 [INF] End processing HTTP request after 329.16ms - 200
2024-08-15 23:25:59.197 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/orders/place - application/json 137
2024-08-15 23:25:59.203 +03:00 [INF] Executing endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 23:25:59.208 +03:00 [INF] Route matched with {action = "PlaceOrder", controller = "Order"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PlaceOrder(Core.Features.GiveOrder.GiveOrderRequest) on controller API.Controllers.OrderController (API).
2024-08-15 23:25:59.246 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:25:59.252 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:59.253 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:25:59.556 +03:00 [INF] Received HTTP response headers after 301.6504ms - 200
2024-08-15 23:25:59.557 +03:00 [INF] End processing HTTP request after 305.4546ms - 200
2024-08-15 23:25:59.561 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__user_Id_0='?' (DbType = Guid), @__stockSymbol_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM "StockHoldings" AS s
WHERE s."UserId" = @__user_Id_0 AND s."StockSymbol" = @__stockSymbol_1
LIMIT 1
2024-08-15 23:25:59.565 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?', @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?' (DbType = Int32), @p13='?', @p14='?' (DbType = Int32), @p15='?' (DbType = Decimal), @p18='?' (DbType = Guid), @p16='?' (DbType = Int32), @p17='?' (DbType = Decimal), @p19='?' (DbType = Guid), @p20='?' (DbType = Decimal), @p21='?', @p22='?' (DbType = DateTime), @p23='?', @p24='?' (DbType = DateTime), @p25='?', @p26='?' (DbType = Boolean), @p27='?', @p28='?' (DbType = DateTime), @p29='?' (DbType = Guid), @p30='?' (DbType = Int32), @p31='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "StockHoldingItems" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderProcessId", "Quantity", "StockSymbol", "Type", "UnitPrice")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
UPDATE "StockHoldings" SET "Quantity" = @p16, "TotalPurchasePrice" = @p17
WHERE "Id" = @p18;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31);
2024-08-15 23:25:59.570 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.GiveOrder.OrderResponse'.
2024-08-15 23:25:59.574 +03:00 [INF] Executed action API.Controllers.OrderController.PlaceOrder (API) in 363.5109ms
2024-08-15 23:25:59.575 +03:00 [INF] Executed endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 23:25:59.576 +03:00 [INF] HTTP POST /api/orders/place responded 200 in 373.8166 ms
2024-08-15 23:25:59.577 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/orders/place - 200 null application/json; charset=utf-8 380.8153ms
2024-08-15 23:26:02.205 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:02.208 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:02.543 +03:00 [INF] Received HTTP response headers after 333.7896ms - 200
2024-08-15 23:26:02.544 +03:00 [INF] End processing HTTP request after 338.752ms - 200
2024-08-15 23:26:05.292 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/orders/place - application/json 134
2024-08-15 23:26:05.296 +03:00 [INF] Executing endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 23:26:05.297 +03:00 [INF] Route matched with {action = "PlaceOrder", controller = "Order"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PlaceOrder(Core.Features.GiveOrder.GiveOrderRequest) on controller API.Controllers.OrderController (API).
2024-08-15 23:26:05.305 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 23:26:05.310 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:05.311 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:05.635 +03:00 [INF] Received HTTP response headers after 322.9796ms - 200
2024-08-15 23:26:05.637 +03:00 [INF] End processing HTTP request after 327.2935ms - 200
2024-08-15 23:26:05.653 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32), @p10='?', @p11='?' (DbType = Decimal), @p12='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderType", "Quantity", "StockSymbol", "TargetPrice", "UserId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12);
2024-08-15 23:26:05.669 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderProcesses" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)
RETURNING "Status";
2024-08-15 23:26:05.679 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.GiveOrder.OrderResponse'.
2024-08-15 23:26:05.681 +03:00 [INF] Executed action API.Controllers.OrderController.PlaceOrder (API) in 381.8438ms
2024-08-15 23:26:05.682 +03:00 [INF] Executed endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 23:26:05.683 +03:00 [INF] HTTP POST /api/orders/place responded 200 in 387.7432 ms
2024-08-15 23:26:05.685 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/orders/place - 200 null application/json; charset=utf-8 393.0138ms
2024-08-15 23:26:07.559 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:07.562 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:07.896 +03:00 [INF] Received HTTP response headers after 332.6899ms - 200
2024-08-15 23:26:07.899 +03:00 [INF] End processing HTTP request after 339.3922ms - 200
2024-08-15 23:26:12.904 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:12.907 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:13.243 +03:00 [INF] Received HTTP response headers after 334.7121ms - 200
2024-08-15 23:26:13.245 +03:00 [INF] End processing HTTP request after 341.0597ms - 200
2024-08-15 23:26:14.261 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:14.276 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:14.278 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:14.279 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:14.617 +03:00 [INF] Received HTTP response headers after 337.173ms - 200
2024-08-15 23:26:14.619 +03:00 [INF] End processing HTTP request after 341.6414ms - 200
2024-08-15 23:26:14.620 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:14.621 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:14.950 +03:00 [INF] Received HTTP response headers after 328.4599ms - 200
2024-08-15 23:26:14.952 +03:00 [INF] End processing HTTP request after 331.7687ms - 200
2024-08-15 23:26:14.953 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:14.954 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.295 +03:00 [INF] Received HTTP response headers after 340.2642ms - 200
2024-08-15 23:26:15.296 +03:00 [INF] End processing HTTP request after 342.5306ms - 200
2024-08-15 23:26:15.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.620 +03:00 [INF] Received HTTP response headers after 321.4166ms - 200
2024-08-15 23:26:15.621 +03:00 [INF] End processing HTTP request after 324.5548ms - 200
2024-08-15 23:26:15.622 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.623 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.959 +03:00 [INF] Received HTTP response headers after 334.4773ms - 200
2024-08-15 23:26:15.960 +03:00 [INF] End processing HTTP request after 338.074ms - 200
2024-08-15 23:26:15.961 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.962 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:15.992 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.001 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.003 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.004 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.010 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.012 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.013 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.020 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.029 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.041 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.043 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.044 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.050 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.060 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.062 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.063 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.074 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.083 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.093 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.103 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.114 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.124 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.133 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.135 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.136 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.143 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.153 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.164 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.174 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:16.176 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.177 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.186 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:16.278 +03:00 [INF] Received HTTP response headers after 315.3804ms - 200
2024-08-15 23:26:16.279 +03:00 [INF] End processing HTTP request after 317.8937ms - 200
2024-08-15 23:26:16.280 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.281 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.393 +03:00 [INF] Received HTTP response headers after 348.2176ms - 200
2024-08-15 23:26:16.394 +03:00 [INF] End processing HTTP request after 351.0139ms - 200
2024-08-15 23:26:16.395 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.396 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.399 +03:00 [INF] Received HTTP response headers after 393.8312ms - 200
2024-08-15 23:26:16.400 +03:00 [INF] End processing HTTP request after 396.9238ms - 200
2024-08-15 23:26:16.401 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.402 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.404 +03:00 [INF] Received HTTP response headers after 389.7209ms - 200
2024-08-15 23:26:16.405 +03:00 [INF] End processing HTTP request after 393.0943ms - 200
2024-08-15 23:26:16.406 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.407 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.482 +03:00 [INF] Received HTTP response headers after 345.0083ms - 200
2024-08-15 23:26:16.483 +03:00 [INF] End processing HTTP request after 347.9508ms - 200
2024-08-15 23:26:16.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.485 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.529 +03:00 [INF] Received HTTP response headers after 350.5584ms - 200
2024-08-15 23:26:16.530 +03:00 [INF] End processing HTTP request after 353.5824ms - 200
2024-08-15 23:26:16.531 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.532 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.601 +03:00 [INF] Received HTTP response headers after 318.4675ms - 200
2024-08-15 23:26:16.603 +03:00 [INF] End processing HTTP request after 322.3222ms - 200
2024-08-15 23:26:16.605 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.606 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.733 +03:00 [INF] Received HTTP response headers after 336.5864ms - 200
2024-08-15 23:26:16.736 +03:00 [INF] End processing HTTP request after 340.8175ms - 200
2024-08-15 23:26:16.737 +03:00 [INF] Received HTTP response headers after 328.9005ms - 200
2024-08-15 23:26:16.737 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.738 +03:00 [INF] End processing HTTP request after 331.9242ms - 200
2024-08-15 23:26:16.739 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.739 +03:00 [INF] Received HTTP response headers after 336.1613ms - 200
2024-08-15 23:26:16.740 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.742 +03:00 [INF] End processing HTTP request after 341.0242ms - 200
2024-08-15 23:26:16.743 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.744 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.746 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.822 +03:00 [INF] Received HTTP response headers after 336.5869ms - 200
2024-08-15 23:26:16.823 +03:00 [INF] End processing HTTP request after 339.819ms - 200
2024-08-15 23:26:16.824 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.825 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.842 +03:00 [INF] Received HTTP response headers after 309.8711ms - 200
2024-08-15 23:26:16.844 +03:00 [INF] End processing HTTP request after 312.9114ms - 200
2024-08-15 23:26:16.844 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.845 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.927 +03:00 [INF] Received HTTP response headers after 320.1496ms - 200
2024-08-15 23:26:16.929 +03:00 [INF] End processing HTTP request after 323.5845ms - 200
2024-08-15 23:26:16.930 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:16.931 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.115 +03:00 [INF] Received HTTP response headers after 374.6562ms - 200
2024-08-15 23:26:17.116 +03:00 [INF] Received HTTP response headers after 368.7068ms - 200
2024-08-15 23:26:17.117 +03:00 [INF] End processing HTTP request after 379.6462ms - 200
2024-08-15 23:26:17.118 +03:00 [INF] End processing HTTP request after 374.3235ms - 200
2024-08-15 23:26:17.119 +03:00 [INF] Received HTTP response headers after 374.4514ms - 200
2024-08-15 23:26:17.120 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.121 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.122 +03:00 [INF] End processing HTTP request after 381.9187ms - 200
2024-08-15 23:26:17.122 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.123 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.124 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.128 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.151 +03:00 [INF] Received HTTP response headers after 325.1877ms - 200
2024-08-15 23:26:17.152 +03:00 [INF] End processing HTTP request after 327.4984ms - 200
2024-08-15 23:26:17.153 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.154 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.182 +03:00 [INF] Received HTTP response headers after 336.5505ms - 200
2024-08-15 23:26:17.185 +03:00 [INF] End processing HTTP request after 340.9287ms - 200
2024-08-15 23:26:17.186 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.188 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.239 +03:00 [INF] Received HTTP response headers after 1174.2759ms - 200
2024-08-15 23:26:17.240 +03:00 [INF] End processing HTTP request after 1177.3286ms - 200
2024-08-15 23:26:17.240 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.241 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.416 +03:00 [INF] Received HTTP response headers after 483.6485ms - 200
2024-08-15 23:26:17.418 +03:00 [INF] End processing HTTP request after 488.214ms - 200
2024-08-15 23:26:17.464 +03:00 [INF] Received HTTP response headers after 338.1149ms - 200
2024-08-15 23:26:17.466 +03:00 [INF] End processing HTTP request after 344.904ms - 200
2024-08-15 23:26:17.467 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.468 +03:00 [INF] Received HTTP response headers after 313.3208ms - 200
2024-08-15 23:26:17.469 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.469 +03:00 [INF] End processing HTTP request after 316.168ms - 200
2024-08-15 23:26:17.472 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.473 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.482 +03:00 [INF] Received HTTP response headers after 357.6073ms - 200
2024-08-15 23:26:17.483 +03:00 [INF] End processing HTTP request after 362.6825ms - 200
2024-08-15 23:26:17.483 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.484 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.488 +03:00 [INF] Received HTTP response headers after 359.2393ms - 200
2024-08-15 23:26:17.489 +03:00 [INF] End processing HTTP request after 364.9987ms - 200
2024-08-15 23:26:17.489 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.490 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.554 +03:00 [INF] Received HTTP response headers after 364.9223ms - 200
2024-08-15 23:26:17.556 +03:00 [INF] End processing HTTP request after 369.7637ms - 200
2024-08-15 23:26:17.558 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.559 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.599 +03:00 [INF] Received HTTP response headers after 357.0405ms - 200
2024-08-15 23:26:17.601 +03:00 [INF] End processing HTTP request after 360.5211ms - 200
2024-08-15 23:26:17.603 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.604 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.803 +03:00 [INF] Received HTTP response headers after 332.9838ms - 200
2024-08-15 23:26:17.807 +03:00 [INF] End processing HTTP request after 339.3641ms - 200
2024-08-15 23:26:17.808 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.809 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.823 +03:00 [INF] Received HTTP response headers after 349.1162ms - 200
2024-08-15 23:26:17.823 +03:00 [INF] End processing HTTP request after 351.5009ms - 200
2024-08-15 23:26:17.824 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.825 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.832 +03:00 [INF] Received HTTP response headers after 347.517ms - 200
2024-08-15 23:26:17.833 +03:00 [INF] End processing HTTP request after 350.038ms - 200
2024-08-15 23:26:17.834 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.836 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.854 +03:00 [INF] Received HTTP response headers after 362.7886ms - 200
2024-08-15 23:26:17.855 +03:00 [INF] End processing HTTP request after 365.0698ms - 200
2024-08-15 23:26:17.856 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.856 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.931 +03:00 [INF] Received HTTP response headers after 326.3152ms - 200
2024-08-15 23:26:17.931 +03:00 [INF] Received HTTP response headers after 370.6238ms - 200
2024-08-15 23:26:17.934 +03:00 [INF] End processing HTTP request after 330.931ms - 200
2024-08-15 23:26:17.934 +03:00 [INF] End processing HTTP request after 376.1916ms - 200
2024-08-15 23:26:17.935 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.936 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.936 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:17.937 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.117 +03:00 [INF] Received HTTP response headers after 307.414ms - 200
2024-08-15 23:26:18.119 +03:00 [INF] End processing HTTP request after 311.2037ms - 200
2024-08-15 23:26:18.120 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.121 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.188 +03:00 [INF] Received HTTP response headers after 351.3989ms - 200
2024-08-15 23:26:18.190 +03:00 [INF] End processing HTTP request after 355.3667ms - 200
2024-08-15 23:26:18.191 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.192 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.194 +03:00 [INF] Received HTTP response headers after 336.4413ms - 200
2024-08-15 23:26:18.195 +03:00 [INF] End processing HTTP request after 339.471ms - 200
2024-08-15 23:26:18.196 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.196 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.245 +03:00 [INF] Received HTTP response headers after 307.2217ms - 200
2024-08-15 23:26:18.247 +03:00 [INF] End processing HTTP request after 312.2235ms - 200
2024-08-15 23:26:18.248 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.249 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.260 +03:00 [INF] Received HTTP response headers after 320.0976ms - 200
2024-08-15 23:26:18.261 +03:00 [INF] End processing HTTP request after 325.2178ms - 200
2024-08-15 23:26:18.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.450 +03:00 [INF] Received HTTP response headers after 328.6421ms - 200
2024-08-15 23:26:18.452 +03:00 [INF] End processing HTTP request after 331.3061ms - 200
2024-08-15 23:26:18.453 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.453 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.501 +03:00 [INF] Received HTTP response headers after 308.1467ms - 200
2024-08-15 23:26:18.502 +03:00 [INF] End processing HTTP request after 310.7356ms - 200
2024-08-15 23:26:18.504 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.505 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.539 +03:00 [INF] Received HTTP response headers after 342.1189ms - 200
2024-08-15 23:26:18.541 +03:00 [INF] End processing HTTP request after 345.6075ms - 200
2024-08-15 23:26:18.542 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.544 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.577 +03:00 [INF] Received HTTP response headers after 327.8932ms - 200
2024-08-15 23:26:18.578 +03:00 [INF] Received HTTP response headers after 314.8217ms - 200
2024-08-15 23:26:18.580 +03:00 [INF] End processing HTTP request after 332.0216ms - 200
2024-08-15 23:26:18.581 +03:00 [INF] End processing HTTP request after 319.4648ms - 200
2024-08-15 23:26:18.582 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.583 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.584 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.585 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.698 +03:00 [INF] Received HTTP response headers after 872.7492ms - 200
2024-08-15 23:26:18.700 +03:00 [INF] End processing HTTP request after 876.1448ms - 200
2024-08-15 23:26:18.702 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.703 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.776 +03:00 [INF] Received HTTP response headers after 322.2417ms - 200
2024-08-15 23:26:18.779 +03:00 [INF] End processing HTTP request after 326.5454ms - 200
2024-08-15 23:26:18.780 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.781 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.822 +03:00 [INF] Received HTTP response headers after 316.662ms - 200
2024-08-15 23:26:18.824 +03:00 [INF] End processing HTTP request after 320.1306ms - 200
2024-08-15 23:26:18.825 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.826 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.874 +03:00 [INF] Received HTTP response headers after 329.3355ms - 200
2024-08-15 23:26:18.876 +03:00 [INF] End processing HTTP request after 334.0219ms - 200
2024-08-15 23:26:18.878 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.879 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.895 +03:00 [INF] Received HTTP response headers after 309.334ms - 200
2024-08-15 23:26:18.897 +03:00 [INF] End processing HTTP request after 314.5949ms - 200
2024-08-15 23:26:18.897 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.898 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.910 +03:00 [INF] Received HTTP response headers after 322.7643ms - 200
2024-08-15 23:26:18.911 +03:00 [INF] End processing HTTP request after 328.101ms - 200
2024-08-15 23:26:18.912 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:18.913 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:19.011 +03:00 [INF] Received HTTP response headers after 307.1634ms - 429
2024-08-15 23:26:19.014 +03:00 [INF] End processing HTTP request after 312.8144ms - 429
2024-08-15 23:26:19.088 +03:00 [WRN] Failed to process the job '1010': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.097 +03:00 [INF] Received HTTP response headers after 314.9293ms - 429
2024-08-15 23:26:19.099 +03:00 [INF] End processing HTTP request after 318.4389ms - 429
2024-08-15 23:26:19.145 +03:00 [INF] Received HTTP response headers after 318.1271ms - 429
2024-08-15 23:26:19.146 +03:00 [INF] End processing HTTP request after 320.8565ms - 429
2024-08-15 23:26:19.168 +03:00 [WRN] Failed to process the job '1004': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.193 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.201 +03:00 [WRN] Failed to process the job '1020': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.214 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.223 +03:00 [INF] Received HTTP response headers after 343.4045ms - 429
2024-08-15 23:26:19.224 +03:00 [INF] Received HTTP response headers after 325.1498ms - 429
2024-08-15 23:26:19.224 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.224 +03:00 [INF] End processing HTTP request after 346.7744ms - 429
2024-08-15 23:26:19.225 +03:00 [INF] End processing HTTP request after 327.8281ms - 429
2024-08-15 23:26:19.268 +03:00 [INF] Received HTTP response headers after 354.6566ms - 429
2024-08-15 23:26:19.268 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:19.335 +03:00 [INF] End processing HTTP request after 422.7882ms - 429
2024-08-15 23:26:19.336 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:19.362 +03:00 [WRN] Failed to process the job '980': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:58.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.364 +03:00 [WRN] Failed to process the job '1024': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.394 +03:00 [WRN] Failed to process the job '1018': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:24.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:19.406 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.408 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.419 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:19.722 +03:00 [INF] Received HTTP response headers after 381.9607ms - 429
2024-08-15 23:26:19.727 +03:00 [INF] End processing HTTP request after 458.4778ms - 429
2024-08-15 23:26:19.782 +03:00 [WRN] Failed to process the job '1041': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:20.826 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:26:20.830 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:20.831 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:26:20.840 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:26:20.843 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:20.844 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.002 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.004 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.037 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.037 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.038 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.039 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.068 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.071 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.092 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.092 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.094 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.095 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.097 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.099 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.105 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.106 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.118 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.119 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.132 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.133 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.146 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.148 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.160 +03:00 [INF] Received HTTP response headers after 315.4148ms - 429
2024-08-15 23:26:21.161 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.162 +03:00 [INF] End processing HTTP request after 318.936ms - 429
2024-08-15 23:26:21.162 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.177 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.178 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.203 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.205 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:21.278 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 444.9243ms
2024-08-15 23:26:21.280 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:21.281 +03:00 [ERR] HTTP GET /api/stocks/portfolio responded 500 in 451.1610 ms
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:26:21.289 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:26:21.296 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 500 null text/plain; charset=utf-8 469.7447ms
2024-08-15 23:26:21.331 +03:00 [INF] Received HTTP response headers after 326.0165ms - 429
2024-08-15 23:26:21.333 +03:00 [INF] End processing HTTP request after 331.6512ms - 429
2024-08-15 23:26:21.378 +03:00 [INF] Received HTTP response headers after 335.7953ms - 429
2024-08-15 23:26:21.380 +03:00 [INF] End processing HTTP request after 342.9934ms - 429
2024-08-15 23:26:21.436 +03:00 [INF] Received HTTP response headers after 339.8199ms - 429
2024-08-15 23:26:21.439 +03:00 [INF] End processing HTTP request after 347.3662ms - 429
2024-08-15 23:26:21.451 +03:00 [INF] Received HTTP response headers after 352.1805ms - 429
2024-08-15 23:26:21.451 +03:00 [INF] Received HTTP response headers after 377.4887ms - 429
2024-08-15 23:26:21.461 +03:00 [WRN] Failed to process the job '1021': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:42.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.486 +03:00 [INF] End processing HTTP request after 418.0317ms - 429
2024-08-15 23:26:21.461 +03:00 [WRN] Failed to process the job '1017': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.486 +03:00 [INF] Received HTTP response headers after 385.3171ms - 429
2024-08-15 23:26:21.452 +03:00 [INF] End processing HTTP request after 360.267ms - 429
2024-08-15 23:26:21.503 +03:00 [INF] End processing HTTP request after 406.0073ms - 429
2024-08-15 23:26:21.505 +03:00 [WRN] Failed to process the job '891': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.537 +03:00 [INF] Received HTTP response headers after 417.6517ms - 429
2024-08-15 23:26:21.537 +03:00 [INF] Received HTTP response headers after 403.1164ms - 429
2024-08-15 23:26:21.537 +03:00 [INF] Received HTTP response headers after 389.0984ms - 429
2024-08-15 23:26:21.561 +03:00 [INF] End processing HTTP request after 443.1058ms - 429
2024-08-15 23:26:21.562 +03:00 [INF] End processing HTTP request after 429.7765ms - 429
2024-08-15 23:26:21.563 +03:00 [INF] End processing HTTP request after 417.5039ms - 429
2024-08-15 23:26:21.689 +03:00 [INF] Received HTTP response headers after 524.2541ms - 429
2024-08-15 23:26:21.690 +03:00 [INF] End processing HTTP request after 529.0452ms - 429
2024-08-15 23:26:21.768 +03:00 [INF] Received HTTP response headers after 562.8346ms - 429
2024-08-15 23:26:21.769 +03:00 [INF] End processing HTTP request after 566.5886ms - 429
2024-08-15 23:26:21.807 +03:00 [INF] Received HTTP response headers after 627.9037ms - 429
2024-08-15 23:26:21.808 +03:00 [INF] End processing HTTP request after 631.8207ms - 429
2024-08-15 23:26:21.833 +03:00 [INF] Executed DbCommand (172ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.835 +03:00 [INF] Executed DbCommand (134ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.844 +03:00 [INF] Executed DbCommand (132ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.874 +03:00 [WRN] Failed to process the job '977': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.922 +03:00 [WRN] Failed to process the job '979': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.927 +03:00 [WRN] Failed to process the job '883': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:58.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.930 +03:00 [WRN] Failed to process the job '869': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.931 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:01.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.932 +03:00 [WRN] Failed to process the job '965': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:34.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.932 +03:00 [WRN] Failed to process the job '933': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.932 +03:00 [WRN] Failed to process the job '935': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.932 +03:00 [WRN] Failed to process the job '879': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:21.939 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.956 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.960 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.962 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.965 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.969 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.972 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.975 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:21.970 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:22.159 +03:00 [INF] Received HTTP response headers after 1119.4976ms - 429
2024-08-15 23:26:22.163 +03:00 [INF] End processing HTTP request after 1126.1134ms - 429
2024-08-15 23:26:22.215 +03:00 [WRN] Failed to process the job '929': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:22.236 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:22.237 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:22.238 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:22.324 +03:00 [INF] Received HTTP response headers after 1217.3252ms - 429
2024-08-15 23:26:22.327 +03:00 [INF] End processing HTTP request after 1221.9565ms - 429
2024-08-15 23:26:22.384 +03:00 [WRN] Failed to process the job '1003': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:34.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:22.408 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:23.142 +03:00 [INF] Received HTTP response headers after 902.7961ms - 429
2024-08-15 23:26:23.144 +03:00 [INF] End processing HTTP request after 906.6006ms - 429
2024-08-15 23:26:23.196 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 7 of 10 will be performed in 00:21:51.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:23.220 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:23.222 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:23.222 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:23.543 +03:00 [INF] Received HTTP response headers after 319.777ms - 429
2024-08-15 23:26:23.544 +03:00 [INF] End processing HTTP request after 322.7105ms - 429
2024-08-15 23:26:23.595 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:53.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:23.626 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:24.208 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.212 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.224 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.226 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.240 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.243 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.422 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.422 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.422 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.425 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.426 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.427 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.540 +03:00 [INF] Received HTTP response headers after 312.6782ms - 429
2024-08-15 23:26:24.542 +03:00 [INF] End processing HTTP request after 317.7012ms - 429
2024-08-15 23:26:24.565 +03:00 [INF] Received HTTP response headers after 317.2814ms - 429
2024-08-15 23:26:24.568 +03:00 [INF] End processing HTTP request after 327.4033ms - 429
2024-08-15 23:26:24.635 +03:00 [WRN] Failed to process the job '875': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:24.636 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 8 of 10 will be performed in 00:40:48.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:24.657 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:24.659 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:24.660 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.662 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.739 +03:00 [INF] Received HTTP response headers after 307.0611ms - 429
2024-08-15 23:26:24.742 +03:00 [INF] End processing HTTP request after 320.8992ms - 429
2024-08-15 23:26:24.755 +03:00 [INF] Received HTTP response headers after 327.7704ms - 429
2024-08-15 23:26:24.757 +03:00 [INF] End processing HTTP request after 335.5303ms - 429
2024-08-15 23:26:24.838 +03:00 [WRN] Failed to process the job '881': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:24.839 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 8 of 10 will be performed in 00:43:12.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:24.862 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:24.863 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:24.865 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.867 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:24.958 +03:00 [INF] Received HTTP response headers after 295.4659ms - 429
2024-08-15 23:26:24.962 +03:00 [INF] End processing HTTP request after 302.1619ms - 429
2024-08-15 23:26:24.989 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:26:24.991 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:25.003 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:26:25.017 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:26:25.021 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.022 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.023 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.049 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:25.051 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.052 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.205 +03:00 [INF] Received HTTP response headers after 337.8134ms - 429
2024-08-15 23:26:25.208 +03:00 [INF] End processing HTTP request after 343.7184ms - 429
2024-08-15 23:26:25.265 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 7 of 10 will be performed in 00:24:25.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.290 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:25.333 +03:00 [INF] Received HTTP response headers after 310.0969ms - 429
2024-08-15 23:26:25.335 +03:00 [INF] End processing HTTP request after 314.4268ms - 429
2024-08-15 23:26:25.410 +03:00 [INF] Received HTTP response headers after 357.9288ms - 429
2024-08-15 23:26:25.410 +03:00 [INF] Received HTTP response headers after 1196.1164ms - 429
2024-08-15 23:26:25.411 +03:00 [INF] End processing HTTP request after 360.4424ms - 429
2024-08-15 23:26:25.412 +03:00 [INF] End processing HTTP request after 1203.9821ms - 429
2024-08-15 23:26:25.501 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 495.3763ms
2024-08-15 23:26:25.515 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:25.517 +03:00 [ERR] HTTP GET /api/stocks/portfolio responded 500 in 525.5688 ms
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:26:25.524 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 7 of 10 will be performed in 00:25:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.525 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:26:25.525 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 8 of 10 will be performed in 00:40:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.533 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 500 null text/plain; charset=utf-8 545.2153ms
2024-08-15 23:26:25.554 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:25.557 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.558 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.564 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:25.627 +03:00 [INF] Received HTTP response headers after 1196.5081ms - 429
2024-08-15 23:26:25.629 +03:00 [INF] End processing HTTP request after 1207.3591ms - 429
2024-08-15 23:26:25.691 +03:00 [WRN] Failed to process the job '885': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.717 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:25.719 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.720 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.874 +03:00 [INF] Received HTTP response headers after 315.5121ms - 429
2024-08-15 23:26:25.876 +03:00 [INF] End processing HTTP request after 319.0194ms - 429
2024-08-15 23:26:25.934 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:15.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:25.963 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:25.965 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:25.966 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.032 +03:00 [INF] Received HTTP response headers after 311.3594ms - 429
2024-08-15 23:26:26.035 +03:00 [INF] End processing HTTP request after 316.1433ms - 429
2024-08-15 23:26:26.095 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 7 of 10 will be performed in 00:21:51.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:26.125 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:26.127 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.128 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.277 +03:00 [INF] Received HTTP response headers after 310.4688ms - 429
2024-08-15 23:26:26.279 +03:00 [INF] End processing HTTP request after 314.571ms - 429
2024-08-15 23:26:26.360 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:54.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:26.393 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:26.443 +03:00 [INF] Received HTTP response headers after 314.4504ms - 429
2024-08-15 23:26:26.444 +03:00 [INF] End processing HTTP request after 317.2144ms - 429
2024-08-15 23:26:26.502 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:01.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:26.529 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:26.531 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.532 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.840 +03:00 [INF] Received HTTP response headers after 307.62ms - 429
2024-08-15 23:26:26.843 +03:00 [INF] End processing HTTP request after 312.0721ms - 429
2024-08-15 23:26:26.857 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.858 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.895 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.896 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.898 +03:00 [WRN] Failed to process the job '1008': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:26.911 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.912 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.921 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:26.958 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.962 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.963 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.963 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.963 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.965 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.966 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.966 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.974 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.974 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.975 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.975 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.990 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.990 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.990 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.991 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.992 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:26.993 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.178 +03:00 [INF] Received HTTP response headers after 319.8459ms - 429
2024-08-15 23:26:27.180 +03:00 [INF] End processing HTTP request after 323.8383ms - 429
2024-08-15 23:26:27.232 +03:00 [WRN] Failed to process the job '913': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.238 +03:00 [INF] Received HTTP response headers after 340.6534ms - 429
2024-08-15 23:26:27.239 +03:00 [INF] End processing HTTP request after 343.5066ms - 429
2024-08-15 23:26:27.261 +03:00 [INF] Received HTTP response headers after 348.108ms - 429
2024-08-15 23:26:27.263 +03:00 [INF] End processing HTTP request after 351.876ms - 429
2024-08-15 23:26:27.282 +03:00 [INF] Received HTTP response headers after 315.2971ms - 429
2024-08-15 23:26:27.282 +03:00 [INF] Received HTTP response headers after 312.2422ms - 429
2024-08-15 23:26:27.283 +03:00 [INF] End processing HTTP request after 319.9661ms - 429
2024-08-15 23:26:27.284 +03:00 [INF] End processing HTTP request after 321.0204ms - 429
2024-08-15 23:26:27.295 +03:00 [INF] Received HTTP response headers after 318.8924ms - 429
2024-08-15 23:26:27.298 +03:00 [INF] End processing HTTP request after 323.7702ms - 429
2024-08-15 23:26:27.307 +03:00 [INF] Received HTTP response headers after 329.5959ms - 429
2024-08-15 23:26:27.307 +03:00 [INF] Received HTTP response headers after 338.4078ms - 429
2024-08-15 23:26:27.309 +03:00 [INF] End processing HTTP request after 335.1414ms - 429
2024-08-15 23:26:27.317 +03:00 [INF] Received HTTP response headers after 323.317ms - 429
2024-08-15 23:26:27.318 +03:00 [INF] End processing HTTP request after 354.7317ms - 429
2024-08-15 23:26:27.335 +03:00 [INF] End processing HTTP request after 345.0735ms - 429
2024-08-15 23:26:27.393 +03:00 [INF] Received HTTP response headers after 398.0934ms - 429
2024-08-15 23:26:27.394 +03:00 [INF] End processing HTTP request after 404.2426ms - 429
2024-08-15 23:26:27.404 +03:00 [INF] Received HTTP response headers after 406.8996ms - 429
2024-08-15 23:26:27.463 +03:00 [INF] End processing HTTP request after 472.485ms - 429
2024-08-15 23:26:27.542 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.543 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.583 +03:00 [INF] Executed DbCommand (286ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:27.678 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 8 of 10 will be performed in 00:41:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.685 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.687 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.690 +03:00 [WRN] Failed to process the job '941': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:34.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.691 +03:00 [WRN] Failed to process the job '971': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.691 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 8 of 10 will be performed in 00:42:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.691 +03:00 [WRN] Failed to process the job '927': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:58.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.692 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.692 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:15.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.692 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 8 of 10 will be performed in 00:42:48.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.692 +03:00 [WRN] Failed to process the job '969': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.692 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 8 of 10 will be performed in 00:40:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:27.706 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:27.711 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.712 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.718 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:27.721 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:26:27.723 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.724 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:27.962 +03:00 [INF] Received HTTP response headers after 417.9949ms - 429
2024-08-15 23:26:27.964 +03:00 [INF] End processing HTTP request after 421.8647ms - 429
2024-08-15 23:26:28.019 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:12.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:28.042 +03:00 [INF] Received HTTP response headers after 354.8079ms - 429
2024-08-15 23:26:28.043 +03:00 [INF] End processing HTTP request after 358.5256ms - 429
2024-08-15 23:26:28.055 +03:00 [INF] Received HTTP response headers after 341.5349ms - 429
2024-08-15 23:26:28.055 +03:00 [INF] Received HTTP response headers after 330.3695ms - 429
2024-08-15 23:26:28.056 +03:00 [INF] End processing HTTP request after 345.5885ms - 429
2024-08-15 23:26:28.057 +03:00 [INF] End processing HTTP request after 334.4145ms - 429
2024-08-15 23:26:28.157 +03:00 [INF] Received HTTP response headers after 1194.5541ms - 429
2024-08-15 23:26:28.159 +03:00 [INF] End processing HTTP request after 1200.7717ms - 429
2024-08-15 23:26:28.211 +03:00 [WRN] Failed to process the job '1012': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:58.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:28.218 +03:00 [WRN] Failed to process the job '1016': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:41.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:28.218 +03:00 [WRN] Failed to process the job '1014': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:40.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders()
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:28.218 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 8 of 10 will be performed in 00:40:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:28.635 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:28.638 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:28.947 +03:00 [INF] Received HTTP response headers after 307.94ms - 429
2024-08-15 23:26:28.949 +03:00 [INF] End processing HTTP request after 314.3148ms - 429
2024-08-15 23:26:29.018 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 7 of 10 will be performed in 00:25:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:29.668 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:29.671 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:29.879 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:29.881 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:29.991 +03:00 [INF] Received HTTP response headers after 318.5194ms - 429
2024-08-15 23:26:29.992 +03:00 [INF] End processing HTTP request after 324.4303ms - 429
2024-08-15 23:26:30.044 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:19.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:30.210 +03:00 [INF] Received HTTP response headers after 327.344ms - 429
2024-08-15 23:26:30.216 +03:00 [INF] End processing HTTP request after 336.8726ms - 429
2024-08-15 23:26:30.276 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:50.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:30.298 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:30.300 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:30.563 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:30.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:30.620 +03:00 [INF] Received HTTP response headers after 319.0111ms - 429
2024-08-15 23:26:30.623 +03:00 [INF] End processing HTTP request after 324.3164ms - 429
2024-08-15 23:26:30.691 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:15.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:30.915 +03:00 [INF] Received HTTP response headers after 345.3511ms - 429
2024-08-15 23:26:30.916 +03:00 [INF] End processing HTTP request after 352.976ms - 429
2024-08-15 23:26:30.968 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:50.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:31.395 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:31.400 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:31.556 +03:00 [INF] Execution DelayedJobScheduler recovered from the Faulted state after 00:01:02.1141028 and is in the Running state now
2024-08-15 23:26:31.727 +03:00 [INF] Received HTTP response headers after 325.1772ms - 429
2024-08-15 23:26:31.730 +03:00 [INF] End processing HTTP request after 335.6365ms - 429
2024-08-15 23:26:31.785 +03:00 [WRN] Failed to process the job '1007': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:31.930 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:31.933 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:32.479 +03:00 [INF] Execution DelayedJobScheduler recovered from the Faulted state after 00:01:03.5284870 and is in the Running state now
2024-08-15 23:26:32.726 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:32.729 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:33.060 +03:00 [INF] Received HTTP response headers after 329.2645ms - 429
2024-08-15 23:26:33.061 +03:00 [INF] End processing HTTP request after 334.9634ms - 429
2024-08-15 23:26:33.084 +03:00 [INF] Received HTTP response headers after 1149.9908ms - 429
2024-08-15 23:26:33.085 +03:00 [INF] End processing HTTP request after 1155.3789ms - 429
2024-08-15 23:26:33.153 +03:00 [WRN] Failed to process the job '1015': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:33.154 +03:00 [WRN] Failed to process the job '1011': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:26:46.603 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:26:49.217 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:26:49.221 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:49.223 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:26:49.229 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:26:49.234 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:49.236 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:49.580 +03:00 [INF] Received HTTP response headers after 343.1888ms - 429
2024-08-15 23:26:49.582 +03:00 [INF] End processing HTTP request after 348.1369ms - 429
2024-08-15 23:26:49.679 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 453.4573ms
2024-08-15 23:26:49.680 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:49.682 +03:00 [ERR] HTTP GET /api/stocks/portfolio responded 500 in 461.0857 ms
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2024-08-15 23:26:49.688 +03:00 [ERR] An unhandled exception has occurred while executing the request.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol)
   at Core.Features.ShowPortfolio.ShowPortfolioHandler.Handle(ShowPortfolioCommand request, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, RequestHandlerDelegate`1 next, CancellationToken cancellationToken)
   at API.Controllers.StockController.ShowPortfolio(ShowPortfolioRequest request) in C:\Users\KC\source\repos\StockFlow\API\Controllers\StockController.cs:line 32
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware.InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-08-15 23:26:49.694 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 500 null text/plain; charset=utf-8 477.3905ms
2024-08-15 23:26:51.567 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - null null
2024-08-15 23:26:51.569 +03:00 [INF] Executing endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:51.570 +03:00 [INF] Route matched with {action = "ShowPortfolio", controller = "Stock"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] ShowPortfolio(Core.Features.ShowPortfolio.ShowPortfolioRequest) on controller API.Controllers.StockController (API).
2024-08-15 23:26:51.576 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_UserId_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."AccessFailedCount", t."Balance", t."ConcurrencyStamp", t."Email", t."EmailConfirmationSentAt", t."EmailConfirmationToken", t."EmailConfirmed", t."FirstName", t."ImagePath", t."IsEmailConfirmed", t."LastName", t."LockoutEnabled", t."LockoutEnd", t."NormalizedEmail", t."NormalizedUserName", t."PasswordHash", t."PhoneNumber", t."PhoneNumberConfirmed", t."SecurityStamp", t."TwoFactorEnabled", t."UserName", s."Id", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."ModifiedBy", s."ModifiedDate", s."Quantity", s."StockSymbol", s."TotalPurchasePrice", s."UserId"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."Id" = @__request_UserId_0
    LIMIT 1
) AS t
LEFT JOIN "StockHoldings" AS s ON t."Id" = s."UserId"
ORDER BY t."Id"
2024-08-15 23:26:51.579 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:51.580 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:51.608 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:51.610 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:52.000 +03:00 [INF] Received HTTP response headers after 388.1006ms - 200
2024-08-15 23:26:52.002 +03:00 [INF] End processing HTTP request after 394.388ms - 200
2024-08-15 23:26:52.799 +03:00 [INF] Received HTTP response headers after 1215.0939ms - 200
2024-08-15 23:26:52.800 +03:00 [INF] End processing HTTP request after 1221.1884ms - 200
2024-08-15 23:26:52.801 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.ShowPortfolio.ShowPortfolioResponse'.
2024-08-15 23:26:52.802 +03:00 [INF] Executed action API.Controllers.StockController.ShowPortfolio (API) in 1230.8826ms
2024-08-15 23:26:52.803 +03:00 [INF] Executed endpoint 'API.Controllers.StockController.ShowPortfolio (API)'
2024-08-15 23:26:52.804 +03:00 [INF] HTTP GET /api/stocks/portfolio responded 200 in 1235.2303 ms
2024-08-15 23:26:52.806 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/api/stocks/portfolio?UserId=3aa42229-1c0f-4630-8c1a-db879ecd0427 - 200 null application/json; charset=utf-8 1238.6158ms
2024-08-15 23:26:57.013 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:57.015 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:26:57.374 +03:00 [INF] Received HTTP response headers after 357.2576ms - 200
2024-08-15 23:26:57.375 +03:00 [INF] End processing HTTP request after 361.8957ms - 200
2024-08-15 23:27:01.630 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:27:01.633 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:27:01.634 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:27:01.642 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:27:01.644 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:27:01.645 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:27:01.651 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:27:01.660 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:27:01.670 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:27:01.678 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:27:01.989 +03:00 [INF] Received HTTP response headers after 342.6939ms - 200
2024-08-15 23:27:01.992 +03:00 [INF] End processing HTTP request after 347.6013ms - 200
2024-08-15 23:27:01.993 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 23:27:01.994 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
