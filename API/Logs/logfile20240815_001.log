2024-08-15 22:36:36.654 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:36:36.743 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:36:36.757 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:36:36.757 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:36:36.758 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:36:36.758 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:36:36.758 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:36:36.758 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:36:36.885 +03:00 [INF] Server desktop-ihebt3k:4028:87ffb79b successfully announced in 103,3607 ms
2024-08-15 22:36:36.889 +03:00 [INF] Server desktop-ihebt3k:4028:87ffb79b is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.497 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:39:22.588 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:39:22.602 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:39:22.602 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:39:22.602 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:39:22.603 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:39:22.603 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:39:22.603 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:39:22.678 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da successfully announced in 64,7459 ms
2024-08-15 22:39:22.680 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.685 +03:00 [INF] 2 servers were removed due to timeout
2024-08-15 22:39:22.791 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da all the dispatchers started
2024-08-15 22:39:22.854 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:39:22.888 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:39:22.888 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:39:22.888 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:39:22.889 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:39:22.889 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:39:22.889 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:39:22.889 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:39:22.897 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:39:22.899 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:39:22.967 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:39:22.967 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:39:22.967 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:39:22.967 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:39:22.967 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:39:22.967 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:39:22.968 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:39:22.968 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:39:22.968 +03:00 [INF] Hosting environment: Development
2024-08-15 22:39:22.968 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:39:22.970 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:39:22.971 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 successfully announced in 3,2974 ms
2024-08-15 22:39:22.972 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:39:22.987 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 all the dispatchers started
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.144 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.271 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.272 +03:00 [INF] Executed DbCommand (135ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.273 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.292 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:24.298 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:39:24.353 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:39:24.356 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 44.9416 ms
2024-08-15 22:39:24.356 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 0.7453 ms
2024-08-15 22:39:24.357 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 59.1515ms
2024-08-15 22:39:24.357 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 3.3873ms
2024-08-15 22:39:24.365 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:39:24.369 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.0748 ms
2024-08-15 22:39:24.370 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 4.7617ms
2024-08-15 22:39:24.376 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:39:24.378 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 1.9258ms
2024-08-15 22:39:24.381 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:39:24.381 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:39:24.381 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 0.7089ms
2024-08-15 22:39:24.382 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 0.5212 ms
2024-08-15 22:39:24.382 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 1.0277ms
2024-08-15 22:39:24.569 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:39:24.663 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 93.3488 ms
2024-08-15 22:39:24.663 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 93.7669ms
2024-08-15 22:39:24.665 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:39:24.669 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 4.5185 ms
2024-08-15 22:39:24.670 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 4.8643ms
2024-08-15 22:39:24.725 +03:00 [INF] Received HTTP response headers after 449.7963ms - 200
2024-08-15 22:39:24.726 +03:00 [INF] End processing HTTP request after 459.3711ms - 200
2024-08-15 22:39:24.737 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:24.737 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.136 +03:00 [INF] Received HTTP response headers after 398.3565ms - 200
2024-08-15 22:39:25.136 +03:00 [INF] End processing HTTP request after 399.5303ms - 200
2024-08-15 22:39:25.137 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.137 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.466 +03:00 [INF] Received HTTP response headers after 328.573ms - 200
2024-08-15 22:39:25.466 +03:00 [INF] End processing HTTP request after 329.1049ms - 200
2024-08-15 22:39:25.466 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.466 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.798 +03:00 [INF] Received HTTP response headers after 331.7724ms - 200
2024-08-15 22:39:25.798 +03:00 [INF] End processing HTTP request after 332.3767ms - 200
2024-08-15 22:39:25.801 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:25.801 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.114 +03:00 [INF] Received HTTP response headers after 312.986ms - 200
2024-08-15 22:39:26.115 +03:00 [INF] End processing HTTP request after 313.4099ms - 200
2024-08-15 22:39:26.115 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.115 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.425 +03:00 [INF] Received HTTP response headers after 309.6089ms - 200
2024-08-15 22:39:26.425 +03:00 [INF] End processing HTTP request after 310.2938ms - 200
2024-08-15 22:39:26.425 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.426 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:26.769 +03:00 [INF] Received HTTP response headers after 343.3093ms - 200
2024-08-15 22:39:26.769 +03:00 [INF] End processing HTTP request after 343.7948ms - 200
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.261 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.262 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.297 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:29.588 +03:00 [INF] Received HTTP response headers after 326.2228ms - 200
2024-08-15 22:39:29.588 +03:00 [INF] End processing HTTP request after 327.1562ms - 200
2024-08-15 22:39:29.635 +03:00 [INF] Received HTTP response headers after 373.2188ms - 200
2024-08-15 22:39:29.635 +03:00 [INF] End processing HTTP request after 374.0205ms - 200
2024-08-15 22:39:29.648 +03:00 [INF] Received HTTP response headers after 385.4741ms - 200
2024-08-15 22:39:29.648 +03:00 [INF] End processing HTTP request after 387.3584ms - 200
2024-08-15 22:39:29.649 +03:00 [INF] Received HTTP response headers after 386.7689ms - 200
2024-08-15 22:39:29.649 +03:00 [INF] End processing HTTP request after 388.3315ms - 200
2024-08-15 22:39:29.650 +03:00 [INF] Received HTTP response headers after 387.8541ms - 200
2024-08-15 22:39:29.650 +03:00 [INF] End processing HTTP request after 389.6331ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] Received HTTP response headers after 391.6862ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] End processing HTTP request after 393.1155ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] Received HTTP response headers after 392.502ms - 200
2024-08-15 22:39:29.654 +03:00 [INF] End processing HTTP request after 393.6264ms - 200
2024-08-15 22:39:29.655 +03:00 [INF] Received HTTP response headers after 357.2416ms - 200
2024-08-15 22:39:29.655 +03:00 [INF] End processing HTTP request after 357.589ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] Received HTTP response headers after 359.1891ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] Received HTTP response headers after 395.1567ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] End processing HTTP request after 360.0979ms - 200
2024-08-15 22:39:29.657 +03:00 [INF] End processing HTTP request after 396.7391ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] Received HTTP response headers after 396.0073ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] End processing HTTP request after 397.2897ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] Received HTTP response headers after 396.8291ms - 200
2024-08-15 22:39:29.658 +03:00 [INF] End processing HTTP request after 397.8461ms - 200
2024-08-15 22:39:29.659 +03:00 [INF] Received HTTP response headers after 361.228ms - 200
2024-08-15 22:39:29.659 +03:00 [INF] End processing HTTP request after 361.7882ms - 200
2024-08-15 22:39:29.670 +03:00 [INF] Received HTTP response headers after 372.2531ms - 200
2024-08-15 22:39:29.670 +03:00 [INF] End processing HTTP request after 373.1268ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] Received HTTP response headers after 372.6018ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] End processing HTTP request after 373.4509ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] Received HTTP response headers after 373.093ms - 200
2024-08-15 22:39:29.671 +03:00 [INF] End processing HTTP request after 373.8443ms - 200
2024-08-15 22:39:29.695 +03:00 [INF] Received HTTP response headers after 433.2298ms - 200
2024-08-15 22:39:29.695 +03:00 [INF] End processing HTTP request after 434.7751ms - 200
2024-08-15 22:39:29.720 +03:00 [INF] Received HTTP response headers after 458.855ms - 200
2024-08-15 22:39:29.720 +03:00 [INF] End processing HTTP request after 459.8765ms - 200
2024-08-15 22:39:30.252 +03:00 [INF] Received HTTP response headers after 954.299ms - 200
2024-08-15 22:39:30.252 +03:00 [INF] End processing HTTP request after 955.1687ms - 200
2024-08-15 22:39:30.259 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/deposit - application/json 92
2024-08-15 22:39:30.281 +03:00 [INF] Executing endpoint 'Core.Features.User.Deposit.DepositController.Deposit (API)'
2024-08-15 22:39:30.294 +03:00 [INF] Route matched with {action = "Deposit", controller = "Deposit"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Deposit(Core.Features.Deposit.DepositRequest) on controller Core.Features.User.Deposit.DepositController (API).
2024-08-15 22:39:30.384 +03:00 [INF] Start processing HTTP request GET https://api.frankfurter.app/latest?amount=100&from=TRY&to=USD
2024-08-15 22:39:30.384 +03:00 [INF] Sending HTTP request GET https://api.frankfurter.app/latest?amount=100&from=TRY&to=USD
2024-08-15 22:39:30.486 +03:00 [INF] Received HTTP response headers after 1188.0024ms - 200
2024-08-15 22:39:30.486 +03:00 [INF] End processing HTTP request after 1188.628ms - 200
2024-08-15 22:39:30.499 +03:00 [INF] Received HTTP response headers after 114.6934ms - 200
2024-08-15 22:39:30.499 +03:00 [INF] End processing HTTP request after 115.1987ms - 200
2024-08-15 22:39:30.509 +03:00 [INF] Received HTTP response headers after 1210.7759ms - 200
2024-08-15 22:39:30.509 +03:00 [INF] End processing HTTP request after 1211.6645ms - 200
2024-08-15 22:39:30.606 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 22:39:30.708 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Decimal), @p2='?', @p3='?' (DbType = Guid), @p4='?' (DbType = Decimal), @p5='?', @p6='?' (DbType = DateTime), @p7='?', @p8='?' (DbType = DateTime), @p9='?', @p10='?' (DbType = Boolean), @p11='?', @p12='?' (DbType = DateTime), @p13='?' (DbType = Guid), @p14='?' (DbType = Int32), @p15='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "Balance" = @p0
WHERE "Id" = @p1 AND "ConcurrencyStamp" = @p2;
INSERT INTO "Transactions" ("Id", "Amount", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "Description", "IsDeleted", "ModifiedBy", "ModifiedDate", "StockHoldingItemId", "Type", "UserId")
VALUES (@p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2024-08-15 22:39:30.736 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.Deposit.DepositResponse'.
2024-08-15 22:39:30.743 +03:00 [INF] Executed action Core.Features.User.Deposit.DepositController.Deposit (API) in 446.332ms
2024-08-15 22:39:30.743 +03:00 [INF] Executed endpoint 'Core.Features.User.Deposit.DepositController.Deposit (API)'
2024-08-15 22:39:30.744 +03:00 [INF] HTTP POST /api/deposit responded 200 in 484.6665 ms
2024-08-15 22:39:30.746 +03:00 [INF] Request finished HTTP/1.1 POST http://localhost:5285/api/deposit - 200 null application/json; charset=utf-8 486.2131ms
2024-08-15 22:39:34.591 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.591 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.640 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.640 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.654 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.655 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.661 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.675 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.676 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.702 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.703 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.730 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.730 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:34.957 +03:00 [INF] Received HTTP response headers after 301.9076ms - 200
2024-08-15 22:39:34.957 +03:00 [INF] End processing HTTP request after 302.4397ms - 200
2024-08-15 22:39:34.975 +03:00 [INF] Received HTTP response headers after 334.2893ms - 200
2024-08-15 22:39:34.975 +03:00 [INF] End processing HTTP request after 334.6136ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] Received HTTP response headers after 321.2042ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] End processing HTTP request after 321.6762ms - 200
2024-08-15 22:39:34.976 +03:00 [INF] Received HTTP response headers after 321.7848ms - 200
2024-08-15 22:39:34.977 +03:00 [INF] End processing HTTP request after 322.1685ms - 200
2024-08-15 22:39:34.979 +03:00 [INF] Received HTTP response headers after 317.712ms - 200
2024-08-15 22:39:34.979 +03:00 [INF] End processing HTTP request after 318.118ms - 200
2024-08-15 22:39:34.980 +03:00 [INF] Received HTTP response headers after 318.7629ms - 200
2024-08-15 22:39:34.980 +03:00 [INF] End processing HTTP request after 319.0571ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] Received HTTP response headers after 331.8602ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] End processing HTTP request after 332.3406ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] Received HTTP response headers after 311.7813ms - 200
2024-08-15 22:39:34.987 +03:00 [INF] End processing HTTP request after 312.0715ms - 200
2024-08-15 22:39:34.988 +03:00 [INF] Received HTTP response headers after 312.0535ms - 200
2024-08-15 22:39:34.988 +03:00 [INF] End processing HTTP request after 312.5964ms - 200
2024-08-15 22:39:34.990 +03:00 [INF] Received HTTP response headers after 335.7228ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] End processing HTTP request after 336.2722ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] Received HTTP response headers after 336.2944ms - 200
2024-08-15 22:39:34.991 +03:00 [INF] End processing HTTP request after 336.6208ms - 200
2024-08-15 22:39:35.014 +03:00 [INF] Received HTTP response headers after 338.6097ms - 200
2024-08-15 22:39:35.014 +03:00 [INF] End processing HTTP request after 339.1184ms - 200
2024-08-15 22:39:35.039 +03:00 [INF] Received HTTP response headers after 336.3853ms - 200
2024-08-15 22:39:35.039 +03:00 [INF] End processing HTTP request after 336.6717ms - 200
2024-08-15 22:39:35.056 +03:00 [INF] Received HTTP response headers after 325.1507ms - 200
2024-08-15 22:39:35.056 +03:00 [INF] End processing HTTP request after 325.3939ms - 200
2024-08-15 22:39:35.258 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.258 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.479 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.479 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.514 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.514 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:35.568 +03:00 [INF] Received HTTP response headers after 309.9418ms - 200
2024-08-15 22:39:35.568 +03:00 [INF] End processing HTTP request after 310.1519ms - 200
2024-08-15 22:39:35.773 +03:00 [INF] Received HTTP response headers after 1181.9109ms - 200
2024-08-15 22:39:35.773 +03:00 [INF] End processing HTTP request after 1182.2722ms - 200
2024-08-15 22:39:35.789 +03:00 [INF] Received HTTP response headers after 309.3053ms - 200
2024-08-15 22:39:35.789 +03:00 [INF] End processing HTTP request after 309.6625ms - 200
2024-08-15 22:39:35.812 +03:00 [INF] Received HTTP response headers after 1151.2242ms - 200
2024-08-15 22:39:35.812 +03:00 [INF] End processing HTTP request after 1151.6575ms - 200
2024-08-15 22:39:35.819 +03:00 [INF] Received HTTP response headers after 1158.2659ms - 200
2024-08-15 22:39:35.819 +03:00 [INF] End processing HTTP request after 1158.6206ms - 200
2024-08-15 22:39:35.824 +03:00 [INF] Received HTTP response headers after 310.3345ms - 200
2024-08-15 22:39:35.824 +03:00 [INF] End processing HTTP request after 310.5973ms - 200
2024-08-15 22:39:35.854 +03:00 [INF] Received HTTP response headers after 1193.2791ms - 200
2024-08-15 22:39:35.855 +03:00 [INF] End processing HTTP request after 1193.7619ms - 200
2024-08-15 22:39:39.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.959 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.976 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.979 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.982 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.982 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.988 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.992 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:39.993 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.000 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.001 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.014 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.014 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.041 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.041 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.056 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.056 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.277 +03:00 [INF] Received HTTP response headers after 317.169ms - 200
2024-08-15 22:39:40.277 +03:00 [INF] End processing HTTP request after 317.4736ms - 200
2024-08-15 22:39:40.298 +03:00 [INF] Received HTTP response headers after 310.0662ms - 200
2024-08-15 22:39:40.298 +03:00 [INF] End processing HTTP request after 310.5125ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 311.4608ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 317.2349ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 311.5317ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 317.6083ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 311.9371ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] Received HTTP response headers after 320.302ms - 200
2024-08-15 22:39:40.299 +03:00 [INF] End processing HTTP request after 311.8494ms - 200
2024-08-15 22:39:40.300 +03:00 [INF] End processing HTTP request after 320.9374ms - 200
2024-08-15 22:39:40.303 +03:00 [INF] Received HTTP response headers after 323.774ms - 200
2024-08-15 22:39:40.303 +03:00 [INF] End processing HTTP request after 324.1198ms - 200
2024-08-15 22:39:40.304 +03:00 [INF] Received HTTP response headers after 327.9043ms - 200
2024-08-15 22:39:40.304 +03:00 [INF] End processing HTTP request after 328.4071ms - 200
2024-08-15 22:39:40.376 +03:00 [INF] Received HTTP response headers after 362.0464ms - 200
2024-08-15 22:39:40.376 +03:00 [INF] End processing HTTP request after 362.3595ms - 200
2024-08-15 22:39:40.397 +03:00 [INF] Received HTTP response headers after 355.3643ms - 200
2024-08-15 22:39:40.397 +03:00 [INF] End processing HTTP request after 355.6401ms - 200
2024-08-15 22:39:40.572 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.572 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.784 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.784 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.800 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.800 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.837 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.837 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.862 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.862 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:40.865 +03:00 [INF] Received HTTP response headers after 872.3471ms - 200
2024-08-15 22:39:40.865 +03:00 [INF] End processing HTTP request after 872.6336ms - 200
2024-08-15 22:39:40.885 +03:00 [INF] Received HTTP response headers after 312.946ms - 429
2024-08-15 22:39:40.885 +03:00 [INF] End processing HTTP request after 313.2479ms - 429
2024-08-15 22:39:40.899 +03:00 [WRN] Failed to process the job '871': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:40.940 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.101 +03:00 [INF] Received HTTP response headers after 317.7469ms - 429
2024-08-15 22:39:41.101 +03:00 [INF] End processing HTTP request after 317.9803ms - 429
2024-08-15 22:39:41.114 +03:00 [WRN] Failed to process the job '881': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.128 +03:00 [INF] Received HTTP response headers after 307.597ms - 429
2024-08-15 22:39:41.128 +03:00 [INF] End processing HTTP request after 307.8507ms - 429
2024-08-15 22:39:41.140 +03:00 [INF] Received HTTP response headers after 319.8744ms - 429
2024-08-15 22:39:41.140 +03:00 [INF] End processing HTTP request after 320.1858ms - 429
2024-08-15 22:39:41.140 +03:00 [WRN] Failed to process the job '935': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.142 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.149 +03:00 [WRN] Failed to process the job '903': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.157 +03:00 [INF] Received HTTP response headers after 320.2672ms - 429
2024-08-15 22:39:41.157 +03:00 [INF] End processing HTTP request after 320.5338ms - 429
2024-08-15 22:39:41.158 +03:00 [INF] Received HTTP response headers after 1182.3954ms - 429
2024-08-15 22:39:41.159 +03:00 [INF] End processing HTTP request after 1182.7321ms - 429
2024-08-15 22:39:41.164 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.165 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.167 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.171 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.172 +03:00 [INF] Received HTTP response headers after 310.4881ms - 429
2024-08-15 22:39:41.172 +03:00 [INF] End processing HTTP request after 310.8009ms - 429
2024-08-15 22:39:41.177 +03:00 [INF] Received HTTP response headers after 1121.1246ms - 429
2024-08-15 22:39:41.177 +03:00 [INF] End processing HTTP request after 1121.4251ms - 429
2024-08-15 22:39:41.181 +03:00 [WRN] Failed to process the job '867': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.183 +03:00 [INF] Received HTTP response headers after 1182.1192ms - 429
2024-08-15 22:39:41.183 +03:00 [INF] End processing HTTP request after 1182.4227ms - 429
2024-08-15 22:39:41.184 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:15.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.191 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:41.191 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.192 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.204 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.213 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:41.990 +03:00 [INF] Received HTTP response headers after 1189.2332ms - 429
2024-08-15 22:39:41.990 +03:00 [INF] End processing HTTP request after 1189.7579ms - 429
2024-08-15 22:39:41.998 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:42.022 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:39:45.281 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.282 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.301 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.302 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.306 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.368 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.368 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.404 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.404 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.593 +03:00 [INF] Received HTTP response headers after 311.0096ms - 429
2024-08-15 22:39:45.593 +03:00 [INF] End processing HTTP request after 311.4404ms - 429
2024-08-15 22:39:45.603 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:20.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.611 +03:00 [INF] Received HTTP response headers after 309.1545ms - 429
2024-08-15 22:39:45.611 +03:00 [INF] End processing HTTP request after 309.5403ms - 429
2024-08-15 22:39:45.613 +03:00 [INF] Received HTTP response headers after 311.2018ms - 429
2024-08-15 22:39:45.613 +03:00 [INF] End processing HTTP request after 311.4708ms - 429
2024-08-15 22:39:45.618 +03:00 [INF] Received HTTP response headers after 315.8361ms - 429
2024-08-15 22:39:45.618 +03:00 [INF] End processing HTTP request after 316.5161ms - 429
2024-08-15 22:39:45.619 +03:00 [INF] Received HTTP response headers after 317.1885ms - 429
2024-08-15 22:39:45.619 +03:00 [INF] End processing HTTP request after 317.5728ms - 429
2024-08-15 22:39:45.619 +03:00 [WRN] Failed to process the job '969': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.620 +03:00 [WRN] Failed to process the job '913': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:36.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.622 +03:00 [INF] Received HTTP response headers after 316.0359ms - 429
2024-08-15 22:39:45.622 +03:00 [INF] End processing HTTP request after 316.3864ms - 429
2024-08-15 22:39:45.626 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.628 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.632 +03:00 [WRN] Failed to process the job '929': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.638 +03:00 [INF] Received HTTP response headers after 336.1228ms - 429
2024-08-15 22:39:45.638 +03:00 [INF] End processing HTTP request after 336.4163ms - 429
2024-08-15 22:39:45.645 +03:00 [WRN] Failed to process the job '895': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.735 +03:00 [INF] Received HTTP response headers after 330.8277ms - 429
2024-08-15 22:39:45.735 +03:00 [INF] End processing HTTP request after 331.0705ms - 429
2024-08-15 22:39:45.745 +03:00 [WRN] Failed to process the job '971': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:50.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:45.869 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.869 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:45.959 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.146 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.146 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.167 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.167 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.174 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.174 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.194 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.194 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.195 +03:00 [INF] Received HTTP response headers after 325.9936ms - 429
2024-08-15 22:39:46.195 +03:00 [INF] End processing HTTP request after 326.1816ms - 429
2024-08-15 22:39:46.203 +03:00 [WRN] Failed to process the job '941': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.208 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.208 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:46.271 +03:00 [INF] Received HTTP response headers after 311.9515ms - 429
2024-08-15 22:39:46.272 +03:00 [INF] End processing HTTP request after 312.2785ms - 429
2024-08-15 22:39:46.280 +03:00 [WRN] Failed to process the job '865': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:21.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.460 +03:00 [INF] Received HTTP response headers after 314.2872ms - 429
2024-08-15 22:39:46.460 +03:00 [INF] End processing HTTP request after 314.5159ms - 429
2024-08-15 22:39:46.468 +03:00 [WRN] Failed to process the job '889': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.481 +03:00 [INF] Received HTTP response headers after 313.9754ms - 429
2024-08-15 22:39:46.481 +03:00 [INF] End processing HTTP request after 314.2477ms - 429
2024-08-15 22:39:46.484 +03:00 [INF] Received HTTP response headers after 1177.8996ms - 429
2024-08-15 22:39:46.484 +03:00 [INF] End processing HTTP request after 1178.2586ms - 429
2024-08-15 22:39:46.489 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.492 +03:00 [WRN] Failed to process the job '927': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.495 +03:00 [INF] Received HTTP response headers after 320.9049ms - 429
2024-08-15 22:39:46.495 +03:00 [INF] End processing HTTP request after 321.246ms - 429
2024-08-15 22:39:46.503 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.524 +03:00 [INF] Received HTTP response headers after 315.3871ms - 429
2024-08-15 22:39:46.524 +03:00 [INF] End processing HTTP request after 315.7263ms - 429
2024-08-15 22:39:46.532 +03:00 [WRN] Failed to process the job '945': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:11.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 1193.8795ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 1194.256ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 367.0477ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 367.4716ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] Received HTTP response headers after 347.0154ms - 429
2024-08-15 22:39:46.562 +03:00 [INF] End processing HTTP request after 347.2375ms - 429
2024-08-15 22:39:46.570 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.571 +03:00 [WRN] Failed to process the job '949': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:16.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:46.571 +03:00 [WRN] Failed to process the job '911': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:36.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:47.022 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:47.022 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:39:47.327 +03:00 [INF] Received HTTP response headers after 305.2239ms - 429
2024-08-15 22:39:47.327 +03:00 [INF] End processing HTTP request after 305.4265ms - 429
2024-08-15 22:39:47.337 +03:00 [WRN] Failed to process the job '953': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:39:47.339 +03:00 [INF] Received HTTP response headers after 1144.2781ms - 429
2024-08-15 22:39:47.339 +03:00 [INF] End processing HTTP request after 1144.6085ms - 429
2024-08-15 22:39:47.346 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:08.022 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.036 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:40:08.037 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:08.037 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:08.345 +03:00 [INF] Received HTTP response headers after 307.8647ms - 429
2024-08-15 22:40:08.345 +03:00 [INF] End processing HTTP request after 308.0693ms - 429
2024-08-15 22:40:08.355 +03:00 [WRN] Failed to process the job '976': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in C:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:08.381 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.390 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:08.399 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:09.064 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:13.029 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.029 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.385 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.398 +03:00 [INF] Received HTTP response headers after 368.2322ms - 429
2024-08-15 22:40:13.398 +03:00 [INF] End processing HTTP request after 368.5377ms - 429
2024-08-15 22:40:13.406 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.406 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:13.408 +03:00 [WRN] Failed to process the job '975': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:39.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:13.712 +03:00 [INF] Received HTTP response headers after 326.337ms - 429
2024-08-15 22:40:13.712 +03:00 [INF] End processing HTTP request after 326.6395ms - 429
2024-08-15 22:40:13.721 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:31.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:13.736 +03:00 [INF] Received HTTP response headers after 350.5247ms - 429
2024-08-15 22:40:13.736 +03:00 [INF] End processing HTTP request after 350.791ms - 429
2024-08-15 22:40:13.743 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:32.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:14.065 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:14.065 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:14.382 +03:00 [INF] Received HTTP response headers after 316.4788ms - 429
2024-08-15 22:40:14.382 +03:00 [INF] End processing HTTP request after 316.8598ms - 429
2024-08-15 22:40:14.392 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:26.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:14.585 +03:00 [INF] Received HTTP response headers after 1179.208ms - 429
2024-08-15 22:40:14.585 +03:00 [INF] End processing HTTP request after 1179.5673ms - 429
2024-08-15 22:40:14.596 +03:00 [WRN] Failed to process the job '905': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:01.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in C:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in C:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:40:23.434 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:23.443 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:23.453 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:28.425 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.425 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.441 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.441 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.460 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.460 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:28.741 +03:00 [INF] Received HTTP response headers after 315.6106ms - 200
2024-08-15 22:40:28.741 +03:00 [INF] End processing HTTP request after 315.9497ms - 200
2024-08-15 22:40:28.748 +03:00 [INF] Received HTTP response headers after 306.7091ms - 200
2024-08-15 22:40:28.748 +03:00 [INF] End processing HTTP request after 307.2774ms - 200
2024-08-15 22:40:28.768 +03:00 [INF] Received HTTP response headers after 307.4863ms - 200
2024-08-15 22:40:28.768 +03:00 [INF] End processing HTTP request after 307.7705ms - 200
2024-08-15 22:40:33.739 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.739 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.754 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.754 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.772 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:33.772 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:34.053 +03:00 [INF] Received HTTP response headers after 314.2796ms - 200
2024-08-15 22:40:34.053 +03:00 [INF] End processing HTTP request after 314.5422ms - 200
2024-08-15 22:40:34.075 +03:00 [INF] Received HTTP response headers after 320.6502ms - 200
2024-08-15 22:40:34.075 +03:00 [INF] End processing HTTP request after 321.0119ms - 200
2024-08-15 22:40:34.089 +03:00 [INF] Received HTTP response headers after 317.4129ms - 200
2024-08-15 22:40:34.089 +03:00 [INF] End processing HTTP request after 317.7052ms - 200
2024-08-15 22:40:38.482 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:40:38.482 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:38.482 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:38.490 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:38.501 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:40:39.064 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.064 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.080 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.080 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.096 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.096 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.392 +03:00 [INF] Received HTTP response headers after 312.539ms - 200
2024-08-15 22:40:39.392 +03:00 [INF] End processing HTTP request after 312.8867ms - 200
2024-08-15 22:40:39.444 +03:00 [INF] Received HTTP response headers after 347.5118ms - 200
2024-08-15 22:40:39.444 +03:00 [INF] End processing HTTP request after 347.7937ms - 200
2024-08-15 22:40:39.658 +03:00 [INF] Received HTTP response headers after 1175.9912ms - 200
2024-08-15 22:40:39.658 +03:00 [INF] End processing HTTP request after 1176.1641ms - 200
2024-08-15 22:40:39.659 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.659 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.971 +03:00 [INF] Received HTTP response headers after 312.5183ms - 200
2024-08-15 22:40:39.971 +03:00 [INF] End processing HTTP request after 312.7854ms - 200
2024-08-15 22:40:39.972 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:39.972 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.212 +03:00 [INF] Received HTTP response headers after 1148.7049ms - 200
2024-08-15 22:40:40.213 +03:00 [INF] End processing HTTP request after 1149.0563ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] Received HTTP response headers after 304.8134ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] End processing HTTP request after 305.1586ms - 200
2024-08-15 22:40:40.277 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.277 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.624 +03:00 [INF] Received HTTP response headers after 347.3577ms - 200
2024-08-15 22:40:40.624 +03:00 [INF] End processing HTTP request after 347.5483ms - 200
2024-08-15 22:40:40.625 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:40.625 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:41.786 +03:00 [INF] Received HTTP response headers after 1161.356ms - 200
2024-08-15 22:40:41.786 +03:00 [INF] End processing HTTP request after 1161.508ms - 200
2024-08-15 22:40:41.786 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:41.786 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.096 +03:00 [INF] Received HTTP response headers after 310.2233ms - 200
2024-08-15 22:40:42.096 +03:00 [INF] End processing HTTP request after 310.3672ms - 200
2024-08-15 22:40:42.097 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.097 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:42.422 +03:00 [INF] Received HTTP response headers after 325.5133ms - 200
2024-08-15 22:40:42.422 +03:00 [INF] End processing HTTP request after 325.6552ms - 200
2024-08-15 22:40:43.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.484 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.506 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.506 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:43.806 +03:00 [INF] Received HTTP response headers after 321.241ms - 200
2024-08-15 22:40:43.806 +03:00 [INF] End processing HTTP request after 321.4975ms - 200
2024-08-15 22:40:43.849 +03:00 [INF] Received HTTP response headers after 342.7172ms - 200
2024-08-15 22:40:43.849 +03:00 [INF] End processing HTTP request after 343.0594ms - 200
2024-08-15 22:40:44.394 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.394 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.451 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.451 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:44.705 +03:00 [INF] Received HTTP response headers after 311.0685ms - 200
2024-08-15 22:40:44.705 +03:00 [INF] End processing HTTP request after 311.3481ms - 200
2024-08-15 22:40:44.787 +03:00 [INF] Received HTTP response headers after 336.104ms - 200
2024-08-15 22:40:44.788 +03:00 [INF] End processing HTTP request after 336.3696ms - 200
2024-08-15 22:40:45.224 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:45.224 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:45.541 +03:00 [INF] Received HTTP response headers after 317.0425ms - 200
2024-08-15 22:40:45.541 +03:00 [INF] End processing HTTP request after 317.3525ms - 200
2024-08-15 22:40:48.820 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.820 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.852 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:48.852 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.160 +03:00 [INF] Received HTTP response headers after 339.3975ms - 200
2024-08-15 22:40:49.160 +03:00 [INF] End processing HTTP request after 339.6848ms - 200
2024-08-15 22:40:49.698 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.698 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.787 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.787 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:49.970 +03:00 [INF] Received HTTP response headers after 1117.2861ms - 200
2024-08-15 22:40:49.970 +03:00 [INF] End processing HTTP request after 1117.5656ms - 200
2024-08-15 22:40:50.006 +03:00 [INF] Received HTTP response headers after 307.662ms - 200
2024-08-15 22:40:50.006 +03:00 [INF] End processing HTTP request after 307.8818ms - 200
2024-08-15 22:40:50.110 +03:00 [INF] Received HTTP response headers after 323.5263ms - 200
2024-08-15 22:40:50.111 +03:00 [INF] End processing HTTP request after 323.7256ms - 200
2024-08-15 22:40:50.546 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:50.546 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:50.918 +03:00 [INF] Received HTTP response headers after 372.1546ms - 200
2024-08-15 22:40:50.918 +03:00 [INF] End processing HTTP request after 372.4308ms - 200
2024-08-15 22:40:53.321 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 caught stopping signal...
2024-08-15 22:40:53.321 +03:00 [INF] Application is shutting down...
2024-08-15 22:40:53.321 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da caught stopping signal...
2024-08-15 22:40:53.323 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da All dispatchers stopped
2024-08-15 22:40:53.329 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da successfully reported itself as stopped in 3,5395 ms
2024-08-15 22:40:53.329 +03:00 [INF] Server desktop-ihebt3k:13660:42f544da has been stopped in total 7,6165 ms
2024-08-15 22:40:53.336 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 22:40:53.337 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 22:40:53.340 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 22:40:53.848 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 caught stopped signal...
2024-08-15 22:40:54.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.152 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.970 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:54.970 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.008 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.008 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.108 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.108 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.277 +03:00 [INF] Received HTTP response headers after 306.3421ms - 200
2024-08-15 22:40:55.277 +03:00 [INF] End processing HTTP request after 306.6024ms - 200
2024-08-15 22:40:55.311 +03:00 [INF] Received HTTP response headers after 303.3759ms - 200
2024-08-15 22:40:55.311 +03:00 [INF] End processing HTTP request after 303.6149ms - 200
2024-08-15 22:40:55.323 +03:00 [INF] Received HTTP response headers after 1170.9963ms - 200
2024-08-15 22:40:55.323 +03:00 [INF] End processing HTTP request after 1171.5237ms - 200
2024-08-15 22:40:55.414 +03:00 [INF] Received HTTP response headers after 305.846ms - 200
2024-08-15 22:40:55.414 +03:00 [INF] End processing HTTP request after 306.0867ms - 200
2024-08-15 22:40:55.920 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:55.920 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:40:57.081 +03:00 [INF] Received HTTP response headers after 1160.8407ms - 200
2024-08-15 22:40:57.081 +03:00 [INF] End processing HTTP request after 1161.0764ms - 200
2024-08-15 22:41:00.276 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.276 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.315 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.316 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.337 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.337 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.427 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.427 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:00.579 +03:00 [INF] Received HTTP response headers after 302.8761ms - 200
2024-08-15 22:41:00.579 +03:00 [INF] End processing HTTP request after 303.1483ms - 200
2024-08-15 22:41:00.657 +03:00 [INF] Received HTTP response headers after 341.2105ms - 200
2024-08-15 22:41:00.657 +03:00 [INF] End processing HTTP request after 341.5587ms - 200
2024-08-15 22:41:00.658 +03:00 [INF] Received HTTP response headers after 321.0584ms - 200
2024-08-15 22:41:00.658 +03:00 [INF] End processing HTTP request after 321.3737ms - 200
2024-08-15 22:41:00.756 +03:00 [INF] Received HTTP response headers after 329.5128ms - 200
2024-08-15 22:41:00.756 +03:00 [INF] End processing HTTP request after 329.7548ms - 200
2024-08-15 22:41:02.067 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:02.067 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:02.380 +03:00 [INF] Received HTTP response headers after 313.1165ms - 200
2024-08-15 22:41:02.380 +03:00 [INF] End processing HTTP request after 313.357ms - 200
2024-08-15 22:41:05.588 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.588 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.666 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.667 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.666 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.667 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=MSFT&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.758 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.758 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:05.920 +03:00 [INF] Received HTTP response headers after 332.7332ms - 200
2024-08-15 22:41:05.921 +03:00 [INF] End processing HTTP request after 332.9578ms - 200
2024-08-15 22:41:05.997 +03:00 [INF] Received HTTP response headers after 330.6213ms - 200
2024-08-15 22:41:05.997 +03:00 [INF] End processing HTTP request after 330.8889ms - 200
2024-08-15 22:41:06.066 +03:00 [INF] Received HTTP response headers after 307.0924ms - 200
2024-08-15 22:41:06.066 +03:00 [INF] End processing HTTP request after 307.3691ms - 200
2024-08-15 22:41:06.816 +03:00 [INF] Received HTTP response headers after 1149.0117ms - 200
2024-08-15 22:41:06.816 +03:00 [INF] End processing HTTP request after 1149.3419ms - 200
2024-08-15 22:41:07.381 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:07.381 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:07.703 +03:00 [INF] Received HTTP response headers after 322.184ms - 200
2024-08-15 22:41:07.703 +03:00 [INF] End processing HTTP request after 322.4823ms - 200
2024-08-15 22:41:08.343 +03:00 [WRN] Server desktop-ihebt3k:13660:8451fcc8 caught shutdown signal...
2024-08-15 22:41:08.344 +03:00 [WRN] Server desktop-ihebt3k:13660:8451fcc8 stopped non-gracefully due to Worker. Outstanding work on those dispatchers could be aborted, and there can be delays in background processing. This server instance will be incorrectly shown as active for a while. To avoid non-graceful shutdowns, investigate what prevents from stopping gracefully and add CancellationToken support for those methods.
2024-08-15 22:41:08.347 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 successfully reported itself as stopped in 2,6252 ms
2024-08-15 22:41:08.347 +03:00 [INF] Server desktop-ihebt3k:13660:8451fcc8 has been stopped in total 15025,6733 ms
2024-08-15 22:41:12.058 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:41:12.146 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:41:12.160 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:41:12.160 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:41:12.161 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:41:12.161 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:41:12.161 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:41:12.161 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:41:12.294 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a successfully announced in 112,2485 ms
2024-08-15 22:41:12.299 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:41:12.562 +03:00 [INF] Server desktop-ihebt3k:17312:7cb9bd7a all the dispatchers started
2024-08-15 22:41:12.684 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:41:12.720 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:41:12.720 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:41:12.721 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:41:12.721 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:41:12.721 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:41:12.722 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:41:12.722 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:41:12.729 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:41:12.731 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:41:12.824 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:41:12.824 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:41:12.825 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:41:12.832 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:41:12.832 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:41:12.832 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:41:12.832 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:41:12.836 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:41:12.836 +03:00 [INF] Hosting environment: Development
2024-08-15 22:41:12.836 +03:00 [INF] Content root path: C:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:41:12.838 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:41:12.839 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 successfully announced in 2,8218 ms
2024-08-15 22:41:12.839 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:41:13.006 +03:00 [INF] Server desktop-ihebt3k:17312:7752de76 all the dispatchers started
2024-08-15 22:41:13.110 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:41:13.258 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 120.0303 ms
2024-08-15 22:41:13.331 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 157.4919ms
2024-08-15 22:41:13.340 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:41:13.347 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.1324 ms
2024-08-15 22:41:13.347 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 7.5646ms
2024-08-15 22:41:13.600 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:41:13.760 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 157.4501 ms
2024-08-15 22:41:13.760 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 159.7942ms
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:14.616 +03:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:41:14.719 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:14.720 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.164 +03:00 [INF] Received HTTP response headers after 442.6379ms - 200
2024-08-15 22:41:15.165 +03:00 [INF] End processing HTTP request after 449.0346ms - 200
2024-08-15 22:41:15.176 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.176 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.583 +03:00 [INF] Received HTTP response headers after 407.1617ms - 200
2024-08-15 22:41:15.583 +03:00 [INF] End processing HTTP request after 407.5867ms - 200
2024-08-15 22:41:15.584 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.584 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.919 +03:00 [INF] Received HTTP response headers after 334.3875ms - 200
2024-08-15 22:41:15.919 +03:00 [INF] End processing HTTP request after 335.5461ms - 200
2024-08-15 22:41:15.919 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:15.919 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.246 +03:00 [INF] Received HTTP response headers after 326.0736ms - 200
2024-08-15 22:41:16.246 +03:00 [INF] End processing HTTP request after 326.769ms - 200
2024-08-15 22:41:16.247 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.247 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.576 +03:00 [INF] Received HTTP response headers after 329.2537ms - 200
2024-08-15 22:41:16.577 +03:00 [INF] End processing HTTP request after 329.9731ms - 200
2024-08-15 22:41:16.577 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:16.577 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:17.759 +03:00 [INF] Received HTTP response headers after 1181.6943ms - 200
2024-08-15 22:41:17.759 +03:00 [INF] End processing HTTP request after 1182.2158ms - 200
2024-08-15 22:41:17.760 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:17.760 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:18.068 +03:00 [INF] Received HTTP response headers after 307.6138ms - 200
2024-08-15 22:41:18.068 +03:00 [INF] End processing HTTP request after 308.1715ms - 200
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.718 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:19.719 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:20.029 +03:00 [INF] Received HTTP response headers after 311.1095ms - 200
2024-08-15 22:41:20.029 +03:00 [INF] End processing HTTP request after 311.9689ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] Received HTTP response headers after 364.5496ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] End processing HTTP request after 365.3394ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] Received HTTP response headers after 364.5581ms - 200
2024-08-15 22:41:20.083 +03:00 [INF] End processing HTTP request after 365.4299ms - 200
2024-08-15 22:41:20.093 +03:00 [INF] Received HTTP response headers after 373.959ms - 200
2024-08-15 22:41:20.093 +03:00 [INF] End processing HTTP request after 375.4069ms - 200
2024-08-15 22:41:20.098 +03:00 [INF] Received HTTP response headers after 378.8843ms - 200
2024-08-15 22:41:20.099 +03:00 [INF] End processing HTTP request after 381.1046ms - 200
2024-08-15 22:41:20.108 +03:00 [INF] Received HTTP response headers after 389.2824ms - 200
2024-08-15 22:41:20.108 +03:00 [INF] End processing HTTP request after 391.1352ms - 200
2024-08-15 22:41:20.968 +03:00 [INF] Received HTTP response headers after 1248.8407ms - 200
2024-08-15 22:41:20.968 +03:00 [INF] End processing HTTP request after 1250.6786ms - 200
2024-08-15 22:41:25.030 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.030 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.079 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.109 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.110 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.366 +03:00 [INF] Received HTTP response headers after 336.0723ms - 200
2024-08-15 22:41:25.366 +03:00 [INF] End processing HTTP request after 336.4023ms - 200
2024-08-15 22:41:25.392 +03:00 [INF] Received HTTP response headers after 313.3542ms - 200
2024-08-15 22:41:25.392 +03:00 [INF] End processing HTTP request after 313.7696ms - 200
2024-08-15 22:41:25.407 +03:00 [INF] Received HTTP response headers after 328.5755ms - 200
2024-08-15 22:41:25.408 +03:00 [INF] End processing HTTP request after 329.0608ms - 200
2024-08-15 22:41:25.425 +03:00 [INF] Received HTTP response headers after 315.5201ms - 200
2024-08-15 22:41:25.425 +03:00 [INF] End processing HTTP request after 316.122ms - 200
2024-08-15 22:41:25.428 +03:00 [INF] Received HTTP response headers after 318.0018ms - 200
2024-08-15 22:41:25.428 +03:00 [INF] End processing HTTP request after 318.6098ms - 200
2024-08-15 22:41:25.973 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:25.973 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:26.248 +03:00 [INF] Received HTTP response headers after 1138.372ms - 429
2024-08-15 22:41:26.248 +03:00 [INF] End processing HTTP request after 1139.1055ms - 429
2024-08-15 22:41:26.293 +03:00 [INF] Received HTTP response headers after 320.4188ms - 429
2024-08-15 22:41:26.294 +03:00 [INF] End processing HTTP request after 320.85ms - 429
2024-08-15 22:41:26.386 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:52.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:41:26.386 +03:00 [WRN] Failed to process the job '943': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 429 (Too Many Requests).
   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 31
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:41:27.871 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:41:29.362 +03:00 [INF] Request starting HTTP/1.1 POST http://localhost:5285/api/orders/place - application/json 136
2024-08-15 22:41:29.391 +03:00 [INF] Executing endpoint 'API.Controllers.OrderController.PlaceOrder (API)'
2024-08-15 22:41:29.406 +03:00 [INF] Route matched with {action = "PlaceOrder", controller = "Order"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PlaceOrder(Core.Features.GiveOrder.GiveOrderRequest) on controller API.Controllers.OrderController (API).
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.227 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.226 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:41:38.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.880 +03:00 [INF] Received HTTP response headers after 22652.8192ms - 200
2024-08-15 22:42:00.881 +03:00 [INF] End processing HTTP request after 22654.6181ms - 200
2024-08-15 22:42:00.882 +03:00 [INF] Received HTTP response headers after 22654.5391ms - 200
2024-08-15 22:42:00.882 +03:00 [INF] End processing HTTP request after 22655.365ms - 200
2024-08-15 22:42:00.883 +03:00 [INF] Received HTTP response headers after 22653.775ms - 200
2024-08-15 22:42:00.883 +03:00 [INF] End processing HTTP request after 22656.8779ms - 200
2024-08-15 22:42:00.894 +03:00 [INF] Received HTTP response headers after 22666.1576ms - 200
2024-08-15 22:42:00.894 +03:00 [INF] Received HTTP response headers after 22665.3454ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.1636ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.1844ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] Received HTTP response headers after 22666.4355ms - 200
2024-08-15 22:42:00.895 +03:00 [INF] End processing HTTP request after 22668.6988ms - 200
2024-08-15 22:42:00.925 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.943 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.944 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.962 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:00.977 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:42:00.980 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.981 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:00.985 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:01.000 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:42:01.090 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "AspNetUsers" AS a
WHERE a."Id" = @__get_Item_0
LIMIT 1
2024-08-15 22:42:01.229 +03:00 [INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32), @p10='?', @p11='?' (DbType = Decimal), @p12='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderType", "Quantity", "StockSymbol", "TargetPrice", "UserId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12);
2024-08-15 22:42:01.266 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?', @p4='?' (DbType = DateTime), @p5='?' (DbType = Boolean), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = Guid)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderProcesses" ("Id", "CreatedBy", "CreatedDate", "DeletedBy", "DeletedDate", "IsDeleted", "ModifiedBy", "ModifiedDate", "OrderId")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)
RETURNING "Status";
2024-08-15 22:42:01.275 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.276 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.310 +03:00 [INF] Received HTTP response headers after 328.2795ms - 200
2024-08-15 22:42:01.310 +03:00 [INF] End processing HTTP request after 329.3637ms - 200
2024-08-15 22:42:01.310 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.310 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.587 +03:00 [INF] Received HTTP response headers after 311.7227ms - 200
2024-08-15 22:42:01.587 +03:00 [INF] End processing HTTP request after 312.2952ms - 200
2024-08-15 22:42:01.623 +03:00 [INF] Received HTTP response headers after 313.0134ms - 200
2024-08-15 22:42:01.623 +03:00 [INF] End processing HTTP request after 313.4678ms - 200
2024-08-15 22:42:01.624 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:01.624 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.252 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.252 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.253 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.254 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.254 +03:00 [INF] Received HTTP response headers after 8629.8284ms - 200
2024-08-15 22:42:10.254 +03:00 [INF] End processing HTTP request after 8630.1939ms - 200
2024-08-15 22:42:10.254 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.255 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.277 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:10.278 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.463 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.464 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.485 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.485 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.486 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.486 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.489 +03:00 [INF] Received HTTP response headers after 1234.1028ms - 200
2024-08-15 22:42:11.489 +03:00 [INF] End processing HTTP request after 1234.3426ms - 200
2024-08-15 22:42:11.489 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:11.489 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=AAPL&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.687 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.692 +03:00 [INF] Received HTTP response headers after 5439.341ms - 200
2024-08-15 22:42:15.693 +03:00 [INF] End processing HTTP request after 5440.3261ms - 200
2024-08-15 22:42:15.694 +03:00 [INF] Received HTTP response headers after 5439.4058ms - 200
2024-08-15 22:42:15.694 +03:00 [INF] End processing HTTP request after 5441.5386ms - 200
2024-08-15 22:42:15.731 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.732 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/quote?symbol=TSLA&token=cqosfapr01qqj5dme8e0cqosfapr01qqj5dme8eg
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 4287.4604ms - 200
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 4287.4403ms - 200
2024-08-15 22:42:15.751 +03:00 [INF] Received HTTP response headers after 5496.4626ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 4289.2375ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 4289.6111ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] Received HTTP response headers after 5473.1047ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 5499.8849ms - 200
2024-08-15 22:42:15.752 +03:00 [INF] End processing HTTP request after 5475.0325ms - 200
2024-08-15 22:42:15.774 +03:00 [INF] Executing OkObjectResult, writing value of type 'Core.Features.GiveOrder.OrderResponse'.
2024-08-15 22:49:51.432 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:49:51.515 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:49:51.529 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:49:51.529 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:49:51.529 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:49:51.529 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:49:51.529 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:49:51.529 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:49:51.603 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d successfully announced in 62,4503 ms
2024-08-15 22:49:51.605 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:49:51.609 +03:00 [INF] 5 servers were removed due to timeout
2024-08-15 22:49:51.663 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d all the dispatchers started
2024-08-15 22:49:51.755 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:49:51.784 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:49:51.784 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:49:51.786 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:49:51.786 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:49:51.786 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:49:51.786 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:49:51.787 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:49:51.794 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:49:51.796 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:49:51.868 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:49:51.868 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:49:51.868 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:49:51.868 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:49:51.869 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:49:51.869 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:49:51.869 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:49:51.869 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:49:51.869 +03:00 [INF] Hosting environment: Development
2024-08-15 22:49:51.869 +03:00 [INF] Content root path: c:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:49:51.872 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:49:51.872 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 successfully announced in 3,1158 ms
2024-08-15 22:49:51.872 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:49:51.898 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 all the dispatchers started
2024-08-15 22:49:52.185 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:49:52.364 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 56.1323 ms
2024-08-15 22:49:52.365 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 180.8891ms
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.391 +03:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.535 +03:00 [INF] Executed DbCommand (154ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.541 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:53.542 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:53.554 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:49:53.554 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 3.9226ms
2024-08-15 22:49:53.559 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.560 +03:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.560 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.2640 ms
2024-08-15 22:49:53.561 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 6.2447ms
2024-08-15 22:49:53.561 +03:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.563 +03:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.558 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.566 +03:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:53.791 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:49:53.892 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 99.1716 ms
2024-08-15 22:49:53.892 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 101.4462ms
2024-08-15 22:49:54.353 +03:00 [INF] Received HTTP response headers after 809.4525ms - 200
2024-08-15 22:49:54.354 +03:00 [INF] End processing HTTP request after 816.2878ms - 200
2024-08-15 22:49:54.396 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.540 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.541 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.567 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.566 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.568 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.568 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.570 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:58.571 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:49:59.254 +03:00 [INF] Received HTTP response headers after 713.7027ms - 200
2024-08-15 22:49:59.255 +03:00 [INF] End processing HTTP request after 714.4856ms - 200
2024-08-15 22:49:59.274 +03:00 [INF] Received HTTP response headers after 732.8437ms - 429
2024-08-15 22:49:59.274 +03:00 [INF] End processing HTTP request after 733.7706ms - 429
2024-08-15 22:49:59.267 +03:00 [WRN] Failed to process the job '945': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.285 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.Exception: Failed to fetch stock price.
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 42
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.302 +03:00 [INF] Received HTTP response headers after 760.5542ms - 200
2024-08-15 22:49:59.302 +03:00 [INF] End processing HTTP request after 761.9248ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 738.4305ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 764.5913ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] Received HTTP response headers after 764.3848ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 739.3651ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 765.7437ms - 200
2024-08-15 22:49:59.306 +03:00 [INF] End processing HTTP request after 765.7125ms - 200
2024-08-15 22:49:59.310 +03:00 [INF] Received HTTP response headers after 769.5314ms - 200
2024-08-15 22:49:59.310 +03:00 [INF] End processing HTTP request after 770.3515ms - 200
2024-08-15 22:49:59.315 +03:00 [INF] Received HTTP response headers after 773.9522ms - 200
2024-08-15 22:49:59.315 +03:00 [INF] End processing HTTP request after 775.1473ms - 200
2024-08-15 22:49:59.318 +03:00 [INF] Received HTTP response headers after 750.4043ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] End processing HTTP request after 752.1399ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] Received HTTP response headers after 778.1792ms - 200
2024-08-15 22:49:59.319 +03:00 [INF] End processing HTTP request after 779.3732ms - 200
2024-08-15 22:49:59.319 +03:00 [WRN] Failed to process the job '871': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '889': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '939': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.320 +03:00 [WRN] Failed to process the job '905': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.327 +03:00 [WRN] Failed to process the job '865': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.327 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.331 +03:00 [WRN] Failed to process the job '953': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.331 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.388 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.389 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.389 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.402 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.415 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.432 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:49:59.503 +03:00 [INF] Received HTTP response headers after 935.1777ms - 200
2024-08-15 22:49:59.503 +03:00 [INF] End processing HTTP request after 936.2319ms - 200
2024-08-15 22:49:59.519 +03:00 [WRN] Failed to process the job '963': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.558 +03:00 [INF] Received HTTP response headers after 1016.4667ms - 200
2024-08-15 22:49:59.558 +03:00 [INF] End processing HTTP request after 1017.7012ms - 200
2024-08-15 22:49:59.562 +03:00 [INF] Received HTTP response headers after 1020.6405ms - 200
2024-08-15 22:49:59.562 +03:00 [INF] End processing HTTP request after 1021.8436ms - 200
2024-08-15 22:49:59.570 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.570 +03:00 [INF] Received HTTP response headers after 1029.5028ms - 200
2024-08-15 22:49:59.576 +03:00 [INF] End processing HTTP request after 1035.8903ms - 200
2024-08-15 22:49:59.581 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.589 +03:00 [WRN] Failed to process the job '873': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.625 +03:00 [INF] Received HTTP response headers after 1057.0266ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] Received HTTP response headers after 1057.2766ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] End processing HTTP request after 1058.3415ms - 200
2024-08-15 22:49:59.625 +03:00 [INF] End processing HTTP request after 1058.3839ms - 200
2024-08-15 22:49:59.627 +03:00 [INF] Received HTTP response headers after 1059.7912ms - 200
2024-08-15 22:49:59.628 +03:00 [INF] End processing HTTP request after 1061.0185ms - 200
2024-08-15 22:49:59.633 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.635 +03:00 [WRN] Failed to process the job '867': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.636 +03:00 [INF] Received HTTP response headers after 1068.5062ms - 200
2024-08-15 22:49:59.636 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.655 +03:00 [INF] End processing HTTP request after 1088.5051ms - 200
2024-08-15 22:49:59.677 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:49:59.816 +03:00 [INF] Received HTTP response headers after 1275.4003ms - 200
2024-08-15 22:49:59.817 +03:00 [INF] End processing HTTP request after 1276.4276ms - 200
2024-08-15 22:49:59.828 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:00.050 +03:00 [INF] Received HTTP response headers after 1479.1426ms - 200
2024-08-15 22:50:00.050 +03:00 [INF] End processing HTTP request after 1479.556ms - 200
2024-08-15 22:50:00.085 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 6 of 10 will be performed in 00:11:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:00.539 +03:00 [INF] Received HTTP response headers after 1971.9966ms - 200
2024-08-15 22:50:00.539 +03:00 [INF] End processing HTTP request after 1972.6356ms - 200
2024-08-15 22:50:00.552 +03:00 [WRN] Failed to process the job '877': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:03.195 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 caught stopping signal...
2024-08-15 22:50:03.195 +03:00 [INF] Application is shutting down...
2024-08-15 22:50:03.196 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d caught stopping signal...
2024-08-15 22:50:03.198 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d All dispatchers stopped
2024-08-15 22:50:03.204 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d successfully reported itself as stopped in 4,0654 ms
2024-08-15 22:50:03.204 +03:00 [INF] Server desktop-ihebt3k:21032:1778500d has been stopped in total 8,1295 ms
2024-08-15 22:50:03.210 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED shutting down.
2024-08-15 22:50:03.210 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED paused.
2024-08-15 22:50:03.214 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED Shutdown complete.
2024-08-15 22:50:03.722 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 caught stopped signal...
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:04.455 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:50:05.114 +03:00 [INF] Received HTTP response headers after 658.3234ms - 200
2024-08-15 22:50:05.114 +03:00 [INF] End processing HTTP request after 658.5338ms - 200
2024-08-15 22:50:05.119 +03:00 [INF] Received HTTP response headers after 664.0739ms - 200
2024-08-15 22:50:05.119 +03:00 [INF] End processing HTTP request after 664.3278ms - 200
2024-08-15 22:50:05.122 +03:00 [INF] Received HTTP response headers after 666.2962ms - 200
2024-08-15 22:50:05.122 +03:00 [INF] End processing HTTP request after 666.6484ms - 200
2024-08-15 22:50:05.127 +03:00 [WRN] Failed to process the job '949': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.129 +03:00 [WRN] Failed to process the job '895': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.129 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.142 +03:00 [INF] Received HTTP response headers after 686.3484ms - 200
2024-08-15 22:50:05.142 +03:00 [INF] End processing HTTP request after 686.7195ms - 200
2024-08-15 22:50:05.144 +03:00 [INF] Received HTTP response headers after 688.8155ms - 200
2024-08-15 22:50:05.145 +03:00 [INF] End processing HTTP request after 689.359ms - 200
2024-08-15 22:50:05.148 +03:00 [INF] Received HTTP response headers after 692.1384ms - 200
2024-08-15 22:50:05.148 +03:00 [INF] End processing HTTP request after 692.464ms - 200
2024-08-15 22:50:05.153 +03:00 [WRN] Failed to process the job '903': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.154 +03:00 [WRN] Failed to process the job '911': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:34.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.157 +03:00 [WRN] Failed to process the job '943': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:50:05.165 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 All dispatchers stopped
2024-08-15 22:50:05.166 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 successfully reported itself as stopped in 1,2699 ms
2024-08-15 22:50:05.166 +03:00 [INF] Server desktop-ihebt3k:21032:12cc4b88 has been stopped in total 1971,0386 ms
2024-08-15 22:54:55.308 +03:00 [INF] Start installing Hangfire SQL objects...
2024-08-15 22:54:55.406 +03:00 [INF] Hangfire SQL objects installed.
2024-08-15 22:54:55.418 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:54:55.419 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:54:55.419 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:54:55.419 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:54:55.419 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:54:55.419 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 60
    Listening queues: 'high-priority', 'low-priority'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:54:55.492 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da successfully announced in 62,6489 ms
2024-08-15 22:54:55.494 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:54:55.564 +03:00 [INF] Server desktop-ihebt3k:20524:12a019da all the dispatchers started
2024-08-15 22:54:55.670 +03:00 [INF] User profile is available. Using 'C:\Users\KC\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-08-15 22:54:55.702 +03:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2024-08-15 22:54:55.702 +03:00 [INF] Quartz Scheduler created
2024-08-15 22:54:55.703 +03:00 [INF] JobFactory set to: Quartz.Simpl.MicrosoftDependencyInjectionJobFactory
2024-08-15 22:54:55.703 +03:00 [INF] RAMJobStore initialized.
2024-08-15 22:54:55.704 +03:00 [INF] Quartz Scheduler 3.13.0.0 - 'QuartzScheduler' with instanceId 'NON_CLUSTERED' initialized
2024-08-15 22:54:55.704 +03:00 [INF] Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10
2024-08-15 22:54:55.704 +03:00 [INF] Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False
2024-08-15 22:54:55.712 +03:00 [INF] Adding 1 jobs, 1 triggers.
2024-08-15 22:54:55.714 +03:00 [INF] Adding job: DEFAULT.DeleteUnconfirmedUsersJob
2024-08-15 22:54:55.791 +03:00 [INF] Now listening on: http://localhost:5285
2024-08-15 22:54:55.791 +03:00 [INF] Starting Hangfire Server using job storage: 'PostgreSQL Server: Host: localhost, DB: stockflowDB, Schema: hangfire'
2024-08-15 22:54:55.792 +03:00 [INF] Using the following options for PostgreSQL job storage:
2024-08-15 22:54:55.792 +03:00 [INF]     Queue poll interval: 00:00:15.
2024-08-15 22:54:55.792 +03:00 [INF]     Invisibility timeout: 00:30:00.
2024-08-15 22:54:55.792 +03:00 [INF]     Use sliding invisibility timeout: False.
2024-08-15 22:54:55.792 +03:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2024-08-15 22:54:55.792 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-15 22:54:55.792 +03:00 [INF] Hosting environment: Development
2024-08-15 22:54:55.792 +03:00 [INF] Content root path: c:\Users\KC\source\repos\StockFlow\API
2024-08-15 22:54:55.796 +03:00 [INF] Scheduler QuartzScheduler_$_NON_CLUSTERED started.
2024-08-15 22:54:55.796 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 successfully announced in 3,5672 ms
2024-08-15 22:54:55.796 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, Worker, DelayedJobScheduler, RecurringJobScheduler...
2024-08-15 22:54:55.812 +03:00 [INF] Server desktop-ihebt3k:20524:05932fa2 all the dispatchers started
2024-08-15 22:54:56.007 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.html - null null
2024-08-15 22:54:56.097 +03:00 [INF] HTTP GET /swagger/index.html responded 200 in 70.2970 ms
2024-08-15 22:54:56.100 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.html - 200 null text/html;charset=utf-8 92.4266ms
2024-08-15 22:54:56.114 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/index.js - null null
2024-08-15 22:54:56.114 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - null null
2024-08-15 22:54:56.117 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/_framework/aspnetcore-browser-refresh.js - 200 13732 application/javascript; charset=utf-8 2.4211ms
2024-08-15 22:54:56.117 +03:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.0138 ms
2024-08-15 22:54:56.118 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/index.js - 200 null application/javascript;charset=utf-8 3.4843ms
2024-08-15 22:54:56.353 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - null null
2024-08-15 22:54:56.475 +03:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 120.6816 ms
2024-08-15 22:54:56.476 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 122.6043ms
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.169 +03:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:54:57.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.297 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:57.298 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:54:58.087 +03:00 [INF] Received HTTP response headers after 787.4047ms - 200
2024-08-15 22:54:58.088 +03:00 [INF] End processing HTTP request after 794.2981ms - 200
2024-08-15 22:54:58.123 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:54:58.964 +03:00 [INF] Received HTTP response headers after 1665.6432ms - 200
2024-08-15 22:54:58.964 +03:00 [INF] End processing HTTP request after 1670.3381ms - 200
2024-08-15 22:54:58.981 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.294 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.295 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:02.930 +03:00 [INF] Received HTTP response headers after 635.1639ms - 200
2024-08-15 22:55:02.930 +03:00 [INF] End processing HTTP request after 635.7318ms - 200
2024-08-15 22:55:02.941 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:02.977 +03:00 [INF] Received HTTP response headers after 682.7315ms - 200
2024-08-15 22:55:02.978 +03:00 [INF] End processing HTTP request after 683.4045ms - 200
2024-08-15 22:55:02.991 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:03.809 +03:00 [INF] Received HTTP response headers after 1514.8348ms - 200
2024-08-15 22:55:03.810 +03:00 [INF] End processing HTTP request after 1515.7ms - 200
2024-08-15 22:55:03.822 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:04.633 +03:00 [INF] Received HTTP response headers after 2338.1241ms - 200
2024-08-15 22:55:04.634 +03:00 [INF] End processing HTTP request after 2339.5081ms - 200
2024-08-15 22:55:04.646 +03:00 [WRN] Failed to process the job '887': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:10.864 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:10.864 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:10.865 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:10.865 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:11.788 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285//metrics - null null
2024-08-15 22:55:11.806 +03:00 [INF] No cached response available for this request.
2024-08-15 22:55:11.808 +03:00 [INF] The response could not be cached for this request.
2024-08-15 22:55:11.808 +03:00 [INF] HTTP GET //metrics responded 404 in 19.7235 ms
2024-08-15 22:55:11.808 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285//metrics - 404 0 null 20.7038ms
2024-08-15 22:55:11.809 +03:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:5285//metrics, Response status code: 404
2024-08-15 22:55:12.393 +03:00 [INF] Received HTTP response headers after 1527.8029ms - 200
2024-08-15 22:55:12.394 +03:00 [INF] End processing HTTP request after 1528.1943ms - 200
2024-08-15 22:55:12.412 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:24.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:15.872 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:15.872 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:16.519 +03:00 [INF] Received HTTP response headers after 646.7807ms - 200
2024-08-15 22:55:16.519 +03:00 [INF] End processing HTTP request after 647.2204ms - 200
2024-08-15 22:55:16.530 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:16.586 +03:00 [INF] Request starting HTTP/1.1 GET http://localhost:5285/metrics - null null
2024-08-15 22:55:16.669 +03:00 [INF] Request finished HTTP/1.1 GET http://localhost:5285/metrics - 200 null text/plain; version=0.0.4; charset=utf-8 82.4273ms
2024-08-15 22:55:25.824 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:30.831 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:30.831 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:31.513 +03:00 [INF] Received HTTP response headers after 681.432ms - 200
2024-08-15 22:55:31.513 +03:00 [INF] End processing HTTP request after 681.9433ms - 200
2024-08-15 22:55:31.530 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:40.852 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:40.854 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.854 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.863 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:55:40.863 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.864 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:40.872 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:41.541 +03:00 [INF] Received HTTP response headers after 687.4249ms - 200
2024-08-15 22:55:41.542 +03:00 [INF] End processing HTTP request after 687.7542ms - 200
2024-08-15 22:55:41.550 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:54.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:41.554 +03:00 [INF] Received HTTP response headers after 690.3251ms - 200
2024-08-15 22:55:41.556 +03:00 [INF] End processing HTTP request after 692.7482ms - 200
2024-08-15 22:55:41.566 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:45.879 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:45.880 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:55:46.570 +03:00 [INF] Received HTTP response headers after 689.9246ms - 200
2024-08-15 22:55:46.570 +03:00 [INF] End processing HTTP request after 690.426ms - 200
2024-08-15 22:55:46.578 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:55:55.903 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:55:55.911 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:00.905 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.905 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.922 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:00.922 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:01.589 +03:00 [INF] Received HTTP response headers after 667.4242ms - 200
2024-08-15 22:56:01.589 +03:00 [INF] End processing HTTP request after 667.7419ms - 200
2024-08-15 22:56:01.606 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:38.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:01.608 +03:00 [INF] Received HTTP response headers after 702.3776ms - 200
2024-08-15 22:56:01.611 +03:00 [INF] End processing HTTP request after 705.6722ms - 200
2024-08-15 22:56:01.621 +03:00 [WRN] Failed to process the job '931': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:10.913 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:10.931 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:10.932 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.932 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.942 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:10.943 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:10.943 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:11.566 +03:00 [INF] Received HTTP response headers after 633.7749ms - 200
2024-08-15 22:56:11.566 +03:00 [INF] End processing HTTP request after 634.1262ms - 200
2024-08-15 22:56:11.582 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:11.585 +03:00 [INF] Received HTTP response headers after 642.5968ms - 200
2024-08-15 22:56:11.588 +03:00 [INF] End processing HTTP request after 645.6211ms - 200
2024-08-15 22:56:11.604 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:15.920 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:15.920 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:17.398 +03:00 [INF] Received HTTP response headers after 1478.7047ms - 200
2024-08-15 22:56:17.399 +03:00 [INF] End processing HTTP request after 1479.0828ms - 200
2024-08-15 22:56:17.409 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:23.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:25.972 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:25.983 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:30.974 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.974 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.990 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:30.990 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:31.626 +03:00 [INF] Received HTTP response headers after 651.6075ms - 200
2024-08-15 22:56:31.626 +03:00 [INF] End processing HTTP request after 651.8397ms - 200
2024-08-15 22:56:31.634 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:49.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:32.490 +03:00 [INF] Received HTTP response headers after 1499.9857ms - 200
2024-08-15 22:56:32.491 +03:00 [INF] End processing HTTP request after 1500.7007ms - 200
2024-08-15 22:56:32.499 +03:00 [WRN] Failed to process the job '961': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:41.018 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:41.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.018 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.029 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:41.030 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.030 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:41.041 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:41.054 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:41.680 +03:00 [INF] Received HTTP response headers after 649.8242ms - 200
2024-08-15 22:56:41.680 +03:00 [INF] End processing HTTP request after 650.214ms - 200
2024-08-15 22:56:41.689 +03:00 [INF] Received HTTP response headers after 670.7557ms - 200
2024-08-15 22:56:41.689 +03:00 [INF] End processing HTTP request after 670.9924ms - 200
2024-08-15 22:56:41.698 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:41.699 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:46.052 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.052 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.069 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.069 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:46.707 +03:00 [INF] Received HTTP response headers after 654.0883ms - 200
2024-08-15 22:56:46.707 +03:00 [INF] End processing HTTP request after 654.4783ms - 200
2024-08-15 22:56:46.716 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:49.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:47.637 +03:00 [INF] Received HTTP response headers after 1568.0836ms - 200
2024-08-15 22:56:47.637 +03:00 [INF] End processing HTTP request after 1568.6249ms - 200
2024-08-15 22:56:47.648 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:56:56.074 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:56.083 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:56:56.092 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:56:56.093 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:56.093 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:56:56.763 +03:00 [INF] Received HTTP response headers after 669.943ms - 200
2024-08-15 22:56:56.763 +03:00 [INF] End processing HTTP request after 670.1378ms - 200
2024-08-15 22:56:56.778 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:01.076 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.077 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.090 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.090 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:01.740 +03:00 [INF] Received HTTP response headers after 650.4606ms - 200
2024-08-15 22:57:01.741 +03:00 [INF] End processing HTTP request after 650.7359ms - 200
2024-08-15 22:57:01.752 +03:00 [WRN] Failed to process the job '967': an exception occurred. Retry attempt 6 of 10 will be performed in 00:10:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:02.608 +03:00 [INF] Received HTTP response headers after 1531.8666ms - 200
2024-08-15 22:57:02.609 +03:00 [INF] End processing HTTP request after 1532.1924ms - 200
2024-08-15 22:57:02.619 +03:00 [WRN] Failed to process the job '899': an exception occurred. Retry attempt 6 of 10 will be performed in 00:12:10.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:11.003 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:11.017 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:11.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:11.018 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:11.653 +03:00 [INF] Received HTTP response headers after 634.8425ms - 200
2024-08-15 22:57:11.653 +03:00 [INF] End processing HTTP request after 635.0449ms - 200
2024-08-15 22:57:11.661 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:24.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:16.007 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:16.007 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:16.630 +03:00 [INF] Received HTTP response headers after 623.5457ms - 200
2024-08-15 22:57:16.631 +03:00 [INF] End processing HTTP request after 623.9906ms - 200
2024-08-15 22:57:16.642 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:23.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:26.130 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:26.141 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:26.150 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:26.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:26.151 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:26.834 +03:00 [INF] Received HTTP response headers after 683.0351ms - 200
2024-08-15 22:57:26.834 +03:00 [INF] End processing HTTP request after 683.2891ms - 200
2024-08-15 22:57:26.843 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:31.135 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.135 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.151 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.151 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:31.761 +03:00 [INF] Received HTTP response headers after 626.1241ms - 200
2024-08-15 22:57:31.761 +03:00 [INF] End processing HTTP request after 626.4676ms - 200
2024-08-15 22:57:31.771 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:31.826 +03:00 [INF] Received HTTP response headers after 674.9226ms - 200
2024-08-15 22:57:31.827 +03:00 [INF] End processing HTTP request after 675.2182ms - 200
2024-08-15 22:57:31.852 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Number.ParseDecimal[TChar](ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:41.180 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:41.181 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:41.181 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:41.192 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:41.838 +03:00 [INF] Received HTTP response headers after 656.8032ms - 200
2024-08-15 22:57:41.838 +03:00 [INF] End processing HTTP request after 657.0054ms - 200
2024-08-15 22:57:41.849 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:46.192 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:46.193 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:46.816 +03:00 [INF] Received HTTP response headers after 622.8382ms - 200
2024-08-15 22:57:46.816 +03:00 [INF] End processing HTTP request after 623.348ms - 200
2024-08-15 22:57:46.831 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 2 of 10 will be performed in 00:01:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:56.215 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:56.215 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.215 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.224 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:57:56.234 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:57:56.234 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.234 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:57:56.935 +03:00 [INF] Received HTTP response headers after 700.4321ms - 200
2024-08-15 22:57:56.935 +03:00 [INF] End processing HTTP request after 700.5886ms - 200
2024-08-15 22:57:56.938 +03:00 [INF] Received HTTP response headers after 723.1215ms - 200
2024-08-15 22:57:56.938 +03:00 [INF] End processing HTTP request after 723.3675ms - 200
2024-08-15 22:57:56.944 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:57:56.956 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:01.229 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:01.229 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:01.892 +03:00 [INF] Received HTTP response headers after 662.7918ms - 200
2024-08-15 22:58:01.892 +03:00 [INF] End processing HTTP request after 663.0347ms - 200
2024-08-15 22:58:01.908 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:11.090 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:11.106 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:11.106 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.106 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.253 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:11.254 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.254 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:11.740 +03:00 [INF] Received HTTP response headers after 633.8036ms - 200
2024-08-15 22:58:11.740 +03:00 [INF] End processing HTTP request after 633.9905ms - 200
2024-08-15 22:58:11.750 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:11.918 +03:00 [INF] Received HTTP response headers after 664.5127ms - 200
2024-08-15 22:58:11.918 +03:00 [INF] End processing HTTP request after 664.7963ms - 200
2024-08-15 22:58:11.934 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 4 of 10 will be performed in 00:01:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:16.102 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:16.103 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:16.798 +03:00 [INF] Received HTTP response headers after 695.6528ms - 200
2024-08-15 22:58:16.798 +03:00 [INF] End processing HTTP request after 695.9867ms - 200
2024-08-15 22:58:16.808 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:26.292 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:26.292 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:26.292 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:26.965 +03:00 [INF] Received HTTP response headers after 672.2909ms - 200
2024-08-15 22:58:26.965 +03:00 [INF] End processing HTTP request after 672.5666ms - 200
2024-08-15 22:58:26.982 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:41.329 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:41.339 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:46.332 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.332 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.347 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.347 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:46.987 +03:00 [INF] Received HTTP response headers after 654.9008ms - 200
2024-08-15 22:58:46.987 +03:00 [INF] End processing HTTP request after 655.3183ms - 200
2024-08-15 22:58:46.998 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:00.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:46.999 +03:00 [INF] Received HTTP response headers after 652.1108ms - 200
2024-08-15 22:58:47.005 +03:00 [INF] End processing HTTP request after 657.5938ms - 200
2024-08-15 22:58:47.021 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:58:56.366 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:58:56.376 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:58:56.377 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:56.377 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:58:57.079 +03:00 [INF] Received HTTP response headers after 701.8732ms - 200
2024-08-15 22:58:57.079 +03:00 [INF] End processing HTTP request after 702.0736ms - 200
2024-08-15 22:58:57.100 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:30.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:01.366 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:01.366 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:02.019 +03:00 [INF] Received HTTP response headers after 652.1271ms - 200
2024-08-15 22:59:02.019 +03:00 [INF] End processing HTTP request after 652.5059ms - 200
2024-08-15 22:59:02.032 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:37.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:11.177 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:11.192 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:11.192 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.193 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.414 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:11.414 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.414 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:11.841 +03:00 [INF] Received HTTP response headers after 648.2579ms - 200
2024-08-15 22:59:11.841 +03:00 [INF] End processing HTTP request after 648.4342ms - 200
2024-08-15 22:59:11.849 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:18.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:12.039 +03:00 [INF] Received HTTP response headers after 624.6129ms - 200
2024-08-15 22:59:12.039 +03:00 [INF] End processing HTTP request after 624.8063ms - 200
2024-08-15 22:59:12.048 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:44.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:16.178 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:16.178 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:17.681 +03:00 [INF] Received HTTP response headers after 1502.8735ms - 200
2024-08-15 22:59:17.681 +03:00 [INF] End processing HTTP request after 1503.3507ms - 200
2024-08-15 22:59:17.697 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:19.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:26.441 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:26.441 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:26.441 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.093 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:27.094 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.094 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:27.733 +03:00 [INF] Received HTTP response headers after 639.6898ms - 200
2024-08-15 22:59:27.734 +03:00 [INF] End processing HTTP request after 639.8841ms - 200
2024-08-15 22:59:27.748 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:55.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:27.930 +03:00 [INF] Received HTTP response headers after 1488.7051ms - 200
2024-08-15 22:59:27.930 +03:00 [INF] End processing HTTP request after 1488.9337ms - 200
2024-08-15 22:59:27.939 +03:00 [WRN] Failed to process the job '990': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:41.465 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:41.466 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:41.466 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:41.475 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.486 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.497 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.506 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:41.517 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:42.134 +03:00 [INF] Received HTTP response headers after 668.213ms - 200
2024-08-15 22:59:42.134 +03:00 [INF] End processing HTTP request after 668.4568ms - 200
2024-08-15 22:59:42.147 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:46.479 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.479 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.494 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.495 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.501 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.501 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.508 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.508 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.530 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:46.530 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:47.151 +03:00 [INF] Received HTTP response headers after 671.7514ms - 200
2024-08-15 22:59:47.151 +03:00 [INF] End processing HTTP request after 672.0963ms - 200
2024-08-15 22:59:47.163 +03:00 [WRN] Failed to process the job '981': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:06.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.241 +03:00 [INF] Received HTTP response headers after 739.7039ms - 200
2024-08-15 22:59:47.241 +03:00 [INF] End processing HTTP request after 740.0326ms - 200
2024-08-15 22:59:47.249 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.279 +03:00 [INF] Received HTTP response headers after 784.3722ms - 200
2024-08-15 22:59:47.279 +03:00 [INF] End processing HTTP request after 784.8741ms - 200
2024-08-15 22:59:47.288 +03:00 [INF] Received HTTP response headers after 779.5755ms - 200
2024-08-15 22:59:47.288 +03:00 [INF] End processing HTTP request after 779.9565ms - 200
2024-08-15 22:59:47.292 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:25.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:47.301 +03:00 [WRN] Failed to process the job '973': an exception occurred. Retry attempt 6 of 10 will be performed in 00:13:22.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:48.131 +03:00 [INF] Received HTTP response headers after 1600.7774ms - 200
2024-08-15 22:59:48.131 +03:00 [INF] End processing HTTP request after 1601.0613ms - 200
2024-08-15 22:59:48.144 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 22:59:56.546 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 22:59:56.557 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 22:59:56.558 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:56.558 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 22:59:57.215 +03:00 [INF] Received HTTP response headers after 657.6894ms - 200
2024-08-15 22:59:57.215 +03:00 [INF] End processing HTTP request after 657.9209ms - 200
2024-08-15 22:59:57.226 +03:00 [WRN] Failed to process the job '982': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:01.553 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:01.553 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:02.259 +03:00 [INF] Received HTTP response headers after 706.0318ms - 200
2024-08-15 23:00:02.259 +03:00 [INF] End processing HTTP request after 706.2805ms - 200
2024-08-15 23:00:02.270 +03:00 [WRN] Failed to process the job '987': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:11.256 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:11.271 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:11.272 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:11.272 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:11.977 +03:00 [INF] Received HTTP response headers after 705.2184ms - 200
2024-08-15 23:00:11.977 +03:00 [INF] End processing HTTP request after 705.4101ms - 200
2024-08-15 23:00:11.994 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:16.260 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:16.260 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:16.905 +03:00 [INF] Received HTTP response headers after 644.9993ms - 200
2024-08-15 23:00:16.905 +03:00 [INF] End processing HTTP request after 645.2476ms - 200
2024-08-15 23:00:16.915 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:40.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:26.597 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:31.599 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:31.599 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:32.261 +03:00 [INF] Received HTTP response headers after 662.5792ms - 200
2024-08-15 23:00:32.261 +03:00 [INF] End processing HTTP request after 662.946ms - 200
2024-08-15 23:00:32.272 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:52.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:41.627 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:41.627 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.627 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.637 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:00:41.638 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:41.638 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:00:42.286 +03:00 [INF] Received HTTP response headers after 658.7416ms - 200
2024-08-15 23:00:42.286 +03:00 [INF] End processing HTTP request after 659.0469ms - 200
2024-08-15 23:00:42.288 +03:00 [INF] Received HTTP response headers after 650.3865ms - 200
2024-08-15 23:00:42.288 +03:00 [INF] End processing HTTP request after 650.6082ms - 200
2024-08-15 23:00:42.297 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:42.298 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:26.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:00:56.664 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:56.675 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:00:56.683 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:01.664 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.664 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:01.686 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:02.373 +03:00 [INF] Received HTTP response headers after 708.3483ms - 200
2024-08-15 23:01:02.373 +03:00 [INF] End processing HTTP request after 708.8854ms - 200
2024-08-15 23:01:02.392 +03:00 [WRN] Failed to process the job '983': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:51.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:02.421 +03:00 [INF] Received HTTP response headers after 735.1389ms - 200
2024-08-15 23:01:02.421 +03:00 [INF] End processing HTTP request after 735.4801ms - 200
2024-08-15 23:01:02.425 +03:00 [INF] Received HTTP response headers after 738.8806ms - 200
2024-08-15 23:01:02.425 +03:00 [INF] End processing HTTP request after 739.2245ms - 200
2024-08-15 23:01:02.435 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:48.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:02.440 +03:00 [WRN] Failed to process the job '985': an exception occurred. Retry attempt 5 of 10 will be performed in 00:04:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:11.364 +03:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:11.387 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.388 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.388 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.717 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.717 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.717 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.731 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.732 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.733 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.745 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:11.745 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:11.745 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:12.030 +03:00 [INF] Received HTTP response headers after 642.2934ms - 200
2024-08-15 23:01:12.030 +03:00 [INF] End processing HTTP request after 642.5538ms - 200
2024-08-15 23:01:12.042 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:28.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.182 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:12.354 +03:00 [INF] Received HTTP response headers after 636.8025ms - 200
2024-08-15 23:01:12.354 +03:00 [INF] End processing HTTP request after 637.1644ms - 200
2024-08-15 23:01:12.363 +03:00 [INF] Received HTTP response headers after 630.4009ms - 200
2024-08-15 23:01:12.363 +03:00 [INF] End processing HTTP request after 630.8036ms - 200
2024-08-15 23:01:12.369 +03:00 [WRN] Failed to process the job '986': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:46.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.377 +03:00 [WRN] Failed to process the job '984': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:21.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:12.471 +03:00 [INF] Received HTTP response headers after 725.1155ms - 200
2024-08-15 23:01:12.471 +03:00 [INF] End processing HTTP request after 725.3224ms - 200
2024-08-15 23:01:12.482 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:13.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:16.371 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:16.371 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.087 +03:00 [INF] Received HTTP response headers after 715.5736ms - 200
2024-08-15 23:01:17.087 +03:00 [INF] End processing HTTP request after 715.8406ms - 200
2024-08-15 23:01:17.097 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:15.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:17.188 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.188 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:17.809 +03:00 [INF] Received HTTP response headers after 620.4385ms - 200
2024-08-15 23:01:17.809 +03:00 [INF] End processing HTTP request after 620.698ms - 200
2024-08-15 23:01:17.819 +03:00 [WRN] Failed to process the job '991': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:32.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:26.789 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:26.805 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:26.805 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:26.805 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:27.205 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:27.451 +03:00 [INF] Received HTTP response headers after 645.6551ms - 200
2024-08-15 23:01:27.451 +03:00 [INF] End processing HTTP request after 645.8238ms - 200
2024-08-15 23:01:27.462 +03:00 [WRN] Failed to process the job '992': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:04.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:31.792 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:31.792 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.218 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.218 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:32.418 +03:00 [INF] Received HTTP response headers after 626.439ms - 200
2024-08-15 23:01:32.418 +03:00 [INF] End processing HTTP request after 626.753ms - 200
2024-08-15 23:01:32.430 +03:00 [WRN] Failed to process the job '947': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:32.908 +03:00 [INF] Received HTTP response headers after 689.3497ms - 200
2024-08-15 23:01:32.908 +03:00 [INF] End processing HTTP request after 689.6505ms - 200
2024-08-15 23:01:32.919 +03:00 [WRN] Failed to process the job '897': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:29.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:41.829 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:41.829 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.829 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.836 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:41.848 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:41.848 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:41.848 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:42.478 +03:00 [INF] Received HTTP response headers after 649.169ms - 200
2024-08-15 23:01:42.478 +03:00 [INF] End processing HTTP request after 649.4454ms - 200
2024-08-15 23:01:42.490 +03:00 [WRN] Failed to process the job '994': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:56.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:42.493 +03:00 [INF] Received HTTP response headers after 644.2651ms - 200
2024-08-15 23:01:42.495 +03:00 [INF] End processing HTTP request after 647.074ms - 200
2024-08-15 23:01:42.503 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:38.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:46.839 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:46.839 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:48.397 +03:00 [INF] Received HTTP response headers after 1558.5299ms - 200
2024-08-15 23:01:48.397 +03:00 [INF] End processing HTTP request after 1558.8042ms - 200
2024-08-15 23:01:48.406 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:01:56.882 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:01:56.889 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:01:56.890 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:56.890 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:01:57.506 +03:00 [INF] Received HTTP response headers after 616.1031ms - 200
2024-08-15 23:01:57.506 +03:00 [INF] End processing HTTP request after 616.3741ms - 200
2024-08-15 23:01:57.531 +03:00 [WRN] Failed to process the job '988': an exception occurred. Retry attempt 5 of 10 will be performed in 00:05:41.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:01.885 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:01.885 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:02.603 +03:00 [INF] Received HTTP response headers after 717.8584ms - 200
2024-08-15 23:02:02.603 +03:00 [INF] End processing HTTP request after 718.105ms - 200
2024-08-15 23:02:02.614 +03:00 [WRN] Failed to process the job '995': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:16.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:11.466 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:11.484 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:11.484 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:11.484 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:11.918 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:12.961 +03:00 [INF] Received HTTP response headers after 1476.3469ms - 200
2024-08-15 23:02:12.961 +03:00 [INF] End processing HTTP request after 1476.5973ms - 200
2024-08-15 23:02:12.972 +03:00 [WRN] Failed to process the job '1000': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:43.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:16.470 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.470 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.919 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:16.919 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:17.564 +03:00 [INF] Received HTTP response headers after 644.823ms - 200
2024-08-15 23:02:17.564 +03:00 [INF] End processing HTTP request after 645.1923ms - 200
2024-08-15 23:02:17.575 +03:00 [WRN] Failed to process the job '951': an exception occurred. Retry attempt 7 of 10 will be performed in 00:22:33.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:17.960 +03:00 [INF] Received HTTP response headers after 1489.746ms - 200
2024-08-15 23:02:17.960 +03:00 [INF] End processing HTTP request after 1489.9745ms - 200
2024-08-15 23:02:17.969 +03:00 [WRN] Failed to process the job '999': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:27.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:26.944 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.953 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:26.954 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.954 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.965 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.976 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:26.987 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT o."Id", o."CreatedBy", o."CreatedDate", o."DeletedBy", o."DeletedDate", o."IsDeleted", o."ModifiedBy", o."ModifiedDate", o."OrderId", o."Status", o0."Id", o0."CreatedBy", o0."CreatedDate", o0."DeletedBy", o0."DeletedDate", o0."IsDeleted", o0."ModifiedBy", o0."ModifiedDate", o0."OrderType", o0."Quantity", o0."StockSymbol", o0."TargetPrice", o0."UserId"
FROM "OrderProcesses" AS o
INNER JOIN "Orders" AS o0 ON o."OrderId" = o0."Id"
WHERE o."Status" = 0
2024-08-15 23:02:26.987 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:26.987 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:27.277 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:27.635 +03:00 [INF] Received HTTP response headers after 680.9227ms - 200
2024-08-15 23:02:27.635 +03:00 [INF] End processing HTTP request after 681.0849ms - 200
2024-08-15 23:02:27.642 +03:00 [WRN] Failed to process the job '998': an exception occurred. Retry attempt 3 of 10 will be performed in 00:01:31.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:28.467 +03:00 [INF] Received HTTP response headers after 1480.3004ms - 200
2024-08-15 23:02:28.467 +03:00 [INF] End processing HTTP request after 1480.5189ms - 200
2024-08-15 23:02:28.476 +03:00 [WRN] Failed to process the job '996': an exception occurred. Retry attempt 4 of 10 will be performed in 00:03:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at Core.Service.OrderBackgroundService.OrderBackgroundService.CheckAndProcessOrders() in c:\Users\KC\source\repos\StockFlow\Core\Service\OrderBackgroundService\OrderBackgroundService.cs:line 33
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:31.959 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.960 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.975 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.975 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.991 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:31.992 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.280 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.280 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:32.722 +03:00 [INF] Received HTTP response headers after 730.1544ms - 200
2024-08-15 23:02:32.722 +03:00 [INF] End processing HTTP request after 730.4193ms - 200
2024-08-15 23:02:32.727 +03:00 [INF] Received HTTP response headers after 751.5979ms - 200
2024-08-15 23:02:32.727 +03:00 [INF] End processing HTTP request after 751.886ms - 200
2024-08-15 23:02:32.733 +03:00 [WRN] Failed to process the job '997': an exception occurred. Retry attempt 3 of 10 will be performed in 00:00:58.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:32.733 +03:00 [INF] Received HTTP response headers after 773.841ms - 200
2024-08-15 23:02:32.738 +03:00 [INF] End processing HTTP request after 778.5285ms - 200
2024-08-15 23:02:32.740 +03:00 [WRN] Failed to process the job '993': an exception occurred. Retry attempt 4 of 10 will be performed in 00:02:12.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:32.745 +03:00 [WRN] Failed to process the job '989': an exception occurred. Retry attempt 5 of 10 will be performed in 00:06:36.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:33.006 +03:00 [INF] Received HTTP response headers after 725.6262ms - 200
2024-08-15 23:02:33.006 +03:00 [INF] End processing HTTP request after 725.9038ms - 200
2024-08-15 23:02:33.015 +03:00 [WRN] Failed to process the job '893': an exception occurred. Retry attempt 7 of 10 will be performed in 00:23:08.
System.FormatException: The input string '<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="author" content="Finnhub.io"/>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="shortcut icon"
          href="/static/img/webp/finnhub-logo.webp"/>

    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-64068110-3"></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-64068110-3');
    </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.0/umd/react-dom.production.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.3.1/redux.min.js"></script>
    <script src="https://unpkg.com/react-redux@5.0.7/dist/react-redux.min.js"></script>
    <script type="text/javascript">

      var protocol = location.protocol;
      var wsprotocol
      if (protocol === "https:") {
        wsprotocol = "wss:";
      } else {
        wsprotocol = "ws:";
      }
      var slashes = protocol.concat("//");
      var host = slashes.concat(window.location.host);

      window.wsUrl = ""
      if (window.wsUrl === '') {
        window.wsUrl = window.location.host
      }

      window.getCookie = function getcookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }

      window.setCookie = function setcookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      }

      window.toTitle = function toTitleCase(str) {
        return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }

      window.getUrlParams = function (key) {
        let url = location.href
        var params = {};
        (url + '?').split('?')[1].split('&').forEach(function (pair) {
          pair = (pair + '=').split('=').map(decodeURIComponent);
          if (pair[0].length) {
            params[pair[0]] = pair[1];
          }
        });
        return params[key];
      };

      window.stripHtml = function (html) {
        let tmp = document.createElement("DIV");
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || "";
      }

      window.timeConverter = function tConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var dates = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        var month = months[a.getMonth()];
        var date = a.getDate();
        var time = dates[a.getDay()] + ' ' + month + ' ' + date
        return time;
      }

      window.roundToX = function (num, X) {
        return +(Math.round(num + "e+" + X) + "e-" + X);
      }
    </script>


    <meta name="description"
      content="Finnhub - Free stock API for realtime market data, global company fundamentals, economic data, and alternative data."/>
<meta name="keywords"
      content="stock api,realtime,stock,equity,forex,crypto,fundamental data,economic data,alternative data">
<meta property="og:title" content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://finnhub.io/">
<meta property="og:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta property="og:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta name="twitter:card" content="summary">
<meta name="twitter:title"
      content="Finnhub - Free realtime APIs for stock, forex and cryptocurrency.">
<meta name="twitter:image"
      content="https://static.finnhub.io/img/finnhub_2020-05-09_20_51/logo/logo-transparent-thumbnail.png">
<meta name="twitter:description"
      content="Finnhub - Free APIs for realtime stock, forex, and cryptocurrency. Company fundamentals, Economic data, and Alternative data.">
<meta charset="UTF-8">

    <title>Finnhub Stock APIs - Real-time stock prices, Company fundamentals, Estimates, and Alternative data.</title>

    <script type="text/javascript">
      window.serverData = {"announcement":"Coming here from IEX Cloud ? We are offering a $1000 credit for startups switching from IEX Cloud to Finnhub API. \u003ca href=\"mailto:support@finnhub.io\"\u003eContact us\u003c/a\u003e to learn more."}
      window.login =  false 
      window.isSubscribe = null 
    </script>
</head>
<body>
<div id="root"></div>
<script type="text/javascript" src="/static/js/webpack/dist/main-index.bundle.357882d13b93982f42b7.js"></script></body>
</html>' was not in a correct format.
   at System.Number.ThrowFormatException[TChar](ReadOnlySpan`1 value)
   at System.Decimal.Parse(String s)
   at StockApiService.GetStockPriceAsync(String symbol) in c:\Users\KC\source\repos\StockFlow\Core\Service\StockApi\StockApiService.cs:line 46
   at API.Notification.StockPriceAlert.StockPriceAlertService.CheckAndTriggerAlertsAsync() in c:\Users\KC\source\repos\StockFlow\API\Notification\StockPriceAlert\StockPriceAlertService.cs:line 37
   at InvokeStub_TaskAwaiter.GetResult(Object, Object, IntPtr*)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
2024-08-15 23:02:42.020 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.026 +03:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.035 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:42.044 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AlertType", s."CreatedBy", s."CreatedDate", s."DeletedBy", s."DeletedDate", s."IsDeleted", s."IsTriggered", s."ModifiedBy", s."ModifiedDate", s."StockSymbol", s."TargetPrice", s."TriggeredDate", s."UserId", a."Id", a."AccessFailedCount", a."Balance", a."ConcurrencyStamp", a."Email", a."EmailConfirmationSentAt", a."EmailConfirmationToken", a."EmailConfirmed", a."FirstName", a."ImagePath", a."IsEmailConfirmed", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
FROM "StockPriceAlerts" AS s
INNER JOIN "AspNetUsers" AS a ON s."UserId" = a."Id"
WHERE NOT (s."IsTriggered")
2024-08-15 23:02:47.018 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.019 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.032 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.032 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Start processing HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
2024-08-15 23:02:47.044 +03:00 [INF] Sending HTTP request GET https://finnhub.io/api/v1/api/stockprice?symbol=AAPL
